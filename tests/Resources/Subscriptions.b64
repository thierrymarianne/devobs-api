{"payload":"{\"method\":\"getListAtCursor\",\"options\":{\"screen_name\":\"thierrymarianne\",\"cursor\":\"-1\",\"correlation_id\":\"0a1c7abd-b0fb-4333-bdb8-3e5d91db404c\"},\"response\":{\"users\":[{\"id\":14369175,\"id_str\":\"14369175\",\"name\":\"Ross Tuck\",\"screen_name\":\"rosstuck\",\"location\":\"Utrecht, The Netherlands\",\"description\":\"American dev stranded in the Netherlands. Occasional speaker, Tactician maintainer, co-founder of @DomCode, raising a cat with @Aisha. He\\\/him.\",\"url\":\"https:\\\/\\\/t.co\\\/qIFq9tMbhJ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qIFq9tMbhJ\",\"expanded_url\":\"http:\\\/\\\/rosstuck.com\",\"display_url\":\"rosstuck.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":5504,\"friends_count\":94,\"listed_count\":162,\"created_at\":\"Sat Apr 12 15:00:11 +0000 2008\",\"favourites_count\":1808,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5707,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 28 09:35:06 +0000 2020\",\"id\":1332619014221205505,\"id_str\":\"1332619014221205505\",\"text\":\"@Aisha @snipeyhead Here, let me send your favorite meme in return https:\\\/\\\/t.co\\\/2QeTyRMDZU\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Aisha\",\"name\":\"Aisha Sie\",\"id\":6500632,\"id_str\":\"6500632\",\"indices\":[0,6]},{\"screen_name\":\"snipeyhead\",\"name\":\"snipe, poo doula \\u2b51\\u2b52\\u2b52\\u2b52\\u2b52\",\"id\":14246782,\"id_str\":\"14246782\",\"indices\":[7,18]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2QeTyRMDZU\",\"expanded_url\":\"https:\\\/\\\/youtu.be\\\/3Xl0Qr0uXuY\",\"display_url\":\"youtu.be\\\/3Xl0Qr0uXuY\",\"indices\":[66,89]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1332618629842694145,\"in_reply_to_status_id_str\":\"1332618629842694145\",\"in_reply_to_user_id\":6500632,\"in_reply_to_user_id_str\":\"6500632\",\"in_reply_to_screen_name\":\"Aisha\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/966938587697594368\\\/cXGdMNHE_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/966938587697594368\\\/cXGdMNHE_normal.jpg\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":19832122,\"id_str\":\"19832122\",\"name\":\"Pauline Vos\",\"screen_name\":\"vanamerongen\",\"location\":\"Amsterdam\",\"description\":\"That Git girl. Feed is 10% tech, 10% shitposts, 80% politics.\",\"url\":\"https:\\\/\\\/t.co\\\/W6fGUAk0NS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/W6fGUAk0NS\",\"expanded_url\":\"http:\\\/\\\/pauline-vos.nl\",\"display_url\":\"pauline-vos.nl\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1906,\"friends_count\":439,\"listed_count\":48,\"created_at\":\"Sat Jan 31 21:17:32 +0000 2009\",\"favourites_count\":23873,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":21180,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:37:16 +0000 2020\",\"id\":1336787018177798147,\"id_str\":\"1336787018177798147\",\"text\":\"@LucieLoveBug @RedHairnBlkLthr @aashish_sarda @HomsSldrm @Chris_A425 If it was it was terribly executed so equally embarrassing\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LucieLoveBug\",\"name\":\"JustAnotherManicMumDay\",\"id\":4197854271,\"id_str\":\"4197854271\",\"indices\":[0,13]},{\"screen_name\":\"RedHairnBlkLthr\",\"name\":\"Red Hair and Black Leather\",\"id\":838530278792450048,\"id_str\":\"838530278792450048\",\"indices\":[14,30]},{\"screen_name\":\"aashish_sarda\",\"name\":\"Chai-Shai\",\"id\":3233363948,\"id_str\":\"3233363948\",\"indices\":[31,45]},{\"screen_name\":\"HomsSldrm\",\"name\":\"\\u300bNEVER GIVE UP\\u300a\",\"id\":1875608707,\"id_str\":\"1875608707\",\"indices\":[46,56]},{\"screen_name\":\"Chris_A425\",\"name\":\"Chris\",\"id\":166240918,\"id_str\":\"166240918\",\"indices\":[57,68]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336697467874766849,\"in_reply_to_status_id_str\":\"1336697467874766849\",\"in_reply_to_user_id\":4197854271,\"in_reply_to_user_id_str\":\"4197854271\",\"in_reply_to_screen_name\":\"LucieLoveBug\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ACDED6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160936940469964800\\\/lxK_6CjF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160936940469964800\\\/lxK_6CjF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/19832122\\\/1603811317\",\"profile_link_color\":\"038543\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2151555601,\"id_str\":\"2151555601\",\"name\":\"Jonas Kvinge\",\"screen_name\":\"jonaskvinge\",\"location\":\"\",\"description\":\"Linux and Qt enthusiast, C\\\/C++ programmer and free software contributor\",\"url\":\"https:\\\/\\\/t.co\\\/qhOE8rw5e1\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qhOE8rw5e1\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/jonaski\",\"display_url\":\"github.com\\\/jonaski\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":70,\"friends_count\":791,\"listed_count\":0,\"created_at\":\"Wed Oct 23 19:25:03 +0000 2013\",\"favourites_count\":124,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":204,\"lang\":null,\"status\":{\"created_at\":\"Thu Jan 23 21:49:22 +0000 2020\",\"id\":1220463562109472774,\"id_str\":\"1220463562109472774\",\"text\":\"RT @pfelipm: Strawberry Music Player is a terrific open source, multi-platform \\ud83c\\udfb6 audio player by @jonaskvinge. Volunteer translators  for l\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"pfelipm\",\"name\":\"Pablo Felip\",\"id\":127973484,\"id_str\":\"127973484\",\"indices\":[3,11]},{\"screen_name\":\"jonaskvinge\",\"name\":\"Jonas Kvinge\",\"id\":2151555601,\"id_str\":\"2151555601\",\"indices\":[97,109]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Sep 03 22:22:27 +0000 2019\",\"id\":1169012807251243008,\"id_str\":\"1169012807251243008\",\"text\":\"Strawberry Music Player is a terrific open source, multi-platform \\ud83c\\udfb6 audio player by @jonaskvinge. Volunteer transla\\u2026 https:\\\/\\\/t.co\\\/mCizsf4XqR\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jonaskvinge\",\"name\":\"Jonas Kvinge\",\"id\":2151555601,\"id_str\":\"2151555601\",\"indices\":[84,96]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/mCizsf4XqR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1169012807251243008\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1169012805858734081,\"in_reply_to_status_id_str\":\"1169012805858734081\",\"in_reply_to_user_id\":127973484,\"in_reply_to_user_id_str\":\"127973484\",\"in_reply_to_screen_name\":\"pfelipm\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ACDED6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/732349866421026816\\\/3-yKtVX0_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/732349866421026816\\\/3-yKtVX0_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2151555601\\\/1422661367\",\"profile_link_color\":\"038543\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":359831209,\"id_str\":\"359831209\",\"name\":\"Timnit Gebru\",\"screen_name\":\"timnitGebru\",\"location\":\"\",\"description\":\"she\\\/her\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":77090,\"friends_count\":893,\"listed_count\":805,\"created_at\":\"Mon Aug 22 07:22:32 +0000 2011\",\"favourites_count\":11580,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":7158,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:45:29 +0000 2020\",\"id\":1336789086103875602,\"id_str\":\"1336789086103875602\",\"text\":\"RT @khimya: #IStandWithTimnit https:\\\/\\\/t.co\\\/spriouR0L2\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"IStandWithTimnit\",\"indices\":[12,29]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"khimya\",\"name\":\"Khimya\",\"id\":91026902,\"id_str\":\"91026902\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/spriouR0L2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/timnitGebru\\\/status\\\/1336758636262125571\",\"display_url\":\"twitter.com\\\/timnitGebru\\\/st\\u2026\",\"indices\":[30,53]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 21:45:19 +0000 2020\",\"id\":1336789044819320837,\"id_str\":\"1336789044819320837\",\"text\":\"#IStandWithTimnit https:\\\/\\\/t.co\\\/spriouR0L2\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"IStandWithTimnit\",\"indices\":[0,17]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/spriouR0L2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/timnitGebru\\\/status\\\/1336758636262125571\",\"display_url\":\"twitter.com\\\/timnitGebru\\\/st\\u2026\",\"indices\":[18,41]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336758636262125571,\"quoted_status_id_str\":\"1336758636262125571\",\"retweet_count\":12,\"favorite_count\":48,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"is_quote_status\":true,\"quoted_status_id\":1336758636262125571,\"quoted_status_id_str\":\"1336758636262125571\",\"retweet_count\":12,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1542707565\\\/image_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1542707565\\\/image_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14503,\"id_str\":\"14503\",\"name\":\"Rachel Andrew\",\"screen_name\":\"rachelandrew\",\"location\":\"Bristol, UK\",\"description\":\"Smashing Mag Editor in Chief. Writer. Editor. Webdev. CSSWG member. Likes CSS, running, bikes, airplanes, cats. Didn't see your DM. https:\\\/\\\/t.co\\\/566PbwjL3L\",\"url\":\"https:\\\/\\\/t.co\\\/bnYdfVIAqQ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bnYdfVIAqQ\",\"expanded_url\":\"https:\\\/\\\/rachelandrew.co.uk\",\"display_url\":\"rachelandrew.co.uk\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/566PbwjL3L\",\"expanded_url\":\"http:\\\/\\\/rachelandrew.co.uk\\\/contact\",\"display_url\":\"rachelandrew.co.uk\\\/contact\",\"indices\":[132,155]}]}},\"protected\":false,\"followers_count\":56109,\"friends_count\":1567,\"listed_count\":2168,\"created_at\":\"Wed Nov 22 09:23:27 +0000 2006\",\"favourites_count\":5805,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":31377,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:11:11 +0000 2020\",\"id\":1336780455547457537,\"id_str\":\"1336780455547457537\",\"text\":\"seconded, Lea did an amazing job with this. https:\\\/\\\/t.co\\\/YQkSLuKrCq\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/YQkSLuKrCq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/svgeesus\\\/status\\\/1336780187845931017\",\"display_url\":\"twitter.com\\\/svgeesus\\\/statu\\u2026\",\"indices\":[44,67]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336780187845931017,\"quoted_status_id_str\":\"1336780187845931017\",\"retweet_count\":1,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/781380559947915265\\\/wrjtv_jp_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/781380559947915265\\\/wrjtv_jp_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14503\\\/1474206093\",\"profile_link_color\":\"412658\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":22761152,\"id_str\":\"22761152\",\"name\":\"David McKay\",\"screen_name\":\"rawkode\",\"location\":\"Scotland, Europe\",\"description\":\"\\ud83c\\udfachttps:\\\/\\\/t.co\\\/C0Jm6GfhfG \\ud83c\\udf1f #CloudNative #DevRel #Kubernetes #Observability \\ud83d\\udcbc @EquinixMetal \\ud83c\\udfc6 #InfluxAce  \\u2139\\ufe0f He\\\/Him\",\"url\":\"https:\\\/\\\/t.co\\\/x8aEsd2psc\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/x8aEsd2psc\",\"expanded_url\":\"https:\\\/\\\/rawkode.com\",\"display_url\":\"rawkode.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/C0Jm6GfhfG\",\"expanded_url\":\"http:\\\/\\\/rawkode.live\",\"display_url\":\"rawkode.live\",\"indices\":[1,24]}]}},\"protected\":false,\"followers_count\":2877,\"friends_count\":958,\"listed_count\":137,\"created_at\":\"Wed Mar 04 12:06:23 +0000 2009\",\"favourites_count\":4133,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2319,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:53:51 +0000 2020\",\"id\":1336791193682931713,\"id_str\":\"1336791193682931713\",\"text\":\"@clickup If someone wants to drop the APK in my email, I'd be happy to test it out for you \\ud83d\\ude05\\ud83d\\ude09\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"clickup\",\"name\":\"ClickUp\",\"id\":857643149149085696,\"id_str\":\"857643149149085696\",\"indices\":[0,8]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336790514788610059,\"in_reply_to_status_id_str\":\"1336790514788610059\",\"in_reply_to_user_id\":22761152,\"in_reply_to_user_id_str\":\"22761152\",\"in_reply_to_screen_name\":\"rawkode\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334435714755399680\\\/tqG8Yj-h_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334435714755399680\\\/tqG8Yj-h_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/22761152\\\/1606124049\",\"profile_link_color\":\"FF5757\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":718371139983175680,\"id_str\":\"718371139983175680\",\"name\":\"Val\\u00e9rie Robert \\ud83d\\udd06\\ud83d\\udd6f\\ufe0f\\ud83d\\udca1\",\"screen_name\":\"ValRobert974\",\"location\":\"Universit\\u00e9 Paris Saclay\",\"description\":\"Prof de maths CPGE #LaR\\u00e9union #team974\\ud83c\\uddf7\\ud83c\\uddea.PhD\\\/docteure #statistics, @StatFr & @Apmep_Run. #fillesetmaths #ecureuilroux #Raddict. Mes propos n'engagent que moi.\",\"url\":\"https:\\\/\\\/t.co\\\/q62Ui1CHFn\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/q62Ui1CHFn\",\"expanded_url\":\"https:\\\/\\\/valerierobert-maths.re\\\/\",\"display_url\":\"valerierobert-maths.re\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1996,\"friends_count\":2178,\"listed_count\":17,\"created_at\":\"Fri Apr 08 09:33:21 +0000 2016\",\"favourites_count\":23556,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9771,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:44:47 +0000 2020\",\"id\":1336758711742763028,\"id_str\":\"1336758711742763028\",\"text\":\"@LC19904881 https:\\\/\\\/t.co\\\/XlTAUJ8CGU\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LC19904881\",\"name\":\"Laurent Ch\\u00e9no\",\"id\":1248677588349915136,\"id_str\":\"1248677588349915136\",\"indices\":[0,11]}],\"urls\":[],\"media\":[{\"id\":1336758698614661122,\"id_str\":\"1336758698614661122\",\"indices\":[12,35],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eo0e9DVXIAI4sXu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eo0e9DVXIAI4sXu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/XlTAUJ8CGU\",\"display_url\":\"pic.twitter.com\\\/XlTAUJ8CGU\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ValRobert974\\\/status\\\/1336758711742763028\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":264,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":264,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":264,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336758698614661122,\"id_str\":\"1336758698614661122\",\"indices\":[12,35],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eo0e9DVXIAI4sXu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eo0e9DVXIAI4sXu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/XlTAUJ8CGU\",\"display_url\":\"pic.twitter.com\\\/XlTAUJ8CGU\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ValRobert974\\\/status\\\/1336758711742763028\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":264,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":264,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":264,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[125,66],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/Eo0e9DVXIAI4sXu.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336757347373477890,\"in_reply_to_status_id_str\":\"1336757347373477890\",\"in_reply_to_user_id\":1248677588349915136,\"in_reply_to_user_id_str\":\"1248677588349915136\",\"in_reply_to_screen_name\":\"LC19904881\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1335973963223150598\\\/cBzrOClq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1335973963223150598\\\/cBzrOClq_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/718371139983175680\\\/1602476354\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3448284313,\"id_str\":\"3448284313\",\"name\":\"elvis\",\"screen_name\":\"omarsar0\",\"location\":\"London, UK\",\"description\":\"Machine Learning Accessibility @paperswithcode & @FacebookAI \\u2022 ML\\\/NLP research & education \\u2022 Founder\\\/Editor at @dair_ai \\u2022 PhD \\u2022 http:\\\/\\\/elvissaravia.substack.\",\"url\":\"https:\\\/\\\/t.co\\\/iwJ2i95BVw\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iwJ2i95BVw\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/omarsar\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/omarsar\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":14143,\"friends_count\":179,\"listed_count\":471,\"created_at\":\"Fri Sep 04 12:59:26 +0000 2015\",\"favourites_count\":19205,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":8048,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:48:44 +0000 2020\",\"id\":1336774806419759110,\"id_str\":\"1336774806419759110\",\"text\":\"RT @omarsar0: It's always good to keep learning new things.\\n\\nThese are free websites I use to learn a bit more about machine learning every\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"omarsar0\",\"name\":\"elvis\",\"id\":3448284313,\"id_str\":\"3448284313\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 12:44:52 +0000 2020\",\"id\":1336653038036115457,\"id_str\":\"1336653038036115457\",\"text\":\"It's always good to keep learning new things.\\n\\nThese are free websites I use to learn a bit more about machine lear\\u2026 https:\\\/\\\/t.co\\\/kOy8MM8eR9\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kOy8MM8eR9\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336653038036115457\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":109,\"favorite_count\":630,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":109,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/939313677647282181\\\/vZjFWtAn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/939313677647282181\\\/vZjFWtAn_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3448284313\\\/1565974901\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":18737039,\"id_str\":\"18737039\",\"name\":\"Santiago\",\"screen_name\":\"svpino\",\"location\":\"Florida, United States\",\"description\":\"Computer Scientist.\",\"url\":\"https:\\\/\\\/t.co\\\/DMxjG7EtIK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DMxjG7EtIK\",\"expanded_url\":\"https:\\\/\\\/gum.co\\\/LLhIW\",\"display_url\":\"gum.co\\\/LLhIW\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":32007,\"friends_count\":316,\"listed_count\":553,\"created_at\":\"Wed Jan 07 20:35:01 +0000 2009\",\"favourites_count\":19982,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":15494,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:19:28 +0000 2020\",\"id\":1336797640198123526,\"id_str\":\"1336797640198123526\",\"text\":\"This was an extremely successful experiment :)\\n\\nIf you couldn't grab a $10 copy, I'm opening it up for another 10 c\\u2026 https:\\\/\\\/t.co\\\/fxSyv9tHI1\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fxSyv9tHI1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336797640198123526\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335997263303372802,\"in_reply_to_status_id_str\":\"1335997263303372802\",\"in_reply_to_user_id\":18737039,\"in_reply_to_user_id_str\":\"18737039\",\"in_reply_to_screen_name\":\"svpino\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301989244018348033\\\/3RL0v2S8_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301989244018348033\\\/3RL0v2S8_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/18737039\\\/1607021959\",\"profile_link_color\":\"353D73\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":413046527,\"id_str\":\"413046527\",\"name\":\"Pol-Valentin Cami\",\"screen_name\":\"Pol_Valentin\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":34,\"friends_count\":98,\"listed_count\":0,\"created_at\":\"Tue Nov 15 12:29:42 +0000 2011\",\"favourites_count\":19,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":33,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 03 20:29:28 +0000 2020\",\"id\":1323723992474226688,\"id_str\":\"1323723992474226688\",\"text\":\"@Selrahcd J'arrive pas a comprendre les r\\u00e8gles pour r\\u00e9partir les joueurs \\ud83d\\ude05\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Selrahcd\",\"name\":\"Charles Desneuf\",\"id\":42056927,\"id_str\":\"42056927\",\"indices\":[0,9]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1323584927623950336,\"in_reply_to_status_id_str\":\"1323584927623950336\",\"in_reply_to_user_id\":42056927,\"in_reply_to_user_id_str\":\"42056927\",\"in_reply_to_screen_name\":\"Selrahcd\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/996023396097019904\\\/EVdlIbka_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/996023396097019904\\\/EVdlIbka_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":84138776,\"id_str\":\"84138776\",\"name\":\"Rapha\\u00ebl Louvradoux\",\"screen_name\":\"rlvdx\",\"location\":\"Paris\",\"description\":\"Se\\u00f1or pun developer \\u00e0 @Evaneos - Ex dev @Slatefr - Ex-ex fossoyeur de projets @Europe1 & @leLab_E1 - Vaguement journaliste made in @IjbaOfficiel.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":710,\"friends_count\":261,\"listed_count\":51,\"created_at\":\"Wed Oct 21 19:13:27 +0000 2009\",\"favourites_count\":1215,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4952,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 04 21:29:47 +0000 2020\",\"id\":1324101559781908480,\"id_str\":\"1324101559781908480\",\"text\":\"RT @DocArnica: Un patient ce matin : \\u00ab\\u00a0de toutes mani\\u00e8res une ann\\u00e9e qui faisait deux fois vingt devait finir en quarantaine.\\u00a0\\u00bb\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"DocArnica\",\"name\":\"DocArnica\",\"id\":115903534,\"id_str\":\"115903534\",\"indices\":[3,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Nov 04 14:39:54 +0000 2020\",\"id\":1323998410089836546,\"id_str\":\"1323998410089836546\",\"text\":\"Un patient ce matin : \\u00ab\\u00a0de toutes mani\\u00e8res une ann\\u00e9e qui faisait deux fois vingt devait finir en quarantaine.\\u00a0\\u00bb\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":981,\"favorite_count\":4362,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":981,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1303715694345936896\\\/AWYnOjNP_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1303715694345936896\\\/AWYnOjNP_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/84138776\\\/1599665142\",\"profile_link_color\":\"F34235\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15279829,\"id_str\":\"15279829\",\"name\":\"Antoine L\\u00e9p\\u00e9e\",\"screen_name\":\"alepee\",\"location\":\"Paris, France\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/T6koyZsINs\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T6koyZsINs\",\"expanded_url\":\"http:\\\/\\\/antoine.io\",\"display_url\":\"antoine.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":203,\"friends_count\":339,\"listed_count\":14,\"created_at\":\"Mon Jun 30 15:50:12 +0000 2008\",\"favourites_count\":143,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1426,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 30 00:15:16 +0000 2020\",\"id\":1333202903973175297,\"id_str\":\"1333202903973175297\",\"text\":\"@AdMadri10ta Alors on se calme \\ud83d\\ude02 c\\u2019est relativement courant au changement de saison et vous en trouverez d\\u2019avantage\\u2026 https:\\\/\\\/t.co\\\/Se7GQ4XmA2\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AdMadri10ta\",\"name\":\"Ad\",\"id\":730397978381406208,\"id_str\":\"730397978381406208\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Se7GQ4XmA2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333202903973175297\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1332035144115507203,\"in_reply_to_status_id_str\":\"1332035144115507203\",\"in_reply_to_user_id\":730397978381406208,\"in_reply_to_user_id_str\":\"730397978381406208\",\"in_reply_to_screen_name\":\"AdMadri10ta\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/832546557111181313\\\/5q4U3Plh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/832546557111181313\\\/5q4U3Plh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15279829\\\/1552720612\",\"profile_link_color\":\"89C9FA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":1322071040,\"id_str\":\"1322071040\",\"name\":\"Leon Matthieu\",\"screen_name\":\"LeonMatthieu\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":22,\"friends_count\":51,\"listed_count\":0,\"created_at\":\"Tue Apr 02 08:51:47 +0000 2013\",\"favourites_count\":4,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":10,\"lang\":null,\"status\":{\"created_at\":\"Fri Jun 05 19:25:32 +0000 2020\",\"id\":1268987335544365057,\"id_str\":\"1268987335544365057\",\"text\":\"@free, je ne pensais pas que c'\\u00e9tait possible de mettre autant de barri\\u00e8res (et de bugs) pour emp\\u00eacher ses abonn\\u00e9s\\u2026 https:\\\/\\\/t.co\\\/xKqNbdlvyX\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"free\",\"name\":\"Free\",\"id\":252263949,\"id_str\":\"252263949\",\"indices\":[0,5]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xKqNbdlvyX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1268987335544365057\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":252263949,\"in_reply_to_user_id_str\":\"252263949\",\"in_reply_to_screen_name\":\"free\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/378800000524740069\\\/9fac4e083bc693840d9396671b9dcce2_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/378800000524740069\\\/9fac4e083bc693840d9396671b9dcce2_normal.jpeg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":197530793,\"id_str\":\"197530793\",\"name\":\"Arthur Ggd\",\"screen_name\":\"ArthyGgd\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":38,\"friends_count\":113,\"listed_count\":2,\"created_at\":\"Fri Oct 01 19:06:36 +0000 2010\",\"favourites_count\":10,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":37,\"lang\":null,\"status\":{\"created_at\":\"Tue Jan 28 00:32:51 +0000 2020\",\"id\":1221954252651868165,\"id_str\":\"1221954252651868165\",\"text\":\"RT @felixge: 1) Are you using #postgres via #docker for mac?\\n\\nHave you ever noticed `EXPLAIN ANALYZE` slowing down your queries by like 60x\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"postgres\",\"indices\":[30,39]},{\"text\":\"docker\",\"indices\":[44,51]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"felixge\",\"name\":\"Felix Geisend\\u00f6rfer\",\"id\":9599342,\"id_str\":\"9599342\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Jan 26 19:17:31 +0000 2020\",\"id\":1221512507690496001,\"id_str\":\"1221512507690496001\",\"text\":\"1) Are you using #postgres via #docker for mac?\\n\\nHave you ever noticed `EXPLAIN ANALYZE` slowing down your queries\\u2026 https:\\\/\\\/t.co\\\/j5dPcJma4B\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"postgres\",\"indices\":[17,26]},{\"text\":\"docker\",\"indices\":[31,38]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/j5dPcJma4B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1221512507690496001\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":193,\"favorite_count\":466,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":193,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3256498654\\\/f82be8c527d6a403d722a30e9883c6cb_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3256498654\\\/f82be8c527d6a403d722a30e9883c6cb_normal.jpeg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":9617282,\"id_str\":\"9617282\",\"name\":\"Greg Young\",\"screen_name\":\"gregyoung\",\"location\":\"Everywhere\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":22300,\"friends_count\":2171,\"listed_count\":571,\"created_at\":\"Tue Oct 23 07:42:00 +0000 2007\",\"favourites_count\":7213,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":30928,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 12:01:11 +0000 2020\",\"id\":1336642044073287681,\"id_str\":\"1336642044073287681\",\"text\":\"Ai-je des amis en Ha\\u00efti? C'est telement @#$%ing cheap d'y aller mais je ne connais pas les endroits.\\n\\n@thinkb4coding p-e tu peux m'assister?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thinkb4coding\",\"name\":\"J\\u00e9r\\u00e9mie Chassaing\",\"id\":18165698,\"id_str\":\"18165698\",\"indices\":[102,116]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1293293549702782979\\\/mblOE8kH_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1293293549702782979\\\/mblOE8kH_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/9617282\\\/1354130416\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":380616577,\"id_str\":\"380616577\",\"name\":\"Stefan Judis\",\"screen_name\":\"stefanjudis\",\"location\":\"Berlin\",\"description\":\"I share what I learn in #webdev.\\n\\nfrontend dev; devrel @contentful; maintainer @tinyhelpersdev & @randomMDN; #devsheets (he\\\/him)\\n\\n\\u270d\\ufe0f https:\\\/\\\/t.co\\\/DGg7drLx7t\",\"url\":\"https:\\\/\\\/t.co\\\/BVyUedMk0j\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/BVyUedMk0j\",\"expanded_url\":\"http:\\\/\\\/www.stefanjudis.com\",\"display_url\":\"stefanjudis.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DGg7drLx7t\",\"expanded_url\":\"http:\\\/\\\/newsletter.stefanjudis.com\",\"display_url\":\"newsletter.stefanjudis.com\",\"indices\":[133,156]}]}},\"protected\":false,\"followers_count\":7306,\"friends_count\":716,\"listed_count\":346,\"created_at\":\"Mon Sep 26 23:19:52 +0000 2011\",\"favourites_count\":13623,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":13304,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:33:51 +0000 2020\",\"id\":1336801258737430529,\"id_str\":\"1336801258737430529\",\"text\":\"@eirikurn Huh, that looks promising @asciidisco. :) \\n\\nThanks @eirikurn. \\ud83d\\ude47\\u200d\\u2642\\ufe0f\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"eirikurn\",\"name\":\"Eir\\u00edkur Nilsson\",\"id\":7920752,\"id_str\":\"7920752\",\"indices\":[0,9]},{\"screen_name\":\"asciidisco\",\"name\":\"Hagbard Celine\",\"id\":303823728,\"id_str\":\"303823728\",\"indices\":[36,47]},{\"screen_name\":\"eirikurn\",\"name\":\"Eir\\u00edkur Nilsson\",\"id\":7920752,\"id_str\":\"7920752\",\"indices\":[61,70]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336800683782266881,\"in_reply_to_status_id_str\":\"1336800683782266881\",\"in_reply_to_user_id\":7920752,\"in_reply_to_user_id_str\":\"7920752\",\"in_reply_to_screen_name\":\"eirikurn\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1188024416313196546\\\/zGxQhsWI_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1188024416313196546\\\/zGxQhsWI_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/380616577\\\/1519946876\",\"profile_link_color\":\"444444\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":778187008455876609,\"id_str\":\"778187008455876609\",\"name\":\"Amnesty Tech\",\"screen_name\":\"AmnestyTech\",\"location\":\"Internet\",\"description\":\"Amnesty International - Technology & Human Rights. Privacy, Surveillance, Censorship and all the Internet things, with a good dose of human rights.\",\"url\":\"https:\\\/\\\/t.co\\\/sFO390b7Zq\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/sFO390b7Zq\",\"expanded_url\":\"https:\\\/\\\/www.amnesty.org\",\"display_url\":\"amnesty.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4202,\"friends_count\":97,\"listed_count\":142,\"created_at\":\"Tue Sep 20 11:00:15 +0000 2016\",\"favourites_count\":39,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":221,\"lang\":null,\"status\":{\"created_at\":\"Fri Sep 25 11:10:41 +0000 2020\",\"id\":1309450246351654913,\"id_str\":\"1309450246351654913\",\"text\":\"German-made FinSpy spyware found in Egypt, and Mac and Linux versions revealed\\nhttps:\\\/\\\/t.co\\\/6D6ypYvvQs\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6D6ypYvvQs\",\"expanded_url\":\"https:\\\/\\\/www.amnesty.org\\\/en\\\/latest\\\/research\\\/2020\\\/09\\\/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed\\\/\",\"display_url\":\"amnesty.org\\\/en\\\/latest\\\/rese\\u2026\",\"indices\":[79,102]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":90,\"favorite_count\":70,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/779956176154923008\\\/q6EertLN_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/779956176154923008\\\/q6EertLN_normal.jpg\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4270649729,\"id_str\":\"4270649729\",\"name\":\"William Narmontas\",\"screen_name\":\"ScalaWilliam\",\"location\":\"United Kingdom\",\"description\":\"Master your #Scala with @ScalaAlgorithms\",\"url\":\"https:\\\/\\\/t.co\\\/JpnFd6fBRj\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JpnFd6fBRj\",\"expanded_url\":\"https:\\\/\\\/www.scala-algorithms.com\\\/\",\"display_url\":\"scala-algorithms.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":665,\"friends_count\":1228,\"listed_count\":56,\"created_at\":\"Wed Nov 25 04:17:01 +0000 2015\",\"favourites_count\":10985,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4396,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 12:48:36 +0000 2020\",\"id\":1335929201652797447,\"id_str\":\"1335929201652797447\",\"text\":\"@codingedgar @algo_expert if you\\u2019re accessing or transforming, an Array will do. it is not necessarily using the im\\u2026 https:\\\/\\\/t.co\\\/3kRmcg7beP\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"codingedgar\",\"name\":\"Edgar Rodr\\u00edguez\",\"id\":1211610832267702272,\"id_str\":\"1211610832267702272\",\"indices\":[0,12]},{\"screen_name\":\"algo_expert\",\"name\":\"AlgoExpert\",\"id\":1295249856508956672,\"id_str\":\"1295249856508956672\",\"indices\":[13,25]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3kRmcg7beP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335929201652797447\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1335927355823575041,\"in_reply_to_status_id_str\":\"1335927355823575041\",\"in_reply_to_user_id\":1211610832267702272,\"in_reply_to_user_id_str\":\"1211610832267702272\",\"in_reply_to_screen_name\":\"codingedgar\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1326990076669255685\\\/JlD1vQkP_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1326990076669255685\\\/JlD1vQkP_normal.jpg\",\"profile_link_color\":\"800000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":41052095,\"id_str\":\"41052095\",\"name\":\"Annie Jean-Baptiste (She\\\/Her)\",\"screen_name\":\"Its_Me_AJB\",\"location\":\"Where the wild things are. \",\"description\":\"\\u2022Author, Building for Everyone\\n\\u2022Founder, Equity Army\\n\\u2022 @Google Head of Product Inclusion\\n\\u2022 @Uofpenn Resident Intrapreneur\\n\\u2022 Opinions mine, rt \\ud83d\\udeab endorsement\",\"url\":\"https:\\\/\\\/t.co\\\/PuXmwTGxi8\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PuXmwTGxi8\",\"expanded_url\":\"http:\\\/\\\/www.anniejeanbaptiste.com\",\"display_url\":\"anniejeanbaptiste.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2402,\"friends_count\":1423,\"listed_count\":42,\"created_at\":\"Tue May 19 04:12:34 +0000 2009\",\"favourites_count\":22612,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4371,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:00:12 +0000 2020\",\"id\":1336717293997330433,\"id_str\":\"1336717293997330433\",\"text\":\"RT @IssaRae: They made me a Queen and had me build a castle for my beautiful muppet daughter on @SesameStreet, airing this Sunday on @hboma\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"IssaRae\",\"name\":\"Issa Rae\",\"id\":78525538,\"id_str\":\"78525538\",\"indices\":[3,11]},{\"screen_name\":\"sesamestreet\",\"name\":\"Sesame Street\",\"id\":86330674,\"id_str\":\"86330674\",\"indices\":[96,109]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 16:05:50 +0000 2020\",\"id\":1336703612962029568,\"id_str\":\"1336703612962029568\",\"text\":\"They made me a Queen and had me build a castle for my beautiful muppet daughter on @SesameStreet, airing this Sunda\\u2026 https:\\\/\\\/t.co\\\/PSNkq2qNGW\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sesamestreet\",\"name\":\"Sesame Street\",\"id\":86330674,\"id_str\":\"86330674\",\"indices\":[83,96]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PSNkq2qNGW\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336703612962029568\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5325,\"favorite_count\":49686,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5325,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/344513261570286602\\\/ab7c9e1a2119387b91ed40d3c911ec86_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/344513261570286602\\\/ab7c9e1a2119387b91ed40d3c911ec86_normal.jpeg\",\"profile_link_color\":\"F5ABB5\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1728846798,\"id_str\":\"1728846798\",\"name\":\"Charles Fournier\",\"screen_name\":\"CharladFournier\",\"location\":\"Paris, France\",\"description\":\"D\\u00e9veloppeur iOS\",\"url\":\"https:\\\/\\\/t.co\\\/xYpCP2sb7x\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xYpCP2sb7x\",\"expanded_url\":\"http:\\\/\\\/cafournier.com\",\"display_url\":\"cafournier.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":43,\"friends_count\":256,\"listed_count\":0,\"created_at\":\"Wed Sep 04 14:08:32 +0000 2013\",\"favourites_count\":51,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":26,\"lang\":null,\"status\":{\"created_at\":\"Mon Sep 07 15:13:20 +0000 2020\",\"id\":1302988328317472768,\"id_str\":\"1302988328317472768\",\"text\":\"@Teolemon @Fnac Pourquoi pas \\ud83d\\ude09 J'ai d\\u00e9j\\u00e0 pas mal travaill\\u00e9 avec OpenFoodFacts pour une autre application. Je devrai\\u2026 https:\\\/\\\/t.co\\\/4yrKEYhqnr\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Teolemon\",\"name\":\"Pierre Slamich\",\"id\":22653020,\"id_str\":\"22653020\",\"indices\":[0,9]},{\"screen_name\":\"Fnac\",\"name\":\"Fnac\",\"id\":8806412,\"id_str\":\"8806412\",\"indices\":[10,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4yrKEYhqnr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1302988328317472768\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1302967452935041025,\"in_reply_to_status_id_str\":\"1302967452935041025\",\"in_reply_to_user_id\":22653020,\"in_reply_to_user_id_str\":\"22653020\",\"in_reply_to_screen_name\":\"Teolemon\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/552595265614802945\\\/SkApjD84_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/552595265614802945\\\/SkApjD84_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1728846798\\\/1587335092\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1234053308,\"id_str\":\"1234053308\",\"name\":\"Codota\",\"screen_name\":\"Codota_\",\"location\":\"In Your IDE :)\",\"description\":\"Codota is an AI Code Completion tool that helps software developers write better code faster - https:\\\/\\\/t.co\\\/CjfXLPhwQi\\n\\nCodota also operates @TabNineInc\",\"url\":\"http:\\\/\\\/t.co\\\/3ie4wRkjPi\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/3ie4wRkjPi\",\"expanded_url\":\"http:\\\/\\\/www.codota.com\",\"display_url\":\"codota.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CjfXLPhwQi\",\"expanded_url\":\"http:\\\/\\\/codota.com\",\"display_url\":\"codota.com\",\"indices\":[95,118]}]}},\"protected\":false,\"followers_count\":2096,\"friends_count\":255,\"listed_count\":28,\"created_at\":\"Sat Mar 02 10:28:30 +0000 2013\",\"favourites_count\":940,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":827,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 19:56:41 +0000 2020\",\"id\":1336399318031462404,\"id_str\":\"1336399318031462404\",\"text\":\"Getting used to new standards https:\\\/\\\/t.co\\\/lBttHYBQQz https:\\\/\\\/t.co\\\/ljRm8W3iXq\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lBttHYBQQz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/JamesPeters98\\\/status\\\/1336368142235394050\",\"display_url\":\"twitter.com\\\/JamesPeters98\\\/\\u2026\",\"indices\":[30,53]}],\"media\":[{\"id\":1336399310313885701,\"id_str\":\"1336399310313885701\",\"indices\":[54,77],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovYF5lWEAUd63k.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovYF5lWEAUd63k.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ljRm8W3iXq\",\"display_url\":\"pic.twitter.com\\\/ljRm8W3iXq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Codota_\\\/status\\\/1336399318031462404\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":498,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":498,\"h\":268,\"resize\":\"fit\"},\"small\":{\"w\":498,\"h\":268,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336399310313885701,\"id_str\":\"1336399310313885701\",\"indices\":[54,77],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovYF5lWEAUd63k.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovYF5lWEAUd63k.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ljRm8W3iXq\",\"display_url\":\"pic.twitter.com\\\/ljRm8W3iXq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Codota_\\\/status\\\/1336399318031462404\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":498,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":498,\"h\":268,\"resize\":\"fit\"},\"small\":{\"w\":498,\"h\":268,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[249,134],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EovYF5lWEAUd63k.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336368142235394050,\"quoted_status_id_str\":\"1336368142235394050\",\"retweet_count\":2,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1308353574527733760\\\/fj52QeQM_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1308353574527733760\\\/fj52QeQM_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1234053308\\\/1591124374\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3433198173,\"id_str\":\"3433198173\",\"name\":\"Sketchplanations\",\"screen_name\":\"sketchplanator\",\"location\":\"London, England\",\"description\":\"Learn something new. Weekly explanations in a sketch, by @jonohey.\",\"url\":\"https:\\\/\\\/t.co\\\/LOVYAQJFMJ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LOVYAQJFMJ\",\"expanded_url\":\"https:\\\/\\\/patreon.com\\\/sketchplanations\",\"display_url\":\"patreon.com\\\/sketchplanatio\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":9507,\"friends_count\":45,\"listed_count\":184,\"created_at\":\"Thu Aug 20 20:23:30 +0000 2015\",\"favourites_count\":746,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":499,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:19:02 +0000 2020\",\"id\":1336767333239578625,\"id_str\":\"1336767333239578625\",\"text\":\"Just in time for Christmas: Strategies honed over the years for winning at Boggle. https:\\\/\\\/t.co\\\/kvfEx09Vb5\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1336767331050123267,\"id_str\":\"1336767331050123267\",\"indices\":[83,106],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0mzhqW8AMvfs7.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0mzhqW8AMvfs7.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/kvfEx09Vb5\",\"display_url\":\"pic.twitter.com\\\/kvfEx09Vb5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/sketchplanator\\\/status\\\/1336767333239578625\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1781,\"h\":1511,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":1018,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":577,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336767331050123267,\"id_str\":\"1336767331050123267\",\"indices\":[83,106],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0mzhqW8AMvfs7.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0mzhqW8AMvfs7.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/kvfEx09Vb5\",\"display_url\":\"pic.twitter.com\\\/kvfEx09Vb5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/sketchplanator\\\/status\\\/1336767333239578625\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1781,\"h\":1511,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":1018,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":577,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/634461644014399489\\\/2dsa04J2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/634461644014399489\\\/2dsa04J2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3433198173\\\/1440103063\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":156605862,\"id_str\":\"156605862\",\"name\":\"Ari Bajo\",\"screen_name\":\"ari_bajo\",\"location\":\"Paris, France\",\"description\":\"Freelance Data Engineer & Technical Writer. I digest 50+ tech blogs by French companies at https:\\\/\\\/t.co\\\/iuWoW8V2fG\",\"url\":\"https:\\\/\\\/t.co\\\/41T9zWH7Er\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/41T9zWH7Er\",\"expanded_url\":\"https:\\\/\\\/guriosity.com\",\"display_url\":\"guriosity.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iuWoW8V2fG\",\"expanded_url\":\"http:\\\/\\\/guriosity.com\",\"display_url\":\"guriosity.com\",\"indices\":[91,114]}]}},\"protected\":false,\"followers_count\":328,\"friends_count\":1108,\"listed_count\":2,\"created_at\":\"Thu Jun 17 11:24:07 +0000 2010\",\"favourites_count\":840,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":221,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 20:16:42 +0000 2020\",\"id\":1335317193622491142,\"id_str\":\"1335317193622491142\",\"text\":\"RT @miqwit: Wrote about my CTO experience here: https:\\\/\\\/t.co\\\/4qSfGigqKw #software #dev #cto\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"software\",\"indices\":[72,81]},{\"text\":\"dev\",\"indices\":[82,86]},{\"text\":\"cto\",\"indices\":[87,91]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"miqwit\",\"name\":\"Micka\\u00ebl A\",\"id\":517397626,\"id_str\":\"517397626\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4qSfGigqKw\",\"expanded_url\":\"https:\\\/\\\/dev.to\\\/miqwit\\\/from-developer-to-cto-a-journey-5478\",\"display_url\":\"dev.to\\\/miqwit\\\/from-de\\u2026\",\"indices\":[48,71]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Dec 05 14:05:05 +0000 2020\",\"id\":1335223674010525696,\"id_str\":\"1335223674010525696\",\"text\":\"Wrote about my CTO experience here: https:\\\/\\\/t.co\\\/4qSfGigqKw #software #dev #cto\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"software\",\"indices\":[60,69]},{\"text\":\"dev\",\"indices\":[70,74]},{\"text\":\"cto\",\"indices\":[75,79]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4qSfGigqKw\",\"expanded_url\":\"https:\\\/\\\/dev.to\\\/miqwit\\\/from-developer-to-cto-a-journey-5478\",\"display_url\":\"dev.to\\\/miqwit\\\/from-de\\u2026\",\"indices\":[36,59]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":12,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161163418843385856\\\/ylPA0sgy_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161163418843385856\\\/ylPA0sgy_normal.jpg\",\"profile_link_color\":\"1F98C7\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"DAECF4\",\"profile_text_color\":\"54425E\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":923967789400051712,\"id_str\":\"923967789400051712\",\"name\":\"Kabylixx (\\u2d59\\u2d53\\u2d3c\\u2d39\\u2d30\\u2d4f\\u2d3b)\",\"screen_name\":\"kabylixx\",\"location\":\"Paris, France\",\"description\":\"D\\u00e9veloppeur PHP\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":30,\"friends_count\":257,\"listed_count\":1,\"created_at\":\"Fri Oct 27 17:41:02 +0000 2017\",\"favourites_count\":410,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":183,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 05 16:40:20 +0000 2020\",\"id\":1324391107086684160,\"id_str\":\"1324391107086684160\",\"text\":\"@sami_jnih Ah bah \\u00e7a promet ... https:\\\/\\\/t.co\\\/0oz5eljzak\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sami_jnih\",\"name\":\"Sami Jnih\",\"id\":916608783966760961,\"id_str\":\"916608783966760961\",\"indices\":[0,10]}],\"urls\":[],\"media\":[{\"id\":1324391094990348290,\"id_str\":\"1324391094990348290\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/0oz5eljzak\",\"display_url\":\"pic.twitter.com\\\/0oz5eljzak\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kabylixx\\\/status\\\/1324391107086684160\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"medium\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"large\":{\"w\":480,\"h\":270,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1324391094990348290,\"id_str\":\"1324391094990348290\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/0oz5eljzak\",\"display_url\":\"pic.twitter.com\\\/0oz5eljzak\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kabylixx\\\/status\\\/1324391107086684160\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"medium\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"large\":{\"w\":480,\"h\":270,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[16,9],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmEurxiXIAIXV3g.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1324358982153211905,\"in_reply_to_status_id_str\":\"1324358982153211905\",\"in_reply_to_user_id\":916608783966760961,\"in_reply_to_user_id_str\":\"916608783966760961\",\"in_reply_to_screen_name\":\"sami_jnih\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242560725438119938\\\/zy_sP3Wt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242560725438119938\\\/zy_sP3Wt_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":316435980,\"id_str\":\"316435980\",\"name\":\"Devrimci\",\"screen_name\":\"Mikael_Orkhan\",\"location\":\"Baku, Azerbaijan\",\"description\":\"revolutioner\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":114,\"friends_count\":337,\"listed_count\":0,\"created_at\":\"Mon Jun 13 13:04:03 +0000 2011\",\"favourites_count\":3937,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2678,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 14:43:07 +0000 2020\",\"id\":1336320407083732993,\"id_str\":\"1336320407083732993\",\"text\":\"RT @Muhammed_018: \\u041d\\u0435\\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u043f\\u043e\\u0432\\u043e\\u0440\\u043e\\u0442. Syrians for Truth and Justice \\u0443\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0430\\u044e\\u0442, \\u0447\\u0442\\u043e \\u0441\\u043e\\u0442\\u043d\\u0438 \\u0441\\u0438\\u0440\\u0438\\u0439\\u0446\\u0435\\u0432 \\u0431\\u044b\\u043b\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u044b \\u0432 \\u041a\\u0430\\u0440\\u0430\\u0431\\u0430\\u0445 \\u0432\\u043e\\u0435\\u0432\\u0430\\u0442\\u044c \\u043d\\u0430 \\u0441\\u0442\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Muhammed_018\",\"name\":\"\\u041c\\u0443\\u0445\\u0430\\u043c\\u0435\\u0434 \\u0410\\u043b\\u0438\\u0435\\u0432\",\"id\":1313012858452684803,\"id_str\":\"1313012858452684803\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 14:25:23 +0000 2020\",\"id\":1336315945120374789,\"id_str\":\"1336315945120374789\",\"text\":\"\\u041d\\u0435\\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u043f\\u043e\\u0432\\u043e\\u0440\\u043e\\u0442. Syrians for Truth and Justice \\u0443\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0430\\u044e\\u0442, \\u0447\\u0442\\u043e \\u0441\\u043e\\u0442\\u043d\\u0438 \\u0441\\u0438\\u0440\\u0438\\u0439\\u0446\\u0435\\u0432 \\u0431\\u044b\\u043b\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u044b \\u0432 \\u041a\\u0430\\u0440\\u0430\\u0431\\u0430\\u0445 \\u0432\\u043e\\u0435\\u0432\\u0430\\u0442\\u044c\\u2026 https:\\\/\\\/t.co\\\/S9YRCoKzkP\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/S9YRCoKzkP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336315945120374789\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":42,\"favorite_count\":236,\"favorited\":false,\"retweeted\":false,\"lang\":\"ru\"},\"is_quote_status\":false,\"retweet_count\":42,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"ru\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"0C0300\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320810753507659781\\\/83JoMc2N_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320810753507659781\\\/83JoMc2N_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/316435980\\\/1603299266\",\"profile_link_color\":\"105DA1\",\"profile_sidebar_border_color\":\"321EB9\",\"profile_sidebar_fill_color\":\"86E0F8\",\"profile_text_color\":\"9480D4\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":45891623,\"id_str\":\"45891623\",\"name\":\"Safiya Umoja Noble PhD\",\"screen_name\":\"safiyanoble\",\"location\":\"Los Angeles, California\",\"description\":\"New book, Algorithms of Oppression https:\\\/\\\/t.co\\\/jjr2LhV78o also avail on Audible & Kindle. Researcher, professor @UCLA, expert on racism, sexism, & tech.\",\"url\":\"https:\\\/\\\/t.co\\\/tP3WVRq4Ir\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tP3WVRq4Ir\",\"expanded_url\":\"http:\\\/\\\/safiyaunoble.com\",\"display_url\":\"safiyaunoble.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jjr2LhV78o\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/AlgorithmsOpp\",\"display_url\":\"bit.ly\\\/AlgorithmsOpp\",\"indices\":[35,58]}]}},\"protected\":false,\"followers_count\":54235,\"friends_count\":14485,\"listed_count\":1077,\"created_at\":\"Tue Jun 09 17:39:06 +0000 2009\",\"favourites_count\":34533,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":18027,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:33:50 +0000 2020\",\"id\":1336771055193522176,\"id_str\":\"1336771055193522176\",\"text\":\"RT @tech_intersect: Sign up for a free virtual screening of Coded Bias, a documentary on bias in AI, featuring @timnitGebru @jovialjoy @saf\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"tech_intersect\",\"name\":\"Tech Intersections\",\"id\":909134041059803137,\"id_str\":\"909134041059803137\",\"indices\":[3,18]},{\"screen_name\":\"timnitGebru\",\"name\":\"Timnit Gebru\",\"id\":359831209,\"id_str\":\"359831209\",\"indices\":[111,123]},{\"screen_name\":\"jovialjoy\",\"name\":\"Joy Buolamwini\",\"id\":19700387,\"id_str\":\"19700387\",\"indices\":[124,134]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:14:46 +0000 2020\",\"id\":1336766257937301504,\"id_str\":\"1336766257937301504\",\"text\":\"Sign up for a free virtual screening of Coded Bias, a documentary on bias in AI, featuring @timnitGebru @jovialjoy\\u2026 https:\\\/\\\/t.co\\\/VKhsVoy8aM\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"timnitGebru\",\"name\":\"Timnit Gebru\",\"id\":359831209,\"id_str\":\"359831209\",\"indices\":[91,103]},{\"screen_name\":\"jovialjoy\",\"name\":\"Joy Buolamwini\",\"id\":19700387,\"id_str\":\"19700387\",\"indices\":[104,114]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VKhsVoy8aM\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336766257937301504\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":14,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139938575401672705\\\/FWYb2BIq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139938575401672705\\\/FWYb2BIq_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/45891623\\\/1518501525\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"BDDCAD\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1150929123470000128,\"id_str\":\"1150929123470000128\",\"name\":\"RedwoodJS\",\"screen_name\":\"redwoodjs\",\"location\":\"\",\"description\":\"Bringing full-stack to the JAMstack.\",\"url\":\"https:\\\/\\\/t.co\\\/Lw9RY8Ct29\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Lw9RY8Ct29\",\"expanded_url\":\"https:\\\/\\\/redwoodjs.com\",\"display_url\":\"redwoodjs.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3502,\"friends_count\":5,\"listed_count\":56,\"created_at\":\"Tue Jul 16 00:44:21 +0000 2019\",\"favourites_count\":546,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":519,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:18:30 +0000 2020\",\"id\":1336752097606344704,\"id_str\":\"1336752097606344704\",\"text\":\"RT @mojombo: One of @RedwoodJS\\u2019s superpowers is doing the integration work for you, so you can spend more time on what makes your project s\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mojombo\",\"name\":\"Tom Preston-Werner\",\"id\":5502392,\"id_str\":\"5502392\",\"indices\":[3,11]},{\"screen_name\":\"redwoodjs\",\"name\":\"RedwoodJS\",\"id\":1150929123470000128,\"id_str\":\"1150929123470000128\",\"indices\":[20,30]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 15:52:52 +0000 2020\",\"id\":1336700349646663680,\"id_str\":\"1336700349646663680\",\"text\":\"One of @RedwoodJS\\u2019s superpowers is doing the integration work for you, so you can spend more time on what makes you\\u2026 https:\\\/\\\/t.co\\\/lTLtHZ5ZZq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"redwoodjs\",\"name\":\"RedwoodJS\",\"id\":1150929123470000128,\"id_str\":\"1150929123470000128\",\"indices\":[7,17]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lTLtHZ5ZZq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336700349646663680\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336656314613833730,\"quoted_status_id_str\":\"1336656314613833730\",\"retweet_count\":0,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":true,\"quoted_status_id\":1336656314613833730,\"quoted_status_id_str\":\"1336656314613833730\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229640169105444864\\\/U9CPfGcG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229640169105444864\\\/U9CPfGcG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1150929123470000128\\\/1582010538\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":49404693,\"id_str\":\"49404693\",\"name\":\"Samuel ROZE\",\"screen_name\":\"samuelroze\",\"location\":\"London, UK\",\"description\":\"#BlackLivesMatter VP of Engineering at @BirdieCare. @Symfony & @ApiPlatform core team. https:\\\/\\\/t.co\\\/Sq547NEKIm, https:\\\/\\\/t.co\\\/f6g1zeOjP5, @ContinuousPipe & other things\",\"url\":\"https:\\\/\\\/t.co\\\/OUZhAZYcxX\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OUZhAZYcxX\",\"expanded_url\":\"https:\\\/\\\/sroze.io\",\"display_url\":\"sroze.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Sq547NEKIm\",\"expanded_url\":\"http:\\\/\\\/getavocado.com\",\"display_url\":\"getavocado.com\",\"indices\":[87,110]},{\"url\":\"https:\\\/\\\/t.co\\\/f6g1zeOjP5\",\"expanded_url\":\"http:\\\/\\\/letsexperiment.today\",\"display_url\":\"letsexperiment.today\",\"indices\":[112,135]}]}},\"protected\":false,\"followers_count\":1645,\"friends_count\":585,\"listed_count\":106,\"created_at\":\"Sun Jun 21 19:37:23 +0000 2009\",\"favourites_count\":5869,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3284,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 15:02:05 +0000 2020\",\"id\":1335962794588577793,\"id_str\":\"1335962794588577793\",\"text\":\"RT @RubenVerborgh: Personal data vaults with Solid will change the data-driven economy: we will move from a finite and harmful data race to\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"RubenVerborgh\",\"name\":\"Ruben Verborgh\",\"id\":180298000,\"id_str\":\"180298000\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 14:40:14 +0000 2020\",\"id\":1335957292362190848,\"id_str\":\"1335957292362190848\",\"text\":\"Personal data vaults with Solid will change the data-driven economy: we will move from a finite and harmful data ra\\u2026 https:\\\/\\\/t.co\\\/D3Ic3Q5Xuj\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/D3Ic3Q5Xuj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335957292362190848\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":22,\"favorite_count\":54,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":22,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/692309108142112769\\\/Ycc-eo8o_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/692309108142112769\\\/Ycc-eo8o_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/49404693\\\/1406812856\",\"profile_link_color\":\"7D9EFA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":46982053,\"id_str\":\"46982053\",\"name\":\"Dale Wijnand\",\"screen_name\":\"dwijnand\",\"location\":\"London\",\"description\":\"@scala_lang team at @lightbend. Interested in FP, tooling & API\\\/library design. Ex @scala_sbt maintainer.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2381,\"friends_count\":143,\"listed_count\":77,\"created_at\":\"Sat Jun 13 22:58:48 +0000 2009\",\"favourites_count\":7320,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9835,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 12:24:43 +0000 2020\",\"id\":1336285579399532544,\"id_str\":\"1336285579399532544\",\"text\":\"@djspiewak @kubukoz Dealiased too eagerly so it doesn't know to look in the alias-enclosing A object?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"djspiewak\",\"name\":\"Daniel Spiewak\",\"id\":6586332,\"id_str\":\"6586332\",\"indices\":[0,10]},{\"screen_name\":\"kubukoz\",\"name\":\"diverging impostor expansion\",\"id\":198579020,\"id_str\":\"198579020\",\"indices\":[11,19]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336173537736835072,\"in_reply_to_status_id_str\":\"1336173537736835072\",\"in_reply_to_user_id\":6586332,\"in_reply_to_user_id_str\":\"6586332\",\"in_reply_to_screen_name\":\"djspiewak\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110094953336766467\\\/mOoKpTTc_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110094953336766467\\\/mOoKpTTc_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/46982053\\\/1405174615\",\"profile_link_color\":\"FA743E\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":455142411,\"id_str\":\"455142411\",\"name\":\"\\u00d3lafur P\\u00e1ll Geirsson\",\"screen_name\":\"olafurpg\",\"location\":\"Oslo, Norway\",\"description\":\"Software engineer. Appreciates Scala, the JVM, build systems, IDEs and thoughtful communication. Author of Scalafmt, Scalafix and Metals.\",\"url\":\"https:\\\/\\\/t.co\\\/DBpBAR3rYu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DBpBAR3rYu\",\"expanded_url\":\"http:\\\/\\\/geirsson.com\",\"display_url\":\"geirsson.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2882,\"friends_count\":327,\"listed_count\":66,\"created_at\":\"Wed Jan 04 19:45:38 +0000 2012\",\"favourites_count\":4871,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1520,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 06:58:03 +0000 2020\",\"id\":1336565759028432897,\"id_str\":\"1336565759028432897\",\"text\":\"RT @gabro27: Really excited about GitHub discussions becoming publicly available! We\\u2019re testing them in Metals to see whether they can be a\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"gabro27\",\"name\":\"Gabriele Petronella\",\"id\":15229928,\"id_str\":\"15229928\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 21:34:01 +0000 2020\",\"id\":1336423814100623362,\"id_str\":\"1336423814100623362\",\"text\":\"Really excited about GitHub discussions becoming publicly available! We\\u2019re testing them in Metals to see whether th\\u2026 https:\\\/\\\/t.co\\\/jMv850S1jQ\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jMv850S1jQ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336423814100623362\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":19,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1327631127184601088\\\/scpDsdKi_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1327631127184601088\\\/scpDsdKi_normal.jpg\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":931508449,\"id_str\":\"931508449\",\"name\":\"Monoid Mary\",\"screen_name\":\"argumatronic\",\"location\":\"The Last Best Place\",\"description\":\"teacher, mother, programmer, \\\"real\\\" numbers truther, co-founder and writer @typeclasses & @joyofhaskell, member-owner Ronan Co-op Brewery\",\"url\":\"https:\\\/\\\/t.co\\\/V4lSVTGder\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V4lSVTGder\",\"expanded_url\":\"http:\\\/\\\/argumatronic.com\\\/\",\"display_url\":\"argumatronic.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":8087,\"friends_count\":1587,\"listed_count\":290,\"created_at\":\"Wed Nov 07 07:46:15 +0000 2012\",\"favourites_count\":145146,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":103847,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 02:47:41 +0000 2020\",\"id\":1335415588747808768,\"id_str\":\"1335415588747808768\",\"text\":\"@tpflug oh no :( \\n\\ni hope it's nothing serious and you feel better soon\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"tpflug\",\"name\":\"Tobi\",\"id\":57613118,\"id_str\":\"57613118\",\"indices\":[0,7]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335413673771356168,\"in_reply_to_status_id_str\":\"1335413673771356168\",\"in_reply_to_user_id\":57613118,\"in_reply_to_user_id_str\":\"57613118\",\"in_reply_to_screen_name\":\"tpflug\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1246186402875727872\\\/waAR8eIv_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1246186402875727872\\\/waAR8eIv_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/931508449\\\/1535329878\",\"profile_link_color\":\"4D004D\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":49313109,\"id_str\":\"49313109\",\"name\":\"Yaron (Ron) Minsky\",\"screen_name\":\"yminsky\",\"location\":\"\",\"description\":\"Occasional OCaml programmer. Host of @signalsthreads.\",\"url\":\"http:\\\/\\\/t.co\\\/naT1yKP3v4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/naT1yKP3v4\",\"expanded_url\":\"http:\\\/\\\/ocaml.janestreet.com\",\"display_url\":\"ocaml.janestreet.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7316,\"friends_count\":187,\"listed_count\":202,\"created_at\":\"Sun Jun 21 13:23:33 +0000 2009\",\"favourites_count\":1388,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6003,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 02:34:21 +0000 2020\",\"id\":1335774620390019072,\"id_str\":\"1335774620390019072\",\"text\":\"This is super-cool. https:\\\/\\\/t.co\\\/RPmp65re8r\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/RPmp65re8r\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ShriramKMurthi\\\/status\\\/1335768849162113024\",\"display_url\":\"twitter.com\\\/ShriramKMurthi\\u2026\",\"indices\":[20,43]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1335768849162113024,\"quoted_status_id_str\":\"1335768849162113024\",\"retweet_count\":1,\"favorite_count\":35,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ACDED6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1005815547475488769\\\/qprnh4KJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1005815547475488769\\\/qprnh4KJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/49313109\\\/1387255249\",\"profile_link_color\":\"038543\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":30408178,\"id_str\":\"30408178\",\"name\":\"Bent Rasmussen\",\"screen_name\":\"xosfaere\",\"location\":\"Denmark\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/iceLcYNFqZ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iceLcYNFqZ\",\"expanded_url\":\"http:\\\/\\\/exoteric.vision\",\"display_url\":\"exoteric.vision\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":111,\"friends_count\":306,\"listed_count\":0,\"created_at\":\"Sat Apr 11 05:47:29 +0000 2009\",\"favourites_count\":8151,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1126,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 09:11:37 +0000 2020\",\"id\":1336599370037424128,\"id_str\":\"1336599370037424128\",\"text\":\"@klaitner Hi Kurt - long time... :-)\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"klaitner\",\"name\":\"Kurt Laitner\",\"id\":107633083,\"id_str\":\"107633083\",\"indices\":[0,9]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336491056796291073,\"in_reply_to_status_id_str\":\"1336491056796291073\",\"in_reply_to_user_id\":107633083,\"in_reply_to_user_id_str\":\"107633083\",\"in_reply_to_screen_name\":\"klaitner\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"BADFCD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/133026892\\\/2258878612_eb864753b2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/133026892\\\/2258878612_eb864753b2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/30408178\\\/1419885580\",\"profile_link_color\":\"FF0000\",\"profile_sidebar_border_color\":\"F2E195\",\"profile_sidebar_fill_color\":\"FFF7CC\",\"profile_text_color\":\"0C3E53\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":414333187,\"id_str\":\"414333187\",\"name\":\"Thorsten Ball\",\"screen_name\":\"thorstenball\",\"location\":\"Aschaffenburg, Bavaria, Germany\",\"description\":\"Author of https:\\\/\\\/t.co\\\/Lxmn7VbdRE and https:\\\/\\\/t.co\\\/SU7N5Ad5Mm.\\nWorking at @srcgraph.\\n\\nI like to program where the rubber hits the road \\u2014 wherever that may be.\\n\\nMinimalist.\",\"url\":\"https:\\\/\\\/t.co\\\/Mppcwv44uS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Mppcwv44uS\",\"expanded_url\":\"http:\\\/\\\/thorstenball.com\",\"display_url\":\"thorstenball.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Lxmn7VbdRE\",\"expanded_url\":\"http:\\\/\\\/interpreterbook.com\",\"display_url\":\"interpreterbook.com\",\"indices\":[10,33]},{\"url\":\"https:\\\/\\\/t.co\\\/SU7N5Ad5Mm\",\"expanded_url\":\"http:\\\/\\\/compilerbook.com\",\"display_url\":\"compilerbook.com\",\"indices\":[38,61]}]}},\"protected\":false,\"followers_count\":3785,\"friends_count\":528,\"listed_count\":81,\"created_at\":\"Wed Nov 16 22:51:44 +0000 2011\",\"favourites_count\":4604,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9297,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 12:46:16 +0000 2020\",\"id\":1336653390470914050,\"id_str\":\"1336653390470914050\",\"text\":\"@aaronhnatiw @sivers It removed some knots I had in my head and it\\u2019s just great, dense, stripped-down writing. I smiled while reading it.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"aaronhnatiw\",\"name\":\"Aaron Hnatiw\",\"id\":829159886,\"id_str\":\"829159886\",\"indices\":[0,12]},{\"screen_name\":\"sivers\",\"name\":\"Derek Sivers\",\"id\":2206131,\"id_str\":\"2206131\",\"indices\":[13,20]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336639337803476994,\"in_reply_to_status_id_str\":\"1336639337803476994\",\"in_reply_to_user_id\":829159886,\"in_reply_to_user_id_str\":\"829159886\",\"in_reply_to_screen_name\":\"aaronhnatiw\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/845340663050899457\\\/vNzxTmKV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/845340663050899457\\\/vNzxTmKV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/414333187\\\/1559815537\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2188135531,\"id_str\":\"2188135531\",\"name\":\"Brahim Boukallit\",\"screen_name\":\"brahimboukallit\",\"location\":\"Paris, Ile-de-France\",\"description\":\"Data Engineer @Univalence \\u2014 @ParisDataEng\",\"url\":\"https:\\\/\\\/t.co\\\/2GfoqcVeu6\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2GfoqcVeu6\",\"expanded_url\":\"http:\\\/\\\/www.univalence.io\",\"display_url\":\"univalence.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":80,\"friends_count\":59,\"listed_count\":21,\"created_at\":\"Mon Nov 11 10:39:52 +0000 2013\",\"favourites_count\":106,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":76,\"lang\":null,\"status\":{\"created_at\":\"Tue Feb 11 09:03:28 +0000 2020\",\"id\":1227156186266554369,\"id_str\":\"1227156186266554369\",\"text\":\"RT @Univalence: Le type IO sauvera le monde #scala #io #zio https:\\\/\\\/t.co\\\/4eKHZGRDSI\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"scala\",\"indices\":[44,50]},{\"text\":\"io\",\"indices\":[51,54]},{\"text\":\"zio\",\"indices\":[55,59]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Univalence\",\"name\":\"Univalence\",\"id\":3305589777,\"id_str\":\"3305589777\",\"indices\":[3,14]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4eKHZGRDSI\",\"expanded_url\":\"https:\\\/\\\/blog.univalence.io\\\/le-feu-la-roue-io\\\/\",\"display_url\":\"blog.univalence.io\\\/le-feu-la-roue\\u2026\",\"indices\":[60,83]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Feb 11 07:10:05 +0000 2020\",\"id\":1227127649769869313,\"id_str\":\"1227127649769869313\",\"text\":\"Le type IO sauvera le monde #scala #io #zio https:\\\/\\\/t.co\\\/4eKHZGRDSI\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"scala\",\"indices\":[28,34]},{\"text\":\"io\",\"indices\":[35,38]},{\"text\":\"zio\",\"indices\":[39,43]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4eKHZGRDSI\",\"expanded_url\":\"https:\\\/\\\/blog.univalence.io\\\/le-feu-la-roue-io\\\/\",\"display_url\":\"blog.univalence.io\\\/le-feu-la-roue\\u2026\",\"indices\":[44,67]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite Inc.<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/419444475987894273\\\/k-iTScB0_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/419444475987894273\\\/k-iTScB0_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2188135531\\\/1422189990\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":75996107,\"id_str\":\"75996107\",\"name\":\"Adam Silver\",\"screen_name\":\"adambsilver\",\"location\":\"London\",\"description\":\"One half of https:\\\/\\\/t.co\\\/qaHNOTM7UD. Author of Form Design Patterns and interaction designer focused on nailing the basics and making things work for everyone.\",\"url\":\"https:\\\/\\\/t.co\\\/Xl7KCLVpxJ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Xl7KCLVpxJ\",\"expanded_url\":\"http:\\\/\\\/adamsilver.io\",\"display_url\":\"adamsilver.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qaHNOTM7UD\",\"expanded_url\":\"http:\\\/\\\/wearefrankly.co\",\"display_url\":\"wearefrankly.co\",\"indices\":[12,35]}]}},\"protected\":false,\"followers_count\":4741,\"friends_count\":49,\"listed_count\":330,\"created_at\":\"Mon Sep 21 09:55:46 +0000 2009\",\"favourites_count\":22366,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":13934,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 09:05:39 +0000 2020\",\"id\":1336597870649233409,\"id_str\":\"1336597870649233409\",\"text\":\"Form design in 3 questions:\\n\\n1. Do we need (to ask for) this information? \\n\\n2. When is the right time to ask for th\\u2026 https:\\\/\\\/t.co\\\/3KzAFdGO75\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3KzAFdGO75\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336597870649233409\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":28,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1289127142157164544\\\/spcO_DdG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1289127142157164544\\\/spcO_DdG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/75996107\\\/1585302907\",\"profile_link_color\":\"0267BF\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":35432643,\"id_str\":\"35432643\",\"name\":\"Addy Osmani\",\"screen_name\":\"addyosmani\",\"location\":\"Mountain View, CA\",\"description\":\"Engineering Manager working on @GoogleChrome \\u2022 Husband & Dad \\u2022 Make the web fast \\u26a1\\u2022 Lighthouse, PageSpeed Insights, CrUX, DevTools, Core Web Vitals\",\"url\":\"https:\\\/\\\/t.co\\\/BChNfDuYCy\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/BChNfDuYCy\",\"expanded_url\":\"https:\\\/\\\/www.teejungle.net\",\"display_url\":\"teejungle.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":251545,\"friends_count\":1796,\"listed_count\":7254,\"created_at\":\"Sun Apr 26 08:40:11 +0000 2009\",\"favourites_count\":26110,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":23772,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:47:21 +0000 2020\",\"id\":1336759359934660608,\"id_str\":\"1336759359934660608\",\"text\":\"@AlexanderTrefz @paul_irish Not a joke... :) Real-world performance optimization involves reasoning about trade-off\\u2026 https:\\\/\\\/t.co\\\/tafZynp3su\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AlexanderTrefz\",\"name\":\"Alexander Trefz\",\"id\":42991451,\"id_str\":\"42991451\",\"indices\":[0,15]},{\"screen_name\":\"paul_irish\",\"name\":\"Paul Irish\",\"id\":1671811,\"id_str\":\"1671811\",\"indices\":[16,27]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tafZynp3su\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336759359934660608\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336627031333855232,\"in_reply_to_status_id_str\":\"1336627031333855232\",\"in_reply_to_user_id\":42991451,\"in_reply_to_user_id_str\":\"42991451\",\"in_reply_to_screen_name\":\"AlexanderTrefz\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme8\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme8\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1314736521266655232\\\/C1z6UclE_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1314736521266655232\\\/C1z6UclE_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/35432643\\\/1539971599\",\"profile_link_color\":\"3C9596\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"56E372\",\"profile_text_color\":\"0A0A0A\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":23556190,\"id_str\":\"23556190\",\"name\":\"Sandro Hawke\",\"screen_name\":\"sandhawke\",\"location\":\"Waltham, MA\",\"description\":\"W3C team at MIT.  Interested in how we assess credibility and trust, in decentralization, in web software, in consensus process, and in humanity. he\\\/them.\",\"url\":\"https:\\\/\\\/t.co\\\/Lc22dSQaNm\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Lc22dSQaNm\",\"expanded_url\":\"http:\\\/\\\/www.w3.org\\\/People\\\/Sandro\\\/\",\"display_url\":\"w3.org\\\/People\\\/Sandro\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2916,\"friends_count\":2737,\"listed_count\":207,\"created_at\":\"Tue Mar 10 04:23:36 +0000 2009\",\"favourites_count\":69522,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":8352,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:51:27 +0000 2020\",\"id\":1336775490301005825,\"id_str\":\"1336775490301005825\",\"text\":\"So damn cool https:\\\/\\\/t.co\\\/PYBSxtRKOR\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PYBSxtRKOR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/vurnt22\\\/status\\\/1336523184678563840\",\"display_url\":\"twitter.com\\\/vurnt22\\\/status\\u2026\",\"indices\":[13,36]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336523184678563840,\"quoted_status_id_str\":\"1336523184678563840\",\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/720660030492684288\\\/83KVJh6O_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/720660030492684288\\\/83KVJh6O_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/23556190\\\/1549211804\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2868390210,\"id_str\":\"2868390210\",\"name\":\"Rahul D\\u00e9 \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08 \\ud83c\\udf31 \\u262d \\ud83d\\udc7b\",\"screen_name\":\"lispyclouds\",\"location\":\"Berlin, Germany\",\"description\":\"Diversity, Sustainable living, Clojure, Privacy. they\\\/he\\\/yes. Consulting @thoughtworks\",\"url\":\"https:\\\/\\\/t.co\\\/xDileYA38c\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xDileYA38c\",\"expanded_url\":\"https:\\\/\\\/lispyclouds.de\",\"display_url\":\"lispyclouds.de\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":222,\"friends_count\":789,\"listed_count\":4,\"created_at\":\"Tue Oct 21 02:54:01 +0000 2014\",\"favourites_count\":291,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":516,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 30 08:05:05 +0000 2020\",\"id\":1333321137556770816,\"id_str\":\"1333321137556770816\",\"text\":\"Here is recording! Sorry for the delay: https:\\\/\\\/t.co\\\/gFfTbICq2D\\n#clojure @juxtpro https:\\\/\\\/t.co\\\/CR6EfgYfAZ\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"clojure\",\"indices\":[64,72]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"juxtpro\",\"name\":\"JUXT\",\"id\":1329862903,\"id_str\":\"1329862903\",\"indices\":[73,81]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gFfTbICq2D\",\"expanded_url\":\"http:\\\/\\\/t.ly\\\/a1zS\",\"display_url\":\"t.ly\\\/a1zS\",\"indices\":[40,63]},{\"url\":\"https:\\\/\\\/t.co\\\/CR6EfgYfAZ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/lispyclouds\\\/status\\\/1324066116923203588\",\"display_url\":\"twitter.com\\\/lispyclouds\\\/st\\u2026\",\"indices\":[82,105]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1324066116923203588,\"quoted_status_id_str\":\"1324066116923203588\",\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1304289185877106690\\\/B0jiq4jC_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1304289185877106690\\\/B0jiq4jC_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2868390210\\\/1606723930\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":84528026,\"id_str\":\"84528026\",\"name\":\"jose de araujo\",\"screen_name\":\"dearaujoj\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":135,\"friends_count\":755,\"listed_count\":62,\"created_at\":\"Fri Oct 23 07:08:28 +0000 2009\",\"favourites_count\":2616,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2516,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 00:11:16 +0000 2020\",\"id\":1333926673981509634,\"id_str\":\"1333926673981509634\",\"text\":\"RT @devdevcharlie: IT'S HERE!\\n\\nThis french queer woman in tech wrote a 300+ pages book about ML for FE devs, in her 2nd language!\\ud83c\\udf89\\n\\nMy no.1\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"devdevcharlie\",\"name\":\"Charlie Gerard \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08\",\"id\":99135401,\"id_str\":\"99135401\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 01 20:12:09 +0000 2020\",\"id\":1333866498402693124,\"id_str\":\"1333866498402693124\",\"text\":\"IT'S HERE!\\n\\nThis french queer woman in tech wrote a 300+ pages book about ML for FE devs, in her 2nd language!\\ud83c\\udf89\\n\\nMy\\u2026 https:\\\/\\\/t.co\\\/sk1wg4qVof\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/sk1wg4qVof\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333866498402693124\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":374,\"favorite_count\":4958,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":374,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/939420534647021568\\\/s0Li-1Nm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/939420534647021568\\\/s0Li-1Nm_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/84528026\\\/1409654968\",\"profile_link_color\":\"153BAD\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":19884434,\"id_str\":\"19884434\",\"name\":\"Pierre Arlais\",\"screen_name\":\"PierreArlais\",\"location\":\"Paris\",\"description\":\"#FOSS #opensource #SCOP, directeur @Bearstech, organisateur de choses qui se d\\u00e9roulent plus ou moins bien comme pr\\u00e9vu selon les cas\",\"url\":\"http:\\\/\\\/t.co\\\/oH112qeJFk\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/oH112qeJFk\",\"expanded_url\":\"http:\\\/\\\/bearstech.com\",\"display_url\":\"bearstech.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1041,\"friends_count\":903,\"listed_count\":25,\"created_at\":\"Mon Feb 02 00:04:52 +0000 2009\",\"favourites_count\":1182,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1989,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 20:57:45 +0000 2020\",\"id\":1336052300075372546,\"id_str\":\"1336052300075372546\",\"text\":\"Every episode of The Mandalorian https:\\\/\\\/t.co\\\/9hMAXbnoNk\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9hMAXbnoNk\",\"expanded_url\":\"https:\\\/\\\/youtu.be\\\/Y7EB4ZYWKYI\",\"display_url\":\"youtu.be\\\/Y7EB4ZYWKYI\",\"indices\":[33,56]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1266575001\\\/eightbit-04d0a435-e3b3-44d2-96d9-1c5d414a3411_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1266575001\\\/eightbit-04d0a435-e3b3-44d2-96d9-1c5d414a3411_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/19884434\\\/1424387187\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2563957176,\"id_str\":\"2563957176\",\"name\":\"Jarek Ratajski\",\"screen_name\":\"jarek000000\",\"location\":\"Orion-Cygnus Arm\",\"description\":\"I am anarchitect\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1915,\"friends_count\":453,\"listed_count\":41,\"created_at\":\"Thu Jun 12 19:46:15 +0000 2014\",\"favourites_count\":1342,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1826,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:25:47 +0000 2020\",\"id\":1336753932027228160,\"id_str\":\"1336753932027228160\",\"text\":\"@mstk It compiles.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mstk\",\"name\":\"Justin Le\",\"id\":907281,\"id_str\":\"907281\",\"indices\":[0,5]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336740019675963392,\"in_reply_to_status_id_str\":\"1336740019675963392\",\"in_reply_to_user_id\":907281,\"in_reply_to_user_id_str\":\"907281\",\"in_reply_to_screen_name\":\"mstk\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/897340310287732736\\\/XJ4HusxD_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/897340310287732736\\\/XJ4HusxD_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2563957176\\\/1402602846\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":24856265,\"id_str\":\"24856265\",\"name\":\"Micha\\u0142 P\\u0142achta\",\"screen_name\":\"miciek\",\"location\":\"Krak\\u00f3w, Poland\",\"description\":\"Husband \\u2022 Father \\u2022 Teammate \\u2022 Software Engineer \\u2022 Speaker \\u2022 Trainer \\u2022 \\u03bb \\n\\n\\ud83d\\udcd9 Author of \\\"Grokking FP\\\": https:\\\/\\\/t.co\\\/BQWBcCDtZZ\",\"url\":\"https:\\\/\\\/t.co\\\/GIOCQ8Rb6I\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GIOCQ8Rb6I\",\"expanded_url\":\"https:\\\/\\\/michalplachta.com\",\"display_url\":\"michalplachta.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/BQWBcCDtZZ\",\"expanded_url\":\"http:\\\/\\\/www.manning.com\\\/books\\\/grokking-functional-programming\",\"display_url\":\"manning.com\\\/books\\\/grokking\\u2026\",\"indices\":[101,124]}]}},\"protected\":false,\"followers_count\":689,\"friends_count\":400,\"listed_count\":23,\"created_at\":\"Tue Mar 17 08:19:24 +0000 2009\",\"favourites_count\":950,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":800,\"lang\":null,\"status\":{\"created_at\":\"Tue Sep 01 06:51:41 +0000 2020\",\"id\":1300687758772572160,\"id_str\":\"1300687758772572160\",\"text\":\"RT @MateuszKubuszok: It finally happened! The first version of my e-book about Scala and JVM just got published!\\n\\nhttps:\\\/\\\/t.co\\\/jzt6BqGaMw\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"MateuszKubuszok\",\"name\":\"Mateusz Kubuszok\",\"id\":4567722263,\"id_str\":\"4567722263\",\"indices\":[3,19]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jzt6BqGaMw\",\"expanded_url\":\"https:\\\/\\\/leanpub.com\\\/jvm-scala-book\",\"display_url\":\"leanpub.com\\\/jvm-scala-book\",\"indices\":[114,137]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Aug 31 22:12:59 +0000 2020\",\"id\":1300557220665610241,\"id_str\":\"1300557220665610241\",\"text\":\"It finally happened! The first version of my e-book about Scala and JVM just got published!\\n\\nhttps:\\\/\\\/t.co\\\/jzt6BqGaMw\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jzt6BqGaMw\",\"expanded_url\":\"https:\\\/\\\/leanpub.com\\\/jvm-scala-book\",\"display_url\":\"leanpub.com\\\/jvm-scala-book\",\"indices\":[93,116]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":81,\"favorite_count\":282,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":81,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/605096449026748416\\\/olxezYYH_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/605096449026748416\\\/olxezYYH_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/24856265\\\/1572724736\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"BDDCAD\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":348879001,\"id_str\":\"348879001\",\"name\":\"James Fairbanks\",\"screen_name\":\"fairbanksjp\",\"location\":\"\",\"description\":\"CSE researcher, husband, dog dad\",\"url\":\"https:\\\/\\\/t.co\\\/8z6KWgspW8\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8z6KWgspW8\",\"expanded_url\":\"http:\\\/\\\/jpfairbanks.com\",\"display_url\":\"jpfairbanks.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":350,\"friends_count\":205,\"listed_count\":11,\"created_at\":\"Fri Aug 05 04:32:12 +0000 2011\",\"favourites_count\":910,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1463,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:34:18 +0000 2020\",\"id\":1336725875912544260,\"id_str\":\"1336725875912544260\",\"text\":\"@JuliaComputing @BogumilKaminski Wait, are epidemics also homeomorphic to coffee mugs?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"JuliaComputing\",\"name\":\"Julia Computing\",\"id\":3989248213,\"id_str\":\"3989248213\",\"indices\":[0,15]},{\"screen_name\":\"BogumilKaminski\",\"name\":\"Bogumi\\u0142 Kami\\u0144ski\",\"id\":4039759109,\"id_str\":\"4039759109\",\"indices\":[16,32]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336716034359713792,\"in_reply_to_status_id_str\":\"1336716034359713792\",\"in_reply_to_user_id\":3989248213,\"in_reply_to_user_id_str\":\"3989248213\",\"in_reply_to_screen_name\":\"JuliaComputing\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1058413735868547072\\\/psgKRteX_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1058413735868547072\\\/psgKRteX_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/348879001\\\/1433074144\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":999232394451447808,\"id_str\":\"999232394451447808\",\"name\":\"Web3 Summit\",\"screen_name\":\"web3summit\",\"location\":\"Berlin, Germany\",\"description\":\"Web3 Summit will be a virtual conference in 2021, due to COVID travel restrictions. Stay tuned!\",\"url\":\"https:\\\/\\\/t.co\\\/1e4rOC4zpM\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1e4rOC4zpM\",\"expanded_url\":\"https:\\\/\\\/www.web3summit.com\\\/\",\"display_url\":\"web3summit.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2884,\"friends_count\":20,\"listed_count\":38,\"created_at\":\"Wed May 23 10:15:42 +0000 2018\",\"favourites_count\":114,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":392,\"lang\":null,\"status\":{\"created_at\":\"Wed Aug 12 15:14:33 +0000 2020\",\"id\":1293566551438827522,\"id_str\":\"1293566551438827522\",\"text\":\"Web3 Summit Berlin has shifted to a virtual conference slated for January 2021 due to COVID travel restrictions. In\\u2026 https:\\\/\\\/t.co\\\/wF4KRzn0no\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wF4KRzn0no\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1293566551438827522\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":32,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1296055835286802432\\\/NQdkFuSV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1296055835286802432\\\/NQdkFuSV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/999232394451447808\\\/1597838766\",\"profile_link_color\":\"111111\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17140452,\"id_str\":\"17140452\",\"name\":\"Nicolas Rinaudo\",\"screen_name\":\"NicolasRinaudo\",\"location\":\"Paris\",\"description\":\"Scala & FP enthusiast, CTO of Besedo\",\"url\":\"http:\\\/\\\/t.co\\\/3JpNsIomMI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/3JpNsIomMI\",\"expanded_url\":\"http:\\\/\\\/nrinaudo.github.io\",\"display_url\":\"nrinaudo.github.io\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1478,\"friends_count\":82,\"listed_count\":53,\"created_at\":\"Mon Nov 03 21:04:06 +0000 2008\",\"favourites_count\":460,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9365,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 13:21:12 +0000 2020\",\"id\":1336662178762395649,\"id_str\":\"1336662178762395649\",\"text\":\"@WiemZin Which tool are you using to debug?\\nMe: interns\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"WiemZin\",\"name\":\"Wiem 2.2 \\ud83d\\udd4a\\ufe0f\",\"id\":823986072,\"id_str\":\"823986072\",\"indices\":[0,8]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336660156227182594,\"in_reply_to_status_id_str\":\"1336660156227182594\",\"in_reply_to_user_id\":823986072,\"in_reply_to_user_id_str\":\"823986072\",\"in_reply_to_screen_name\":\"WiemZin\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1156574461413515266\\\/5dptSigL_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1156574461413515266\\\/5dptSigL_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17140452\\\/1594897877\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":216939636,\"id_str\":\"216939636\",\"name\":\"Andrew Ng\",\"screen_name\":\"AndrewYNg\",\"location\":\"Palo Alto, CA\",\"description\":\"Co-Founder of Coursera; Stanford CS adjunct faculty. Former head of Baidu AI Group\\\/Google Brain. #ai #machinelearning, #deeplearning #MOOCs\",\"url\":\"https:\\\/\\\/t.co\\\/XidcMETENd\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XidcMETENd\",\"expanded_url\":\"http:\\\/\\\/www.andrewng.org\",\"display_url\":\"andrewng.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":548871,\"friends_count\":510,\"listed_count\":7560,\"created_at\":\"Thu Nov 18 03:39:11 +0000 2010\",\"favourites_count\":1042,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":1313,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 21:53:15 +0000 2020\",\"id\":1334254329100816384,\"id_str\":\"1334254329100816384\",\"text\":\"If you're an aspiring AI entrepreneur, please let us know how we can help you in our short survey:\\u2026 https:\\\/\\\/t.co\\\/w9bAdwg1fk\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/w9bAdwg1fk\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334254329100816384\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[100,123]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1334254145780338688,\"in_reply_to_status_id_str\":\"1334254145780338688\",\"in_reply_to_user_id\":216939636,\"in_reply_to_user_id_str\":\"216939636\",\"in_reply_to_screen_name\":\"AndrewYNg\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":8,\"favorite_count\":76,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/733174243714682880\\\/oyG30NEH_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/733174243714682880\\\/oyG30NEH_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/216939636\\\/1483126470\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4783690002,\"id_str\":\"4783690002\",\"name\":\"DeepMind\",\"screen_name\":\"DeepMind\",\"location\":\"London, UK\",\"description\":\"We research and build safe AI systems that learn how to solve problems and advance scientific discovery for all. Explore our work: https:\\\/\\\/t.co\\\/UunulS3i0g\",\"url\":\"https:\\\/\\\/t.co\\\/8B3TFFIGoP\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8B3TFFIGoP\",\"expanded_url\":\"http:\\\/\\\/www.deepmind.com\",\"display_url\":\"deepmind.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UunulS3i0g\",\"expanded_url\":\"http:\\\/\\\/deepmind.com\",\"display_url\":\"deepmind.com\",\"indices\":[131,154]}]}},\"protected\":false,\"followers_count\":371433,\"friends_count\":117,\"listed_count\":4819,\"created_at\":\"Tue Jan 19 13:46:08 +0000 2016\",\"favourites_count\":367,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":1580,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:23:56 +0000 2020\",\"id\":1336738365673234434,\"id_str\":\"1336738365673234434\",\"text\":\"1)Information Theory, Inference &amp; Learning Algorithms: https:\\\/\\\/t.co\\\/7XsgnO0ua4\\n2)Introduction to Linear Algebra:\\u2026 https:\\\/\\\/t.co\\\/6Qp4124xcE\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7XsgnO0ua4\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/2VV9K23\",\"display_url\":\"bit.ly\\\/2VV9K23\",\"indices\":[59,82]},{\"url\":\"https:\\\/\\\/t.co\\\/6Qp4124xcE\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336738365673234434\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[118,141]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336738360556204034,\"in_reply_to_status_id_str\":\"1336738360556204034\",\"in_reply_to_user_id\":4783690002,\"in_reply_to_user_id_str\":\"4783690002\",\"in_reply_to_screen_name\":\"DeepMind\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":10,\"favorite_count\":53,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1159850198119657472\\\/WXaSuSOk_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1159850198119657472\\\/WXaSuSOk_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4783690002\\\/1565364897\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1126117912719372288,\"id_str\":\"1126117912719372288\",\"name\":\"Puis-Nicot\",\"screen_name\":\"ChristinePuisN\",\"location\":\"Versailles\",\"description\":\"@ecologienmarche @UDE_FR Citoyenne engag\\u00e9e dans le d\\u00e9veloppement durable, le spectacle vivant, les arts plastiques #culture\",\"url\":\"https:\\\/\\\/t.co\\\/9QNMcq6lfB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9QNMcq6lfB\",\"expanded_url\":\"https:\\\/\\\/www.akitsudigital.fr\",\"display_url\":\"akitsudigital.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":124,\"friends_count\":246,\"listed_count\":1,\"created_at\":\"Wed May 08 13:33:27 +0000 2019\",\"favourites_count\":1932,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1082,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:48:33 +0000 2020\",\"id\":1336714360937443330,\"id_str\":\"1336714360937443330\",\"text\":\"RT @lamaisondfemmes: \\u2753Avec 1\\u20ac on fait quoi \\u2753\\n\\ud83c\\udfe5 Les femmes sont de plus en plus nombreuses \\u00e0 venir nous consulter (+30% en septembre 2020)\\nA\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"lamaisondfemmes\",\"name\":\"La Maison des femmes\",\"id\":771263667354542080,\"id_str\":\"771263667354542080\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 16:32:00 +0000 2020\",\"id\":1336710196379471876,\"id_str\":\"1336710196379471876\",\"text\":\"\\u2753Avec 1\\u20ac on fait quoi \\u2753\\n\\ud83c\\udfe5 Les femmes sont de plus en plus nombreuses \\u00e0 venir nous consulter (+30% en septembre 2020\\u2026 https:\\\/\\\/t.co\\\/xQmz9Wpyz7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xQmz9Wpyz7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336710196379471876\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":57,\"favorite_count\":69,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":57,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333687878753390592\\\/krVUEaDd_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333687878753390592\\\/krVUEaDd_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1126117912719372288\\\/1585413050\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":true,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1616927780,\"id_str\":\"1616927780\",\"name\":\"Formidable\",\"screen_name\":\"FormidableLabs\",\"location\":\"Seattle, WA\",\"description\":\"We\\u2019re open source leaders and JavaScript experts. We work with household names to construct some of the most visited sites and apps on earth.\",\"url\":\"https:\\\/\\\/t.co\\\/8EycfGkpTo\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8EycfGkpTo\",\"expanded_url\":\"https:\\\/\\\/formidable.com\\\/\",\"display_url\":\"formidable.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":9395,\"friends_count\":458,\"listed_count\":198,\"created_at\":\"Wed Jul 24 05:26:02 +0000 2013\",\"favourites_count\":2350,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1810,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:02:01 +0000 2020\",\"id\":1336732849139982336,\"id_str\":\"1336732849139982336\",\"text\":\"RT @reactathon: \\ud83d\\udce3 We are now live with our first talk!\\n\\nFirst up is @beccaliz of @FormidableLabs! She's teaching us to reach Marie Kondo-le\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"reactathon\",\"name\":\"Reactathon\",\"id\":4705115736,\"id_str\":\"4705115736\",\"indices\":[3,14]},{\"screen_name\":\"beccaliz\",\"name\":\"Becca Bailey\",\"id\":19578743,\"id_str\":\"19578743\",\"indices\":[68,77]},{\"screen_name\":\"FormidableLabs\",\"name\":\"Formidable\",\"id\":1616927780,\"id_str\":\"1616927780\",\"indices\":[81,96]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 18:00:02 +0000 2020\",\"id\":1336732349929807872,\"id_str\":\"1336732349929807872\",\"text\":\"\\ud83d\\udce3 We are now live with our first talk!\\n\\nFirst up is @beccaliz of @FormidableLabs! She's teaching us to reach Marie\\u2026 https:\\\/\\\/t.co\\\/ExbWgbefLZ\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"beccaliz\",\"name\":\"Becca Bailey\",\"id\":19578743,\"id_str\":\"19578743\",\"indices\":[52,61]},{\"screen_name\":\"FormidableLabs\",\"name\":\"Formidable\",\"id\":1616927780,\"id_str\":\"1616927780\",\"indices\":[65,80]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ExbWgbefLZ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336732349929807872\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1120740691011702784\\\/scAOUrJe_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1120740691011702784\\\/scAOUrJe_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1616927780\\\/1556317586\",\"profile_link_color\":\"232222\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2935835683,\"id_str\":\"2935835683\",\"name\":\"Kylie\",\"screen_name\":\"kyliestew\",\"location\":\"colorado \\ud83c\\udfd4\",\"description\":\"software engineer, currently navigating burnout \\u2022 @notionhq ambassador \\u2022 fan of dogs, climbing, hiking \\u2022 she\\\/her\",\"url\":\"https:\\\/\\\/t.co\\\/ZelYf9wAgA\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZelYf9wAgA\",\"expanded_url\":\"http:\\\/\\\/kylieis.online\",\"display_url\":\"kylieis.online\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7859,\"friends_count\":908,\"listed_count\":101,\"created_at\":\"Fri Dec 19 08:00:12 +0000 2014\",\"favourites_count\":22572,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4119,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:43:25 +0000 2020\",\"id\":1336743268680347648,\"id_str\":\"1336743268680347648\",\"text\":\"@ruiqing ahh thank you so much \\ud83d\\udc95 this is definitely my video call corner of the apartment, haha, this tapestry look\\u2026 https:\\\/\\\/t.co\\\/kA0BoEM3nQ\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ruiqing\",\"name\":\"Rui Qing\",\"id\":43080895,\"id_str\":\"43080895\",\"indices\":[0,8]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kA0BoEM3nQ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336743268680347648\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336742063535091712,\"in_reply_to_status_id_str\":\"1336742063535091712\",\"in_reply_to_user_id\":43080895,\"in_reply_to_user_id_str\":\"43080895\",\"in_reply_to_screen_name\":\"ruiqing\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325867259521167361\\\/aPI23093_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325867259521167361\\\/aPI23093_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2935835683\\\/1602437553\",\"profile_link_color\":\"399E5A\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":741384754717675520,\"id_str\":\"741384754717675520\",\"name\":\"Guiyomh\",\"screen_name\":\"guiyomh\",\"location\":\"Ile-de-France, France\",\"description\":\"Web architect | DevOps @infogene_tweet #php #symfony #docker\",\"url\":\"https:\\\/\\\/t.co\\\/91RJR7sCeY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/91RJR7sCeY\",\"expanded_url\":\"http:\\\/\\\/www.infogene.fr\",\"display_url\":\"infogene.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":78,\"friends_count\":153,\"listed_count\":74,\"created_at\":\"Fri Jun 10 21:41:14 +0000 2016\",\"favourites_count\":1043,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1153,\"lang\":null,\"status\":{\"created_at\":\"Sun Jul 26 07:44:07 +0000 2020\",\"id\":1287292599901061124,\"id_str\":\"1287292599901061124\",\"text\":\"RT @DesbrosseG: Avez-vous d\\u00e9j\\u00e0 vu le d\\u00e9collage d'un avion photographi\\u00e9 en pause lente ? Non et bien c'est fait.... Belle journ\\u00e9e ! https:\\\/\\\/\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"DesbrosseG\",\"name\":\"Desbrosse Guillaume\",\"id\":992703870,\"id_str\":\"992703870\",\"indices\":[3,14]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Jul 01 08:08:25 +0000 2020\",\"id\":1278239020104011777,\"id_str\":\"1278239020104011777\",\"text\":\"Avez-vous d\\u00e9j\\u00e0 vu le d\\u00e9collage d'un avion photographi\\u00e9 en pause lente ? Non et bien c'est fait.... Belle journ\\u00e9e ! https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1278238571640623104,\"id_str\":\"1278238571640623104\",\"indices\":[115,138],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NWDXkAAJMGq.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NWDXkAAJMGq.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"display_url\":\"pic.twitter.com\\\/p6NNnqsMXj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DesbrosseG\\\/status\\\/1278239020104011777\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":880,\"h\":586,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"},\"medium\":{\"w\":880,\"h\":586,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1278238571640623104,\"id_str\":\"1278238571640623104\",\"indices\":[115,138],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NWDXkAAJMGq.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NWDXkAAJMGq.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"display_url\":\"pic.twitter.com\\\/p6NNnqsMXj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DesbrosseG\\\/status\\\/1278239020104011777\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":880,\"h\":586,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"},\"medium\":{\"w\":880,\"h\":586,\"resize\":\"fit\"}}},{\"id\":1278238571619590144,\"id_str\":\"1278238571619590144\",\"indices\":[115,138],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV-WoAAWvpk.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV-WoAAWvpk.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"display_url\":\"pic.twitter.com\\\/p6NNnqsMXj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DesbrosseG\\\/status\\\/1278239020104011777\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":454,\"resize\":\"fit\"},\"large\":{\"w\":700,\"h\":467,\"resize\":\"fit\"},\"medium\":{\"w\":700,\"h\":467,\"resize\":\"fit\"}}},{\"id\":1278238571619659776,\"id_str\":\"1278238571619659776\",\"indices\":[115,138],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV-XsAANMD4.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV-XsAANMD4.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"display_url\":\"pic.twitter.com\\\/p6NNnqsMXj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DesbrosseG\\\/status\\\/1278239020104011777\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":700,\"h\":467,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":454,\"resize\":\"fit\"},\"medium\":{\"w\":700,\"h\":467,\"resize\":\"fit\"}}},{\"id\":1278238571602808833,\"id_str\":\"1278238571602808833\",\"indices\":[115,138],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV6WkAEHgSw.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eb03NV6WkAEHgSw.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/p6NNnqsMXj\",\"display_url\":\"pic.twitter.com\\\/p6NNnqsMXj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DesbrosseG\\\/status\\\/1278239020104011777\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":700,\"h\":474,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":460,\"resize\":\"fit\"},\"medium\":{\"w\":700,\"h\":474,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":7836,\"favorite_count\":21161,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":7836,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/741521721858109440\\\/QgCHpvlT_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/741521721858109440\\\/QgCHpvlT_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/741384754717675520\\\/1473492367\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1204826379889582080,\"id_str\":\"1204826379889582080\",\"name\":\"0x_1ngs0c\\\/\",\"screen_name\":\"0x_1ngs0c\",\"location\":\"France\",\"description\":\"ITSec | Network Linux SysAdmin | Hacking | Redteam | Blockchain\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":331,\"friends_count\":765,\"listed_count\":2,\"created_at\":\"Wed Dec 11 18:13:08 +0000 2019\",\"favourites_count\":648,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":188,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 17:14:34 +0000 2020\",\"id\":1334908969438113792,\"id_str\":\"1334908969438113792\",\"text\":\"RT @Cyb3rguerre: Des hackers imitent le SMS TousAntiCovid du gouvernement pour diffuser un dangereux malware https:\\\/\\\/t.co\\\/QwR142H8Zs https:\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Cyb3rguerre\",\"name\":\"Cyberguerre\",\"id\":1064895606555066369,\"id_str\":\"1064895606555066369\",\"indices\":[3,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QwR142H8Zs\",\"expanded_url\":\"https:\\\/\\\/cyberguerre.numerama.com\\\/9188-des-hackers-imitent-le-sms-tousanticovid-du-gouvernement-pour-diffuser-un-dangereux-malware.html\",\"display_url\":\"cyberguerre.numerama.com\\\/9188-des-hacke\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 09:07:01 +0000 2020\",\"id\":1334786274893443072,\"id_str\":\"1334786274893443072\",\"text\":\"Des hackers imitent le SMS TousAntiCovid du gouvernement pour diffuser un dangereux malware https:\\\/\\\/t.co\\\/QwR142H8Zs https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QwR142H8Zs\",\"expanded_url\":\"https:\\\/\\\/cyberguerre.numerama.com\\\/9188-des-hackers-imitent-le-sms-tousanticovid-du-gouvernement-pour-diffuser-un-dangereux-malware.html\",\"display_url\":\"cyberguerre.numerama.com\\\/9188-des-hacke\\u2026\",\"indices\":[92,115]}],\"media\":[{\"id\":1334786272196485120,\"id_str\":\"1334786272196485120\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"display_url\":\"pic.twitter.com\\\/3RlEbh9Vaz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Cyb3rguerre\\\/status\\\/1334786274893443072\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":675,\"resize\":\"fit\"},\"large\":{\"w\":1920,\"h\":1080,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1334786272196485120,\"id_str\":\"1334786272196485120\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"display_url\":\"pic.twitter.com\\\/3RlEbh9Vaz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Cyb3rguerre\\\/status\\\/1334786274893443072\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":675,\"resize\":\"fit\"},\"large\":{\"w\":1920,\"h\":1080,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/cyberguerre.numerama.com\\\" rel=\\\"nofollow\\\">Cyberguerre<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":166,\"favorite_count\":127,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":166,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330275600062439426\\\/ebM3qUVM_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330275600062439426\\\/ebM3qUVM_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1204826379889582080\\\/1578399387\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":131908706,\"id_str\":\"131908706\",\"name\":\"Scaleway FR\",\"screen_name\":\"Scaleway_fr\",\"location\":\"Paris\",\"description\":\"Scaleway est l\\u2019un des leaders europ\\u00e9ens du #cloud \\u2601\\ufe0f\\nPour toute demande d\\u2019assistance, merci de contacter @scaleway_help \\ud83d\\udc69\\u200d\\ud83d\\udcbb\",\"url\":\"https:\\\/\\\/t.co\\\/qI9aVuhEY2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qI9aVuhEY2\",\"expanded_url\":\"http:\\\/\\\/www.scaleway.com\\\/fr\",\"display_url\":\"scaleway.com\\\/fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":28369,\"friends_count\":12642,\"listed_count\":253,\"created_at\":\"Sun Apr 11 18:24:18 +0000 2010\",\"favourites_count\":1888,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":15301,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:54:59 +0000 2020\",\"id\":1336685779976941571,\"id_str\":\"1336685779976941571\",\"text\":\"@arvi89 Bonjour @arvi89, suite \\u00e0 l'uncapping nous affichons uniquement les prix \\u00e0 l'heure pour la majorit\\u00e9 de nos p\\u2026 https:\\\/\\\/t.co\\\/3mkykh4FZn\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"arvi89\",\"name\":\"Arvi Lef\\u00e8vre\",\"id\":18236221,\"id_str\":\"18236221\",\"indices\":[0,7]},{\"screen_name\":\"arvi89\",\"name\":\"Arvi Lef\\u00e8vre\",\"id\":18236221,\"id_str\":\"18236221\",\"indices\":[16,23]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3mkykh4FZn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336685779976941571\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335414035018371072,\"in_reply_to_status_id_str\":\"1335414035018371072\",\"in_reply_to_user_id\":18236221,\"in_reply_to_user_id_str\":\"18236221\",\"in_reply_to_screen_name\":\"arvi89\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097899781534507010\\\/zzNiaMuK_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097899781534507010\\\/zzNiaMuK_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/131908706\\\/1605777844\",\"profile_link_color\":\"981CEB\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":185136519,\"id_str\":\"185136519\",\"name\":\"Shawn C\",\"screen_name\":\"citypw\",\"location\":\"Libre port\",\"description\":\"Free\\\/libre software\\\/fw\\\/hw enthusiast, neo-calvinist, rational anarchist, GPL-compliance supporter, infosec consultant, coder, Lord commander of HardenedLinux...\",\"url\":\"https:\\\/\\\/t.co\\\/T5Nk6MQ2U6\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T5Nk6MQ2U6\",\"expanded_url\":\"http:\\\/\\\/citypw.blogspot.com\",\"display_url\":\"citypw.blogspot.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":798,\"friends_count\":1131,\"listed_count\":184,\"created_at\":\"Tue Aug 31 09:30:23 +0000 2010\",\"favourites_count\":17949,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":14118,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 03:12:15 +0000 2020\",\"id\":1336146545146802177,\"id_str\":\"1336146545146802177\",\"text\":\"Congrats, Xeno. OSTv1 benefits a lot of ppl including myself. Thanks so much. Look forward to OSTv2! https:\\\/\\\/t.co\\\/JbIYECQCI2\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JbIYECQCI2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/xenokovah\\\/status\\\/1336054258140139521\",\"display_url\":\"twitter.com\\\/xenokovah\\\/stat\\u2026\",\"indices\":[101,124]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336054258140139521,\"quoted_status_id_str\":\"1336054258140139521\",\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1114427441\\\/vampire-eyes-sm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1114427441\\\/vampire-eyes-sm_normal.jpg\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":58470740,\"id_str\":\"58470740\",\"name\":\"Jamie Coleman\",\"screen_name\":\"Jamie_Lee_C\",\"location\":\"Southampton, England\",\"description\":\"Software Dev\\\/Advocate team lead @IBM (@OpenLibertyIO and @MicroProfileIO), lover of animals, travelling, cars, space, technology and Java. My views are my own!\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1940,\"friends_count\":1134,\"listed_count\":11,\"created_at\":\"Mon Jul 20 13:18:33 +0000 2009\",\"favourites_count\":1837,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":657,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 11:29:25 +0000 2020\",\"id\":1334822108623478788,\"id_str\":\"1334822108623478788\",\"text\":\"RT @reza_rahman: Guidance to run WebSphere Liberty and Open Liberty on Azure Red Hat OpenShift, developed in collaboration with IBM, is now\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"reza_rahman\",\"name\":\"Reza Rahman\",\"id\":16145438,\"id_str\":\"16145438\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 20:30:54 +0000 2020\",\"id\":1334595990297440256,\"id_str\":\"1334595990297440256\",\"text\":\"Guidance to run WebSphere Liberty and Open Liberty on Azure Red Hat OpenShift, developed in collaboration with IBM,\\u2026 https:\\\/\\\/t.co\\\/Etx3UuUDUL\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Etx3UuUDUL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334595990297440256\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":30,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054715012529487872\\\/UN8SpuAN_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054715012529487872\\\/UN8SpuAN_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/58470740\\\/1574860395\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14746057,\"id_str\":\"14746057\",\"name\":\"Julien Tournay\",\"screen_name\":\"skaalf\",\"location\":\"Stockholm, Sweden\",\"description\":\"Functional programmer. I use Scala. Data Engineer @Spotify \\ud83c\\uddeb\\ud83c\\uddf7\\ud83c\\uddf8\\ud83c\\uddea\",\"url\":\"https:\\\/\\\/t.co\\\/XqHjgp1vzd\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XqHjgp1vzd\",\"expanded_url\":\"http:\\\/\\\/jto.github.io\",\"display_url\":\"jto.github.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1578,\"friends_count\":354,\"listed_count\":55,\"created_at\":\"Mon May 12 16:28:52 +0000 2008\",\"favourites_count\":2777,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2684,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 13:35:39 +0000 2020\",\"id\":1334129103063183365,\"id_str\":\"1334129103063183365\",\"text\":\"RT @SpotifyNews: Your personalized Wrapped experience is here\\u2014and it\\u2019s more *you* than ever. Check out the cool new features to help you di\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"SpotifyNews\",\"name\":\"Spotify News\",\"id\":159138417,\"id_str\":\"159138417\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 02 12:00:01 +0000 2020\",\"id\":1334105034112585729,\"id_str\":\"1334105034112585729\",\"text\":\"Your personalized Wrapped experience is here\\u2014and it\\u2019s more *you* than ever. Check out the cool new features to help\\u2026 https:\\\/\\\/t.co\\\/EFJRH090of\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EFJRH090of\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334105034112585729\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":75,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/610430715713482754\\\/prWRrhYo_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/610430715713482754\\\/prWRrhYo_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15428691,\"id_str\":\"15428691\",\"name\":\"allie conti\",\"screen_name\":\"allie_conti\",\"location\":\"FL \\u2192 NY \\u2192 FL \\u2192 NY\",\"description\":\"words in @nytimes, @nymag, etc. allieconti89@gmail.com\",\"url\":\"https:\\\/\\\/t.co\\\/G27lIWFET9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/G27lIWFET9\",\"expanded_url\":\"https:\\\/\\\/www.allieconti.com\\\/\",\"display_url\":\"allieconti.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":true,\"followers_count\":16892,\"friends_count\":996,\"listed_count\":156,\"created_at\":\"Mon Jul 14 16:33:39 +0000 2008\",\"favourites_count\":1280,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":942,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 24 18:26:44 +0000 2020\",\"id\":1331303253125029895,\"id_str\":\"1331303253125029895\",\"text\":\"@Narcomania @jason_koebler sadly there's no way to find out her name or who she was\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Narcomania\",\"name\":\"Max Daly\",\"id\":28330694,\"id_str\":\"28330694\",\"indices\":[0,11]},{\"screen_name\":\"jason_koebler\",\"name\":\"Jason Koebler\",\"id\":16714347,\"id_str\":\"16714347\",\"indices\":[12,26]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1331272638388383744,\"in_reply_to_status_id_str\":\"1331272638388383744\",\"in_reply_to_user_id\":28330694,\"in_reply_to_user_id_str\":\"28330694\",\"in_reply_to_screen_name\":\"Narcomania\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1265404648439140355\\\/nXKGHFif_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1265404648439140355\\\/nXKGHFif_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15428691\\\/1543426131\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":20909005,\"id_str\":\"20909005\",\"name\":\"Pawe\\u0142 Szulc\",\"screen_name\":\"EncodePanda\",\"location\":\"Poland\",\"description\":\"Haskell, \\u8303\\u7574\\u8bba, \\u03bb, Distributed Systems, Formal Methods\",\"url\":\"https:\\\/\\\/t.co\\\/XxOTU3d3J2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XxOTU3d3J2\",\"expanded_url\":\"https:\\\/\\\/EncodePanda.com\",\"display_url\":\"EncodePanda.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2691,\"friends_count\":598,\"listed_count\":83,\"created_at\":\"Sun Feb 15 13:17:30 +0000 2009\",\"favourites_count\":5500,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6499,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:49:56 +0000 2020\",\"id\":1336790206964490240,\"id_str\":\"1336790206964490240\",\"text\":\"I'm looking for work https:\\\/\\\/t.co\\\/VYA9vmBgfG\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VYA9vmBgfG\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/mstk\\\/status\\\/1336740019675963392\",\"display_url\":\"twitter.com\\\/mstk\\\/status\\\/13\\u2026\",\"indices\":[21,44]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336740019675963392,\"quoted_status_id_str\":\"1336740019675963392\",\"retweet_count\":1,\"favorite_count\":24,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242208912411103232\\\/AZfl7dph_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242208912411103232\\\/AZfl7dph_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/20909005\\\/1595768149\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":41895002,\"id_str\":\"41895002\",\"name\":\"Salar Rahmanian (@softinio@fosstodon.org)\",\"screen_name\":\"SalarRahmanian\",\"location\":\"San Francisco, CA\",\"description\":\"Scala\\\/Java Engineer with interests in NixOS, Functional Programming & Haskell. Subscribe to my newsletter: https:\\\/\\\/t.co\\\/cm1QlQQ7Xm\",\"url\":\"https:\\\/\\\/t.co\\\/9SHkUV6YHM\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9SHkUV6YHM\",\"expanded_url\":\"https:\\\/\\\/www.softinio.com\",\"display_url\":\"softinio.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/cm1QlQQ7Xm\",\"expanded_url\":\"https:\\\/\\\/softinio.substack.com\\\/\",\"display_url\":\"softinio.substack.com\",\"indices\":[107,130]}]}},\"protected\":false,\"followers_count\":971,\"friends_count\":786,\"listed_count\":70,\"created_at\":\"Fri May 22 20:34:42 +0000 2009\",\"favourites_count\":12091,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5517,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:02:13 +0000 2020\",\"id\":1336763101274730496,\"id_str\":\"1336763101274730496\",\"text\":\"RT @hmemcpy: We already have Haskell at home.\\nhttps:\\\/\\\/t.co\\\/YMVtt3GVPu\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"hmemcpy\",\"name\":\"Igal Tabachnik\",\"id\":1491081,\"id_str\":\"1491081\",\"indices\":[3,11]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/YMVtt3GVPu\",\"expanded_url\":\"http:\\\/\\\/haskelltotallandscaping.com\",\"display_url\":\"haskelltotallandscaping.com\",\"indices\":[46,69]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 19:49:24 +0000 2020\",\"id\":1336759872327659525,\"id_str\":\"1336759872327659525\",\"text\":\"We already have Haskell at home.\\nhttps:\\\/\\\/t.co\\\/YMVtt3GVPu\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/YMVtt3GVPu\",\"expanded_url\":\"http:\\\/\\\/haskelltotallandscaping.com\",\"display_url\":\"haskelltotallandscaping.com\",\"indices\":[33,56]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":18,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/971781266231250945\\\/WH93YCLA_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/971781266231250945\\\/WH93YCLA_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/41895002\\\/1403877151\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1119728832716476416,\"id_str\":\"1119728832716476416\",\"name\":\"Conexus\",\"screen_name\":\"ConexusAI\",\"location\":\"San Francisco, CA\",\"description\":\"Rolling out your data fabric ONCE\",\"url\":\"https:\\\/\\\/t.co\\\/ZWsyCEnz3o\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZWsyCEnz3o\",\"expanded_url\":\"http:\\\/\\\/www.conexus.com\",\"display_url\":\"conexus.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":539,\"friends_count\":18,\"listed_count\":8,\"created_at\":\"Sat Apr 20 22:25:32 +0000 2019\",\"favourites_count\":2575,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":681,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 01:15:48 +0000 2020\",\"id\":1336479629792538630,\"id_str\":\"1336479629792538630\",\"text\":\"RT @headinthebox: https:\\\/\\\/t.co\\\/WUIi3tnb5u\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"headinthebox\",\"name\":\"Erik Meijer\",\"id\":410939902,\"id_str\":\"410939902\",\"indices\":[3,16]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WUIi3tnb5u\",\"expanded_url\":\"https:\\\/\\\/writings.stephenwolfram.com\\\/2020\\\/12\\\/where-did-combinators-come-from-hunting-the-story-of-moses-schonfinkel\\\/\",\"display_url\":\"writings.stephenwolfram.com\\\/2020\\\/12\\\/where-\\u2026\",\"indices\":[18,41]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 05:53:34 +0000 2020\",\"id\":1336187144059023363,\"id_str\":\"1336187144059023363\",\"text\":\"https:\\\/\\\/t.co\\\/WUIi3tnb5u\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WUIi3tnb5u\",\"expanded_url\":\"https:\\\/\\\/writings.stephenwolfram.com\\\/2020\\\/12\\\/where-did-combinators-come-from-hunting-the-story-of-moses-schonfinkel\\\/\",\"display_url\":\"writings.stephenwolfram.com\\\/2020\\\/12\\\/where-\\u2026\",\"indices\":[0,23]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":13,\"favorite_count\":52,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"is_quote_status\":false,\"retweet_count\":13,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1284270703970115584\\\/wXqfWcT3_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1284270703970115584\\\/wXqfWcT3_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1119728832716476416\\\/1559777415\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":192993332,\"id_str\":\"192993332\",\"name\":\"Jean-Fran\\u00e7ois L\\u00e9pine\",\"screen_name\":\"Halleck45\",\"location\":\"Bretagne, France\",\"description\":\"cr\\u00e9ateur de https:\\\/\\\/t.co\\\/tdUvq6QQBp #qualit\\u00e9 #web\",\"url\":\"https:\\\/\\\/t.co\\\/bFKm5CXfmO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bFKm5CXfmO\",\"expanded_url\":\"http:\\\/\\\/blog.lepine.pro\",\"display_url\":\"blog.lepine.pro\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tdUvq6QQBp\",\"expanded_url\":\"http:\\\/\\\/www.phpmetrics.org\",\"display_url\":\"phpmetrics.org\",\"indices\":[12,35]}]}},\"protected\":false,\"followers_count\":956,\"friends_count\":116,\"listed_count\":55,\"created_at\":\"Mon Sep 20 18:12:30 +0000 2010\",\"favourites_count\":1233,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1154,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 04 12:56:29 +0000 2020\",\"id\":1323972385469616128,\"id_str\":\"1323972385469616128\",\"text\":\"Si vous cherchez des ebooks en fran\\u00e7ais sur le Behavior Driven Development, je viens de retomber sur ce d\\u00e9p\\u00f4t. C'es\\u2026 https:\\\/\\\/t.co\\\/Vn2OHI6Z0T\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Vn2OHI6Z0T\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1323972385469616128\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/570942810950356992\\\/cpD3JTCX_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/570942810950356992\\\/cpD3JTCX_normal.jpeg\",\"profile_link_color\":\"3B94D9\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":858414625,\"id_str\":\"858414625\",\"name\":\"North\",\"screen_name\":\"focalsbynorth\",\"location\":\"North America\",\"description\":\"The future of eyewear. #smartglasses\",\"url\":\"https:\\\/\\\/t.co\\\/9tHSR94urC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9tHSR94urC\",\"expanded_url\":\"http:\\\/\\\/www.bynorth.com\",\"display_url\":\"bynorth.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":true,\"followers_count\":20707,\"friends_count\":2284,\"listed_count\":514,\"created_at\":\"Tue Oct 02 17:28:32 +0000 2012\",\"favourites_count\":8248,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":873,\"lang\":null,\"status\":{\"created_at\":\"Tue Jun 30 15:01:56 +0000 2020\",\"id\":1277980697639235584,\"id_str\":\"1277980697639235584\",\"text\":\"Today we\\u2019re excited to announce our acquisition by \\n@Google. By combining the talents of North and Google, we\\u2019re go\\u2026 https:\\\/\\\/t.co\\\/qYc6fCqTTC\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Google\",\"name\":\"Google\",\"id\":20536157,\"id_str\":\"20536157\",\"indices\":[52,59]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qYc6fCqTTC\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1277980697639235584\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":165,\"favorite_count\":647,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"2D2F33\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1173746394957529088\\\/RNRmKu1R_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1173746394957529088\\\/RNRmKu1R_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/858414625\\\/1588363330\",\"profile_link_color\":\"6D6F71\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14543479,\"id_str\":\"14543479\",\"name\":\"Sylvain Zimmer\",\"screen_name\":\"sylvinus\",\"location\":\"Paris\",\"description\":\"Founder of @dotConferences (now part of @WTTJ) \\\/ Staff Engineer @contentsquare \\\/ Active angel investor \\\/ Co-founder @Jamendo @TEDxParis @PricingAssistnt\",\"url\":\"https:\\\/\\\/t.co\\\/QN9X1BTTXF\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QN9X1BTTXF\",\"expanded_url\":\"http:\\\/\\\/sylvainzimmer.com\",\"display_url\":\"sylvainzimmer.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3487,\"friends_count\":338,\"listed_count\":217,\"created_at\":\"Sat Apr 26 12:47:14 +0000 2008\",\"favourites_count\":161,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":3910,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 16:12:09 +0000 2020\",\"id\":1334168485463793665,\"id_str\":\"1334168485463793665\",\"text\":\"It's time for our yearly look at @poly ... and to no one's surprise, it's joining Microsoft's Remix3D in the gravey\\u2026 https:\\\/\\\/t.co\\\/n4TvlWKQ8f\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"poly\",\"name\":\"Poly by Google\",\"id\":907593279365107714,\"id_str\":\"907593279365107714\",\"indices\":[33,38]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/n4TvlWKQ8f\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334168485463793665\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1202961300642512901,\"quoted_status_id_str\":\"1202961300642512901\",\"retweet_count\":0,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3109054399\\\/65e91c0623ae740b3d8f91d4b86cc070_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3109054399\\\/65e91c0623ae740b3d8f91d4b86cc070_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14543479\\\/1398124225\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":977359274,\"id_str\":\"977359274\",\"name\":\"dotConferences\",\"screen_name\":\"dotConferences\",\"location\":\"Paris\",\"description\":\"dotConferences is a series of technology events in Paris created by @sylvinus.\\r\\n\\r\\nWe want to bring an unheard-of, TED-like level of quality to tech conferences.\",\"url\":\"https:\\\/\\\/t.co\\\/wFz5godE1w\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wFz5godE1w\",\"expanded_url\":\"http:\\\/\\\/dotconferences.com\",\"display_url\":\"dotconferences.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3374,\"friends_count\":80,\"listed_count\":132,\"created_at\":\"Thu Nov 29 01:38:02 +0000 2012\",\"favourites_count\":224,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1705,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 30 13:43:39 +0000 2020\",\"id\":1333406338043564032,\"id_str\":\"1333406338043564032\",\"text\":\"@DerVonDenBergen Hey! Sorry for the huge delay! Send me an email at vincent[at]https:\\\/\\\/t.co\\\/tOYNQ93gHw. ;)\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"DerVonDenBergen\",\"name\":\"Felix De Montis \\ud83c\\udf40\",\"id\":382308227,\"id_str\":\"382308227\",\"indices\":[0,16]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tOYNQ93gHw\",\"expanded_url\":\"http:\\\/\\\/dotconferences.com\",\"display_url\":\"dotconferences.com\",\"indices\":[79,102]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":1321091086148870147,\"in_reply_to_status_id_str\":\"1321091086148870147\",\"in_reply_to_user_id\":382308227,\"in_reply_to_user_id_str\":\"382308227\",\"in_reply_to_screen_name\":\"DerVonDenBergen\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1013411995771645952\\\/_FJIMXTA_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1013411995771645952\\\/_FJIMXTA_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/977359274\\\/1398345445\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17466909,\"id_str\":\"17466909\",\"name\":\"Katie Patrick\",\"screen_name\":\"katiepatrick\",\"location\":\"San Francisco\",\"description\":\"Environmental Eng + Designer: Get my book How to Save the World \\u27a1\\ufe0f https:\\\/\\\/t.co\\\/IaBcJCLPqk #behavior #gamedesign #sustainability \\ud83d\\udc7e\\ud83c\\udf0e\\ud83d\\udcca @EnergyLollipop @UrbanCanopy_US\",\"url\":\"https:\\\/\\\/t.co\\\/ntXAyH4ykN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ntXAyH4ykN\",\"expanded_url\":\"http:\\\/\\\/www.katiepatrick.com\",\"display_url\":\"katiepatrick.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IaBcJCLPqk\",\"expanded_url\":\"http:\\\/\\\/amzn.to\\\/2KAbLLe\",\"display_url\":\"amzn.to\\\/2KAbLLe\",\"indices\":[67,90]}]}},\"protected\":false,\"followers_count\":24612,\"friends_count\":17782,\"listed_count\":210,\"created_at\":\"Tue Nov 18 18:01:01 +0000 2008\",\"favourites_count\":321,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4148,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:43:35 +0000 2020\",\"id\":1336728211477106691,\"id_str\":\"1336728211477106691\",\"text\":\"RT @Negawatt_Nate: CO - \\\"The biggest culprits are malfunctioning heating systems, such as furnaces, gas water heaters and gas dryers\\\"\\n\\nSadl\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Negawatt_Nate\",\"name\":\"Nate Kinsey \\ud83c\\udfd8\\ufe0f\\ud83c\\udfe2\\ud83c\\udfd7\\ufe0f\\u26a1\",\"id\":1082332837305475072,\"id_str\":\"1082332837305475072\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 03:45:39 +0000 2020\",\"id\":1336517339563446273,\"id_str\":\"1336517339563446273\",\"text\":\"CO - \\\"The biggest culprits are malfunctioning heating systems, such as furnaces, gas water heaters and gas dryers\\\"\\u2026 https:\\\/\\\/t.co\\\/trZjmUFthy\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/trZjmUFthy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336517339563446273\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":15,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/532580950207496192\\\/jSn4R8xU_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/532580950207496192\\\/jSn4R8xU_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17466909\\\/1561835750\",\"profile_link_color\":\"7FDBB6\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1463227411,\"id_str\":\"1463227411\",\"name\":\"turn\",\"screen_name\":\"VincentTommasi\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":36,\"friends_count\":300,\"listed_count\":0,\"created_at\":\"Mon May 27 21:44:19 +0000 2013\",\"favourites_count\":179,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":73,\"lang\":null,\"status\":{\"created_at\":\"Sun May 17 15:22:35 +0000 2020\",\"id\":1262040826860965888,\"id_str\":\"1262040826860965888\",\"text\":\"RT @JulienChieze: #CONCOURS \\ud83c\\udf81\\nJ\\u2019ai le plaisir de pouvoir vous offrir un Coffret Collector #XenobladeChronicles Definitive Edition \\u2728\\n\\nPour p\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"CONCOURS\",\"indices\":[18,27]},{\"text\":\"XenobladeChronicles\",\"indices\":[90,110]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"JulienChieze\",\"name\":\"Julien Chi\\u00e8ze\",\"id\":253296586,\"id_str\":\"253296586\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri May 15 06:11:13 +0000 2020\",\"id\":1261177296393773057,\"id_str\":\"1261177296393773057\",\"text\":\"#CONCOURS \\ud83c\\udf81\\nJ\\u2019ai le plaisir de pouvoir vous offrir un Coffret Collector #XenobladeChronicles Definitive Edition \\u2728\\u2026 https:\\\/\\\/t.co\\\/i5bbRFlV4l\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"CONCOURS\",\"indices\":[0,9]},{\"text\":\"XenobladeChronicles\",\"indices\":[72,92]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/i5bbRFlV4l\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1261177296393773057\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[115,138]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3578,\"favorite_count\":2053,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":3578,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973640511163719680\\\/f1ug-buP_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973640511163719680\\\/f1ug-buP_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":107399326,\"id_str\":\"107399326\",\"name\":\"abolish police\",\"screen_name\":\"CreeepyJoe\",\"location\":\"Sec-he, Cahuilla Land\",\"description\":\"BLM. Partner in crime is @PaolaIsWriting. MSC18M. (he\\\/him) ACAB\",\"url\":\"https:\\\/\\\/t.co\\\/ehj6i25yCx\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ehj6i25yCx\",\"expanded_url\":\"https:\\\/\\\/joemathjoe.wordpress.com\\\/\",\"display_url\":\"joemathjoe.wordpress.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":true,\"followers_count\":2310,\"friends_count\":1671,\"listed_count\":34,\"created_at\":\"Fri Jan 22 12:39:35 +0000 2010\",\"favourites_count\":53791,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7719,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 06:31:04 +0000 2020\",\"id\":1336558968399745024,\"id_str\":\"1336558968399745024\",\"text\":\"@Alex_Does_Math Give em an A\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Alex_Does_Math\",\"name\":\"Alexander J. Sutherland\",\"id\":1025939776401158144,\"id_str\":\"1025939776401158144\",\"indices\":[0,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336518724874977281,\"in_reply_to_status_id_str\":\"1336518724874977281\",\"in_reply_to_user_id\":1025939776401158144,\"in_reply_to_user_id_str\":\"1025939776401158144\",\"in_reply_to_screen_name\":\"Alex_Does_Math\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1212270828995280896\\\/XG-pt21m_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1212270828995280896\\\/XG-pt21m_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/107399326\\\/1443674867\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1067074033433366534,\"id_str\":\"1067074033433366534\",\"name\":\"Daniel Kr\\u00fcger\",\"screen_name\":\"dnlkrgr\",\"location\":\"\",\"description\":\"+ Haskell\\n+ Prolog\\n+ nix package manager\\n+ NixOS\\n+ LineageOS\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":544,\"friends_count\":527,\"listed_count\":7,\"created_at\":\"Mon Nov 26 15:14:09 +0000 2018\",\"favourites_count\":604,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":783,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 10:07:21 +0000 2020\",\"id\":1334076680357482496,\"id_str\":\"1334076680357482496\",\"text\":\"hey all, as part of my thesis on writing a tool for reducing Haskell programs I am looking for additional test case\\u2026 https:\\\/\\\/t.co\\\/UfF0dKSvHu\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UfF0dKSvHu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334076680357482496\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311966011319635968\\\/5l_J_T6F_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311966011319635968\\\/5l_J_T6F_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1067074033433366534\\\/1567976532\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":65410718,\"id_str\":\"65410718\",\"name\":\"ITP | Tisch | NYU\",\"screen_name\":\"ITP_NYU\",\"location\":\"721 Broadway, 4th floor, NY\",\"description\":\"A 2-year graduate program in Tisch, NYU to explore the creative uses of communication technologies - a Center for the Recently Possible. \\n\\ud83d\\udd17Bio: https:\\\/\\\/t.co\\\/Mss1oZyPBt\",\"url\":\"http:\\\/\\\/t.co\\\/wSDDfGQcv7\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/wSDDfGQcv7\",\"expanded_url\":\"http:\\\/\\\/tisch.nyu.edu\\\/itp\",\"display_url\":\"tisch.nyu.edu\\\/itp\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Mss1oZyPBt\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/3ee6BCx\",\"display_url\":\"bit.ly\\\/3ee6BCx\",\"indices\":[144,167]}]}},\"protected\":false,\"followers_count\":7830,\"friends_count\":1253,\"listed_count\":288,\"created_at\":\"Thu Aug 13 17:04:43 +0000 2009\",\"favourites_count\":292,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1034,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 01 23:00:01 +0000 2020\",\"id\":1333908743650750467,\"id_str\":\"1333908743650750467\",\"text\":\"\\ud83e\\udd29Clay Shirky Interview is now LIVE! \\n\\nThe Adjacent Podcasts interview with author and NYU Professor Clay\\u00a0Shirky is\\u2026 https:\\\/\\\/t.co\\\/GQ6fPOOkMb\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GQ6fPOOkMb\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333908743650750467\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ACDED6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1255566778144440320\\\/J8TxjXaG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1255566778144440320\\\/J8TxjXaG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/65410718\\\/1605542875\",\"profile_link_color\":\"038543\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17870586,\"id_str\":\"17870586\",\"name\":\"Tim Szetela\",\"screen_name\":\"tszetela\",\"location\":\"Brooklyn, NY\",\"description\":\"pixels, patterns, animation, maps, archives, interfaces, games, @rewordable\",\"url\":\"https:\\\/\\\/t.co\\\/zJKX0I4mx9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/zJKX0I4mx9\",\"expanded_url\":\"http:\\\/\\\/timszetela.com\",\"display_url\":\"timszetela.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":893,\"friends_count\":1762,\"listed_count\":49,\"created_at\":\"Thu Dec 04 15:57:17 +0000 2008\",\"favourites_count\":3734,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1068,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 06:41:50 +0000 2020\",\"id\":1336561676712341509,\"id_str\":\"1336561676712341509\",\"text\":\"iterative geometries\\n2020.12.08\\n#processing https:\\\/\\\/t.co\\\/PxnSShxWtr\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"processing\",\"indices\":[32,43]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1336560919023915014,\"id_str\":\"1336560919023915014\",\"indices\":[44,67],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EoxrEw8XEAYNfKk.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EoxrEw8XEAYNfKk.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/PxnSShxWtr\",\"display_url\":\"pic.twitter.com\\\/PxnSShxWtr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/tszetela\\\/status\\\/1336561676712341509\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1200,\"h\":1200,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336560919023915014,\"id_str\":\"1336560919023915014\",\"indices\":[44,67],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EoxrEw8XEAYNfKk.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EoxrEw8XEAYNfKk.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/PxnSShxWtr\",\"display_url\":\"pic.twitter.com\\\/PxnSShxWtr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/tszetela\\\/status\\\/1336561676712341509\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1200,\"h\":1200,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[1,1],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EoxrEw8XEAYNfKk.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"6389F6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1289647830257328128\\\/YlfZc4TR_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1289647830257328128\\\/YlfZc4TR_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17870586\\\/1596310729\",\"profile_link_color\":\"43D7FB\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":737761789434318848,\"id_str\":\"737761789434318848\",\"name\":\"Rewordable\",\"screen_name\":\"rewordable\",\"location\":\"\",\"description\":\"The uniquely fragmented word game by @aparrish @adamjsimon @tszetela\",\"url\":\"https:\\\/\\\/t.co\\\/4O1MssdpDS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4O1MssdpDS\",\"expanded_url\":\"http:\\\/\\\/rewordable.com\\\/shop\",\"display_url\":\"rewordable.com\\\/shop\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":366,\"friends_count\":630,\"listed_count\":13,\"created_at\":\"Tue May 31 21:44:52 +0000 2016\",\"favourites_count\":526,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":275,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 03 17:35:38 +0000 2020\",\"id\":1323680247766724618,\"id_str\":\"1323680247766724618\",\"text\":\"#VOTE https:\\\/\\\/t.co\\\/EfsKtKmSgg\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"VOTE\",\"indices\":[0,5]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1323680245023690755,\"id_str\":\"1323680245023690755\",\"indices\":[6,29],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/El6oK3DW0AMzIB4.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/El6oK3DW0AMzIB4.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/EfsKtKmSgg\",\"display_url\":\"pic.twitter.com\\\/EfsKtKmSgg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rewordable\\\/status\\\/1323680247766724618\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1153,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":676,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1323680245023690755,\"id_str\":\"1323680245023690755\",\"indices\":[6,29],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/El6oK3DW0AMzIB4.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/El6oK3DW0AMzIB4.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/EfsKtKmSgg\",\"display_url\":\"pic.twitter.com\\\/EfsKtKmSgg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rewordable\\\/status\\\/1323680247766724618\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1153,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":676,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"011add077f4d2da3\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/011add077f4d2da3.json\",\"place_type\":\"city\",\"name\":\"Brooklyn\",\"full_name\":\"Brooklyn, NY\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-74.041878,40.570842],[-73.855673,40.570842],[-73.855673,40.739434],[-74.041878,40.739434]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/773032421000380416\\\/io7BmHLW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/773032421000380416\\\/io7BmHLW_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/737761789434318848\\\/1473294397\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":57502401,\"id_str\":\"57502401\",\"name\":\"Michelle Zatlyn\",\"screen_name\":\"zatlyn\",\"location\":\"San Francisco\",\"description\":\"I am the cofounder of Cloudflare and enjoy building products people love. I traded the Canadian northern lights for the SF Bay Bridge. Young Global Leader '14.\",\"url\":\"http:\\\/\\\/t.co\\\/ps1ZwMW8vn\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/ps1ZwMW8vn\",\"expanded_url\":\"http:\\\/\\\/www.cloudflare.com\\\/\",\"display_url\":\"cloudflare.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":16146,\"friends_count\":4491,\"listed_count\":448,\"created_at\":\"Fri Jul 17 00:57:32 +0000 2009\",\"favourites_count\":5952,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6882,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:56:34 +0000 2020\",\"id\":1336791877849407488,\"id_str\":\"1336791877849407488\",\"text\":\"RT @kirstenagreen: It\\u2019s pretty unreal to be included on a list with this group of women.  The only way to understand it is consider the imp\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kirstenagreen\",\"name\":\"Kirsten Green\",\"id\":39191312,\"id_str\":\"39191312\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:16:25 +0000 2020\",\"id\":1336766674712727553,\"id_str\":\"1336766674712727553\",\"text\":\"It\\u2019s pretty unreal to be included on a list with this group of women.  The only way to understand it is consider th\\u2026 https:\\\/\\\/t.co\\\/fhCr3SZmmP\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fhCr3SZmmP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336766674712727553\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336300375704555530,\"quoted_status_id_str\":\"1336300375704555530\",\"retweet_count\":5,\"favorite_count\":145,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":true,\"quoted_status_id\":1336300375704555530,\"quoted_status_id_str\":\"1336300375704555530\",\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/614165572117397504\\\/pp-Z3FXP_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/614165572117397504\\\/pp-Z3FXP_normal.jpg\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":23275456,\"id_str\":\"23275456\",\"name\":\"Matthew Prince \\ud83c\\udf25\",\"screen_name\":\"eastdakota\",\"location\":\"Park City, UT\",\"description\":\"A little bit geek, wonk, and nerd. Repeat entrepreneur, recovering lawyer, and former ski instructor. Co-founder & CEO of Cloudflare (NYSE: NET).\",\"url\":\"https:\\\/\\\/t.co\\\/1zVlza3shY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1zVlza3shY\",\"expanded_url\":\"http:\\\/\\\/www.cloudflare.com\",\"display_url\":\"cloudflare.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":49457,\"friends_count\":296,\"listed_count\":1001,\"created_at\":\"Sun Mar 08 04:21:35 +0000 2009\",\"favourites_count\":2287,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":33870,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:00:58 +0000 2020\",\"id\":1336777884069838848,\"id_str\":\"1336777884069838848\",\"text\":\"RT @CloudflareTV: Next up in 15mins, \\ud83d\\udd12 From Idea to Internet: Deploying and Developing Privacy Enhancing Protocols. Developing new protocol\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"CloudflareTV\",\"name\":\"Cloudflare TV\",\"id\":1263566261172047872,\"id_str\":\"1263566261172047872\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/www.echofon.com\\\/\\\" rel=\\\"nofollow\\\">Echofon<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:45:07 +0000 2020\",\"id\":1336773895106547715,\"id_str\":\"1336773895106547715\",\"text\":\"Next up in 15mins, \\ud83d\\udd12 From Idea to Internet: Deploying and Developing Privacy Enhancing Protocols. Developing new pr\\u2026 https:\\\/\\\/t.co\\\/dPfuxZARfm\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/dPfuxZARfm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336773895106547715\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/sproutsocial.com\\\" rel=\\\"nofollow\\\">Sprout Social<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"352726\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2332322635\\\/zhx7hflmmcxdaj0tk9f8_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2332322635\\\/zhx7hflmmcxdaj0tk9f8_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/23275456\\\/1449210443\",\"profile_link_color\":\"D02B55\",\"profile_sidebar_border_color\":\"829D5E\",\"profile_sidebar_fill_color\":\"99CC33\",\"profile_text_color\":\"3E4415\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":159201100,\"id_str\":\"159201100\",\"name\":\"Anjali Sud\",\"screen_name\":\"anjsud\",\"location\":\"NYC\",\"description\":\"@Vimeo CEO. @Dolby board. Proud mama.\",\"url\":\"https:\\\/\\\/t.co\\\/RWGxmb2bzm\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/RWGxmb2bzm\",\"expanded_url\":\"http:\\\/\\\/vimeo.com\",\"display_url\":\"vimeo.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4535,\"friends_count\":54,\"listed_count\":89,\"created_at\":\"Thu Jun 24 18:56:16 +0000 2010\",\"favourites_count\":328,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":224,\"lang\":null,\"status\":{\"created_at\":\"Fri Nov 27 18:28:12 +0000 2020\",\"id\":1332390786122575874,\"id_str\":\"1332390786122575874\",\"text\":\"\\ud83d\\udcaf https:\\\/\\\/t.co\\\/KgZ5152hXi\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KgZ5152hXi\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DoubleLJSquared\\\/status\\\/1332341196954370051\",\"display_url\":\"twitter.com\\\/DoubleLJSquare\\u2026\",\"indices\":[2,25]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1332341196954370051,\"quoted_status_id_str\":\"1332341196954370051\",\"retweet_count\":1,\"favorite_count\":14,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1198294582183833602\\\/PnVa0FLZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1198294582183833602\\\/PnVa0FLZ_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":182821975,\"id_str\":\"182821975\",\"name\":\"Evan You\",\"screen_name\":\"youyuxi\",\"location\":\"New Jersey, USA\",\"description\":\"Husband, father of two, independent open source developer. Creator \\\/ project lead of @vuejs and connoisseur of sushi.\",\"url\":\"https:\\\/\\\/t.co\\\/8S9x6ZEYyA\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8S9x6ZEYyA\",\"expanded_url\":\"http:\\\/\\\/evanyou.me\",\"display_url\":\"evanyou.me\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":126230,\"friends_count\":1164,\"listed_count\":1940,\"created_at\":\"Wed Aug 25 13:45:01 +0000 2010\",\"favourites_count\":4031,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5606,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:18:47 +0000 2020\",\"id\":1336797468172890115,\"id_str\":\"1336797468172890115\",\"text\":\"We are doing a lot of explorations in this front because making TypeScript to play well with non-ts source is a non\\u2026 https:\\\/\\\/t.co\\\/xpmAsSSHCy\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xpmAsSSHCy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336797468172890115\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336797047362613258,\"in_reply_to_status_id_str\":\"1336797047362613258\",\"in_reply_to_user_id\":182821975,\"in_reply_to_user_id_str\":\"182821975\",\"in_reply_to_screen_name\":\"youyuxi\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1206997998900850688\\\/cTXTQiHm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1206997998900850688\\\/cTXTQiHm_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/182821975\\\/1576606001\",\"profile_link_color\":\"2C3E50\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":22470312,\"id_str\":\"22470312\",\"name\":\"Elise Klein\",\"screen_name\":\"elisejklein\",\"location\":\"Melbourne, Australia\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":549,\"friends_count\":272,\"listed_count\":4,\"created_at\":\"Mon Mar 02 09:49:45 +0000 2009\",\"favourites_count\":1093,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":472,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 12:22:29 +0000 2020\",\"id\":1336647405253496836,\"id_str\":\"1336647405253496836\",\"text\":\"This is plain cruel. Furious, CDC and BasicsCard need to end now! https:\\\/\\\/t.co\\\/TS4Cj8m0w1\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TS4Cj8m0w1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/senatorsiewert\\\/status\\\/1336635704164536322\",\"display_url\":\"twitter.com\\\/senatorsiewert\\u2026\",\"indices\":[66,89]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336635704164536322,\"quoted_status_id_str\":\"1336635704164536322\",\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"BADFCD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804109200028643328\\\/10aQVVpY_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804109200028643328\\\/10aQVVpY_normal.jpg\",\"profile_link_color\":\"FF0000\",\"profile_sidebar_border_color\":\"F2E195\",\"profile_sidebar_fill_color\":\"FFF7CC\",\"profile_text_color\":\"0C3E53\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":60601435,\"id_str\":\"60601435\",\"name\":\"Caroline Thelier\",\"screen_name\":\"CarolineThelier\",\"location\":\"\",\"description\":\"GM France @PayPal\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":283,\"friends_count\":44,\"listed_count\":3,\"created_at\":\"Mon Jul 27 13:48:15 +0000 2009\",\"favourites_count\":21,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":26,\"lang\":null,\"status\":{\"created_at\":\"Sun Mar 01 20:07:16 +0000 2020\",\"id\":1234208605949304833,\"id_str\":\"1234208605949304833\",\"text\":\"RT @EmilieShopify: Lancement du documentaire Foundation @joinstationf le 8\\\/3 en partenariat avec @Shopify et @PayPal @CarolineThelier @Alli\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"joinstationf\",\"name\":\"STATION F\",\"id\":739862016114954240,\"id_str\":\"739862016114954240\",\"indices\":[56,69]},{\"screen_name\":\"Shopify\",\"name\":\"Shopify\",\"id\":17136315,\"id_str\":\"17136315\",\"indices\":[97,105]},{\"screen_name\":\"PayPal\",\"name\":\"PayPal\",\"id\":30018058,\"id_str\":\"30018058\",\"indices\":[109,116]},{\"screen_name\":\"CarolineThelier\",\"name\":\"Caroline Thelier\",\"id\":60601435,\"id_str\":\"60601435\",\"indices\":[117,133]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Feb 28 10:34:53 +0000 2020\",\"id\":1233339785986658304,\"id_str\":\"1233339785986658304\",\"text\":\"Lancement du documentaire Foundation @joinstationf le 8\\\/3 en partenariat avec @Shopify et @PayPal @CarolineThelier\\u2026 https:\\\/\\\/t.co\\\/w56V65qJmq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"joinstationf\",\"name\":\"STATION F\",\"id\":739862016114954240,\"id_str\":\"739862016114954240\",\"indices\":[37,50]},{\"screen_name\":\"Shopify\",\"name\":\"Shopify\",\"id\":17136315,\"id_str\":\"17136315\",\"indices\":[78,86]},{\"screen_name\":\"PayPal\",\"name\":\"PayPal\",\"id\":30018058,\"id_str\":\"30018058\",\"indices\":[90,97]},{\"screen_name\":\"CarolineThelier\",\"name\":\"Caroline Thelier\",\"id\":60601435,\"id_str\":\"60601435\",\"indices\":[98,114]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/w56V65qJmq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1233339785986658304\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1230493323200208898,\"quoted_status_id_str\":\"1230493323200208898\",\"retweet_count\":1,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":true,\"quoted_status_id\":1230493323200208898,\"quoted_status_id_str\":\"1230493323200208898\",\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/433458859\\\/Caro_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/433458859\\\/Caro_normal.jpg\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1103763399341531136,\"id_str\":\"1103763399341531136\",\"name\":\"\\u039b Data Science Ryan\",\"screen_name\":\"DataScienceRyan\",\"location\":\"\",\"description\":\"This is Ryan Allred's #DataScience specific account. I'm a Data Science instructor @LambdaSchool  - \\u039b \\ud83c\\udfeb\",\"url\":\"https:\\\/\\\/t.co\\\/vt9UjM7EoZ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vt9UjM7EoZ\",\"expanded_url\":\"https:\\\/\\\/ryanallred.ai\",\"display_url\":\"ryanallred.ai\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2196,\"friends_count\":4790,\"listed_count\":13,\"created_at\":\"Thu Mar 07 21:04:36 +0000 2019\",\"favourites_count\":828,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":137,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 05 05:42:54 +0000 2020\",\"id\":1324225660039106566,\"id_str\":\"1324225660039106566\",\"text\":\"RT @BettinaForget: Data visualization insights:\\nLand doesn't vote. People do.\\n#USElection2020 https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"USElection2020\",\"indices\":[78,93]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"BettinaForget\",\"name\":\"Bettina Forget\",\"id\":21027587,\"id_str\":\"21027587\",\"indices\":[3,17]}],\"urls\":[],\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"source_status_id\":1324139878666391555,\"source_status_id_str\":\"1324139878666391555\",\"source_user_id\":21027587,\"source_user_id_str\":\"21027587\"}]},\"extended_entities\":{\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"source_status_id\":1324139878666391555,\"source_status_id_str\":\"1324139878666391555\",\"source_user_id\":21027587,\"source_user_id_str\":\"21027587\",\"video_info\":{\"aspect_ratio\":[100,63],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmBJ-68XYAAmLnP.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Nov 05 00:02:03 +0000 2020\",\"id\":1324139878666391555,\"id_str\":\"1324139878666391555\",\"text\":\"Data visualization insights:\\nLand doesn't vote. People do.\\n#USElection2020 https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"USElection2020\",\"indices\":[59,74]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[75,98],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[75,98],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[100,63],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmBJ-68XYAAmLnP.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":85387,\"favorite_count\":264492,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":85387,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103763527553052672\\\/r7a7Fhrn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103763527553052672\\\/r7a7Fhrn_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1376821657,\"id_str\":\"1376821657\",\"name\":\"Nicolas LEFEVRE\",\"screen_name\":\"nicoweb_dev\",\"location\":\"Paris, France\",\"description\":\"#PHP \\\/ #Symfony Developer\",\"url\":\"https:\\\/\\\/t.co\\\/G9PZp3nESa\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/G9PZp3nESa\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/nicoweb\",\"display_url\":\"github.com\\\/nicoweb\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":65,\"friends_count\":189,\"listed_count\":1,\"created_at\":\"Wed Apr 24 11:25:25 +0000 2013\",\"favourites_count\":76,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":118,\"lang\":null,\"status\":{\"created_at\":\"Thu Mar 19 06:45:58 +0000 2020\",\"id\":1240529933304283136,\"id_str\":\"1240529933304283136\",\"text\":\"RT @miniCharles: Merci \\u00e0 tous ceux qui assurent notre sant\\u00e9 et \\u00e0 ceux qui continue \\u00e0 nous alimenter durant cette p\\u00e9riode bien difficile ! \\ud83d\\udc4f\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"miniCharles\",\"name\":\"Charles-Emmanuel\",\"id\":29293085,\"id_str\":\"29293085\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Mar 18 19:07:51 +0000 2020\",\"id\":1240354246220005377,\"id_str\":\"1240354246220005377\",\"text\":\"Merci \\u00e0 tous ceux qui assurent notre sant\\u00e9 et \\u00e0 ceux qui continue \\u00e0 nous alimenter durant cette p\\u00e9riode bien diffic\\u2026 https:\\\/\\\/t.co\\\/NCslwBw53M\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NCslwBw53M\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1240354246220005377\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1053610380348571649\\\/neLJk6hx_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1053610380348571649\\\/neLJk6hx_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1376821657\\\/1536509923\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3148611379,\"id_str\":\"3148611379\",\"name\":\"Purism\",\"screen_name\":\"Puri_sm\",\"location\":\"San Francisco\",\"description\":\"Laptops, phones & services with #security, #privacy, #freedom. Find us on https:\\\/\\\/t.co\\\/REg4G8SspJ \\n\\nSupport via e-mail, not Twitter: https:\\\/\\\/t.co\\\/MDFIe1M8Ea\",\"url\":\"https:\\\/\\\/t.co\\\/jsjKVRsNwY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jsjKVRsNwY\",\"expanded_url\":\"https:\\\/\\\/puri.sm\",\"display_url\":\"puri.sm\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/REg4G8SspJ\",\"expanded_url\":\"https:\\\/\\\/librem.one\",\"display_url\":\"librem.one\",\"indices\":[74,97]},{\"url\":\"https:\\\/\\\/t.co\\\/MDFIe1M8Ea\",\"expanded_url\":\"https:\\\/\\\/puri.sm\\\/contact\\\/\",\"display_url\":\"puri.sm\\\/contact\\\/\",\"indices\":[133,156]}]}},\"protected\":false,\"followers_count\":19758,\"friends_count\":795,\"listed_count\":628,\"created_at\":\"Fri Apr 10 20:32:12 +0000 2015\",\"favourites_count\":12011,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":10981,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:36:04 +0000 2020\",\"id\":1336756520571179008,\"id_str\":\"1336756520571179008\",\"text\":\"RT @Puri_sm: Preventing Fragmentation with the Librem 5\\n\\n\\\"Fragmentation is a massive problem in computer software development that has only\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Puri_sm\",\"name\":\"Purism\",\"id\":3148611379,\"id_str\":\"3148611379\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 14:52:51 +0000 2020\",\"id\":1336685244192157696,\"id_str\":\"1336685244192157696\",\"text\":\"Preventing Fragmentation with the Librem 5\\n\\n\\\"Fragmentation is a massive problem in computer software development th\\u2026 https:\\\/\\\/t.co\\\/UpaUj7eyu7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UpaUj7eyu7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336685244192157696\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":14,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1123980443244691461\\\/xrWbaer7_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1123980443244691461\\\/xrWbaer7_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3148611379\\\/1547526788\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15075911,\"id_str\":\"15075911\",\"name\":\"Steve Francia\",\"screen_name\":\"spf13\",\"location\":\"New York, USA\",\"description\":\"@golang Product Lead @Google \\u2022 Previously VP @Docker & @MongoDB, @Drupal board \\u2022 creator of @gohugoio, Cobra, Viper & spf13-vim \\u2022 Father of 4\",\"url\":\"https:\\\/\\\/t.co\\\/DXi8nAoAbq\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DXi8nAoAbq\",\"expanded_url\":\"http:\\\/\\\/spf13.com\",\"display_url\":\"spf13.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":29205,\"friends_count\":9574,\"listed_count\":1146,\"created_at\":\"Tue Jun 10 18:30:46 +0000 2008\",\"favourites_count\":32938,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":10501,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:42:00 +0000 2020\",\"id\":1336758010996289537,\"id_str\":\"1336758010996289537\",\"text\":\"RT @odeke_et: Thanks @dgraphlabs @GoSystemsConf for inviting me to speak about \\u201cFinding Needles in HayStacks, and Chaotic Systems\\u201d about di\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"odeke_et\",\"name\":\"Emmanuel T Odeke\",\"id\":1266402446,\"id_str\":\"1266402446\",\"indices\":[3,12]},{\"screen_name\":\"dgraphlabs\",\"name\":\"Dgraph Labs\",\"id\":709510411054256128,\"id_str\":\"709510411054256128\",\"indices\":[21,32]},{\"screen_name\":\"GoSystemsConf\",\"name\":\"Go Systems Conf SF\",\"id\":1321494534988034049,\"id_str\":\"1321494534988034049\",\"indices\":[33,47]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 07:15:53 +0000 2020\",\"id\":1334758306540212225,\"id_str\":\"1334758306540212225\",\"text\":\"Thanks @dgraphlabs @GoSystemsConf for inviting me to speak about \\u201cFinding Needles in HayStacks, and Chaotic Systems\\u2026 https:\\\/\\\/t.co\\\/zHntHR950u\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"dgraphlabs\",\"name\":\"Dgraph Labs\",\"id\":709510411054256128,\"id_str\":\"709510411054256128\",\"indices\":[7,18]},{\"screen_name\":\"GoSystemsConf\",\"name\":\"Go Systems Conf SF\",\"id\":1321494534988034049,\"id_str\":\"1321494534988034049\",\"indices\":[19,33]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/zHntHR950u\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334758306540212225\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":47,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/977006508557914112\\\/HramKr-v_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/977006508557914112\\\/HramKr-v_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15075911\\\/1557173115\",\"profile_link_color\":\"FF69B4\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":869855489093513216,\"id_str\":\"869855489093513216\",\"name\":\"Code Phenix\",\"screen_name\":\"CodePhenix\",\"location\":\"Paris, France\",\"description\":\"Code Phenix: proposer des formations de #devweb en #prison  #ess #asso #reinsertion\\nNos apprenants form\\u00e9s r\\u00e9alisent des prestations professionnelles\",\"url\":\"https:\\\/\\\/t.co\\\/FybFFFUH8N\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/FybFFFUH8N\",\"expanded_url\":\"http:\\\/\\\/codephenix.fr\",\"display_url\":\"codephenix.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":227,\"friends_count\":505,\"listed_count\":2,\"created_at\":\"Wed May 31 09:58:04 +0000 2017\",\"favourites_count\":154,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":106,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 11:23:19 +0000 2020\",\"id\":1336632515222712320,\"id_str\":\"1336632515222712320\",\"text\":\"RT @CausetteLeMag: Dans un environnement carc\\u00e9ral aux opportunit\\u00e9s limit\\u00e9es, l\\u2019association Code Phenix, cr\\u00e9\\u00e9e par Brieuc Le Bars, a lanc\\u00e9 u\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"CausetteLeMag\",\"name\":\"CausetteLeMag\",\"id\":121131549,\"id_str\":\"121131549\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 09:00:21 +0000 2020\",\"id\":1335871759581589506,\"id_str\":\"1335871759581589506\",\"text\":\"Dans un environnement carc\\u00e9ral aux opportunit\\u00e9s limit\\u00e9es, l\\u2019association Code Phenix, cr\\u00e9\\u00e9e par Brieuc Le Bars, a la\\u2026 https:\\\/\\\/t.co\\\/c62TUGxvib\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/c62TUGxvib\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335871759581589506\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/905793393728606208\\\/SN7o-8Mj_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/905793393728606208\\\/SN7o-8Mj_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/869855489093513216\\\/1571840880\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2893360427,\"id_str\":\"2893360427\",\"name\":\"Le Bars Brieuc\",\"screen_name\":\"Le_BarsB\",\"location\":\"Paris, France\",\"description\":\"Cofondateur @CodePhenix \\n#prison #reinsertion #asso #webdev #agenceweb\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":212,\"friends_count\":880,\"listed_count\":21,\"created_at\":\"Wed Nov 26 14:20:49 +0000 2014\",\"favourites_count\":628,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":400,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 11:24:04 +0000 2020\",\"id\":1336632705031737344,\"id_str\":\"1336632705031737344\",\"text\":\"RT @CausetteLeMag: Dans un environnement carc\\u00e9ral aux opportunit\\u00e9s limit\\u00e9es, l\\u2019association Code Phenix, cr\\u00e9\\u00e9e par Brieuc Le Bars, a lanc\\u00e9 u\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"CausetteLeMag\",\"name\":\"CausetteLeMag\",\"id\":121131549,\"id_str\":\"121131549\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 09:00:21 +0000 2020\",\"id\":1335871759581589506,\"id_str\":\"1335871759581589506\",\"text\":\"Dans un environnement carc\\u00e9ral aux opportunit\\u00e9s limit\\u00e9es, l\\u2019association Code Phenix, cr\\u00e9\\u00e9e par Brieuc Le Bars, a la\\u2026 https:\\\/\\\/t.co\\\/c62TUGxvib\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/c62TUGxvib\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335871759581589506\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/589759512434896896\\\/YxobRmRY_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/589759512434896896\\\/YxobRmRY_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2893360427\\\/1581002114\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4891258704,\"id_str\":\"4891258704\",\"name\":\"CoMakery\",\"screen_name\":\"comakery\",\"location\":\"Distributed\",\"description\":\"Gather your tribe and achieve big missions. \\n#community #projectmanagement #freelance #dao\\n#blockchain #distributedteam #remotework\",\"url\":\"https:\\\/\\\/t.co\\\/jtzZhy8GBR\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jtzZhy8GBR\",\"expanded_url\":\"http:\\\/\\\/comakery.com\",\"display_url\":\"comakery.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2191,\"friends_count\":3028,\"listed_count\":54,\"created_at\":\"Thu Feb 11 05:51:22 +0000 2016\",\"favourites_count\":286,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":145,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 14 20:50:29 +0000 2020\",\"id\":1327715550068310016,\"id_str\":\"1327715550068310016\",\"text\":\"RT @OpenCollabathon: If you have missed our live events, do not worry. We have recordings of all the events on our Youtube channel. Do not\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"OpenCollabathon\",\"name\":\"Open Climate Collabathon\",\"id\":1249343480784203778,\"id_str\":\"1249343480784203778\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Nov 14 20:31:30 +0000 2020\",\"id\":1327710771476910081,\"id_str\":\"1327710771476910081\",\"text\":\"If you have missed our live events, do not worry. We have recordings of all the events on our Youtube channel. Do n\\u2026 https:\\\/\\\/t.co\\\/avnSALeIfS\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/avnSALeIfS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1327710771476910081\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1049106967845715969\\\/3DPBmoIb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1049106967845715969\\\/3DPBmoIb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4891258704\\\/1538961709\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1187313742981107712,\"id_str\":\"1187313742981107712\",\"name\":\"PerfBeacon\",\"screen_name\":\"PerfBeacon\",\"location\":\"Sydney, Australia\",\"description\":\"\\u2b50 Measure Page Speed. Automation for Google Lighthouse.\\n\\ud83e\\uddd0 Get tips on what to improve - no coding required.\\n\\ud83d\\udc4b Indie product by @RozenMD\\n\\u2764\\ufe0f #webperf\",\"url\":\"https:\\\/\\\/t.co\\\/FhjbwAetGE\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/FhjbwAetGE\",\"expanded_url\":\"https:\\\/\\\/PerfBeacon.com\",\"display_url\":\"PerfBeacon.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1515,\"friends_count\":872,\"listed_count\":10,\"created_at\":\"Thu Oct 24 10:23:56 +0000 2019\",\"favourites_count\":642,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":223,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 10:39:03 +0000 2020\",\"id\":1335896599424167937,\"id_str\":\"1335896599424167937\",\"text\":\"RT @RozenMD: To encourage pre-orders of my book, I set up a 60% pre-order discount.\\n\\nEnding that tomorrow (8 Dec, GMT timezone).\\n\\nSo today'\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"RozenMD\",\"name\":\"Max Rozen\",\"id\":276480142,\"id_str\":\"276480142\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 10:38:38 +0000 2020\",\"id\":1335896493660618752,\"id_str\":\"1335896493660618752\",\"text\":\"To encourage pre-orders of my book, I set up a 60% pre-order discount.\\n\\nEnding that tomorrow (8 Dec, GMT timezone).\\u2026 https:\\\/\\\/t.co\\\/QgtUp2hzbE\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QgtUp2hzbE\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335896493660618752\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1188214678305984512\\\/eymfnhPp_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1188214678305984512\\\/eymfnhPp_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1187313742981107712\\\/1594937644\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14588785,\"id_str\":\"14588785\",\"name\":\"Shipow\",\"screen_name\":\"Kevin_Granger\",\"location\":\"Paris\",\"description\":\"Data Driven Devsigner @algolia @DocSearch_ - Building faster tools for developers.\",\"url\":\"https:\\\/\\\/t.co\\\/QK9mZ3qXqh\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QK9mZ3qXqh\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/Shipow\",\"display_url\":\"github.com\\\/Shipow\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":16846,\"friends_count\":3119,\"listed_count\":857,\"created_at\":\"Tue Apr 29 18:45:45 +0000 2008\",\"favourites_count\":12686,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":15229,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:02:34 +0000 2020\",\"id\":1336793388025311234,\"id_str\":\"1336793388025311234\",\"text\":\"RT @fbOpenSource: \\ud83e\\udd14  Explain like I\\u2019m Five \\ud83e\\udd14 \\n\\nIn this short blog post, Dmitry (@DmitryVinnik) gives an overview of a project called @Docus\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"fbOpenSource\",\"name\":\"Facebook Open Source\",\"id\":1615618795,\"id_str\":\"1615618795\",\"indices\":[3,16]},{\"screen_name\":\"DmitryVinnik\",\"name\":\"Dmitry Vinnik\",\"id\":855764401,\"id_str\":\"855764401\",\"indices\":[80,93]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Nov 30 20:48:25 +0000 2020\",\"id\":1333513237543829504,\"id_str\":\"1333513237543829504\",\"text\":\"\\ud83e\\udd14  Explain like I\\u2019m Five \\ud83e\\udd14 \\n\\nIn this short blog post, Dmitry (@DmitryVinnik) gives an overview of a project called\\u2026 https:\\\/\\\/t.co\\\/a8rZuIeev7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"DmitryVinnik\",\"name\":\"Dmitry Vinnik\",\"id\":855764401,\"id_str\":\"855764401\",\"indices\":[62,75]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/a8rZuIeev7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333513237543829504\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":10,\"favorite_count\":34,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":10,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1138143115590721536\\\/n-XWR77t_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1138143115590721536\\\/n-XWR77t_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14588785\\\/1556560009\",\"profile_link_color\":\"3369E7\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DBDBDB\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":377900232,\"id_str\":\"377900232\",\"name\":\"Christophe Benz\",\"screen_name\":\"ChristopheBenz\",\"location\":\"Paris, France\",\"description\":\"Developer working on @DBnomics. I like decentralized web. @jailbreak_paris co-founder. Ex-@Etalab\\\/@OpenFisca. Jazz pianist.\",\"url\":\"https:\\\/\\\/t.co\\\/Iphsbzl8F9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Iphsbzl8F9\",\"expanded_url\":\"http:\\\/\\\/cbenz.org\",\"display_url\":\"cbenz.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":335,\"friends_count\":854,\"listed_count\":21,\"created_at\":\"Thu Sep 22 09:21:31 +0000 2011\",\"favourites_count\":1077,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":792,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 19:08:52 +0000 2020\",\"id\":1334212958763823107,\"id_str\":\"1334212958763823107\",\"text\":\"@MurielleRinaldi @edwyplenel @Mediapart @prefpolice Hahaaaaaa vous iriez jusqu'\\u00e0 passer cela sous silence ? Il faud\\u2026 https:\\\/\\\/t.co\\\/0IcXpuEDu8\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"MurielleRinaldi\",\"name\":\"rinaldi murielle\",\"id\":1331587931908304899,\"id_str\":\"1331587931908304899\",\"indices\":[0,16]},{\"screen_name\":\"edwyplenel\",\"name\":\"Edwy Plenel\",\"id\":47399805,\"id_str\":\"47399805\",\"indices\":[17,28]},{\"screen_name\":\"Mediapart\",\"name\":\"Mediapart\",\"id\":19976004,\"id_str\":\"19976004\",\"indices\":[29,39]},{\"screen_name\":\"prefpolice\",\"name\":\"Pr\\u00e9fecture de Police\",\"id\":164713706,\"id_str\":\"164713706\",\"indices\":[40,51]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0IcXpuEDu8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334212958763823107\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1333124857723293696,\"in_reply_to_status_id_str\":\"1333124857723293696\",\"in_reply_to_user_id\":1331587931908304899,\"in_reply_to_user_id_str\":\"1331587931908304899\",\"in_reply_to_screen_name\":\"MurielleRinaldi\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113921655288553475\\\/AWbI1tqe_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113921655288553475\\\/AWbI1tqe_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/377900232\\\/1431461106\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":17055506,\"id_str\":\"17055506\",\"name\":\"Martin Kleppmann\",\"screen_name\":\"martinkl\",\"location\":\"Cambridge, UK\",\"description\":\"Author of @intensivedata, and working on @trvedata research project at @Cambridge_CL. Formerly @rapportive co-founder and @LinkedIn engineer. he\\\/him\",\"url\":\"https:\\\/\\\/t.co\\\/ewCh4lnpMi\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ewCh4lnpMi\",\"expanded_url\":\"https:\\\/\\\/martin.kleppmann.com\",\"display_url\":\"martin.kleppmann.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":30752,\"friends_count\":873,\"listed_count\":721,\"created_at\":\"Wed Oct 29 23:52:09 +0000 2008\",\"favourites_count\":2384,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9900,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 16:38:00 +0000 2020\",\"id\":1336349320778485763,\"id_str\":\"1336349320778485763\",\"text\":\"@frasergeorgew @narayanarjun Indeed. Although the databases community hasn't been very good at helping people under\\u2026 https:\\\/\\\/t.co\\\/eIQZzOXNnL\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"frasergeorgew\",\"name\":\"George Fraser\",\"id\":531829556,\"id_str\":\"531829556\",\"indices\":[0,14]},{\"screen_name\":\"narayanarjun\",\"name\":\"Arjun Narayan\",\"id\":38935899,\"id_str\":\"38935899\",\"indices\":[15,28]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/eIQZzOXNnL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336349320778485763\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/tapbots.com\\\/software\\\/tweetbot\\\/mac\\\" rel=\\\"nofollow\\\">Tweetbot for Mac<\\\/a>\",\"in_reply_to_status_id\":1336348070594846720,\"in_reply_to_status_id_str\":\"1336348070594846720\",\"in_reply_to_user_id\":531829556,\"in_reply_to_user_id_str\":\"531829556\",\"in_reply_to_screen_name\":\"frasergeorgew\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1328001242963058689\\\/Ei18OQpr_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1328001242963058689\\\/Ei18OQpr_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17055506\\\/1398507325\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2636664176,\"id_str\":\"2636664176\",\"name\":\"Data-Intensive Apps\",\"screen_name\":\"intensivedata\",\"location\":\"ISBN 1449373321, in your favorite bookstore\",\"description\":\"An @OReillyMedia book by @martinkl.\",\"url\":\"https:\\\/\\\/t.co\\\/rlJzjxLTG2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/rlJzjxLTG2\",\"expanded_url\":\"http:\\\/\\\/dataintensive.net\",\"display_url\":\"dataintensive.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":6015,\"friends_count\":2,\"listed_count\":88,\"created_at\":\"Sun Jul 13 13:51:08 +0000 2014\",\"favourites_count\":2058,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":147,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 16:29:08 +0000 2020\",\"id\":1334172758457151491,\"id_str\":\"1334172758457151491\",\"text\":\"RT @sadraskol: I recommend you read @intensivedata It's packed with advices on how to grow distributed systems wisely. It's the best read I\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sadraskol\",\"name\":\"Thomas Bracher\",\"id\":3065701701,\"id_str\":\"3065701701\",\"indices\":[3,13]},{\"screen_name\":\"intensivedata\",\"name\":\"Data-Intensive Apps\",\"id\":2636664176,\"id_str\":\"2636664176\",\"indices\":[36,50]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/tapbots.com\\\/software\\\/tweetbot\\\/mac\\\" rel=\\\"nofollow\\\">Tweetbot for Mac<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 02 16:22:32 +0000 2020\",\"id\":1334171097747648516,\"id_str\":\"1334171097747648516\",\"text\":\"I recommend you read @intensivedata It's packed with advices on how to grow distributed systems wisely. It's the be\\u2026 https:\\\/\\\/t.co\\\/oxMHiDckIv\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"intensivedata\",\"name\":\"Data-Intensive Apps\",\"id\":2636664176,\"id_str\":\"2636664176\",\"indices\":[21,35]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/oxMHiDckIv\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334171097747648516\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":48,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/509639031072636929\\\/oheZ68SG_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/509639031072636929\\\/oheZ68SG_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2636664176\\\/1411906304\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":12290752,\"id_str\":\"12290752\",\"name\":\"Julien Kirch \\ud83e\\uddc0\\u2615\\ufe0f\",\"screen_name\":\"archiloque\",\"location\":\"Paris\",\"description\":\"Coder & geek. He\\\/him. Code, architecture & \\ud83d\\udc31 gifs at @Enercoop_SCIC , ex-Octo. Non-tech stuff at @julienkirch\",\"url\":\"https:\\\/\\\/t.co\\\/LXJGgFewIQ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LXJGgFewIQ\",\"expanded_url\":\"https:\\\/\\\/archiloque.net\",\"display_url\":\"archiloque.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":614,\"friends_count\":63,\"listed_count\":59,\"created_at\":\"Tue Jan 15 18:17:28 +0000 2008\",\"favourites_count\":2,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":15219,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:44:02 +0000 2020\",\"id\":1336743425866084358,\"id_str\":\"1336743425866084358\",\"text\":\"RT @0xabad1dea: ... @pandoramusic \\ud83e\\udd28 https:\\\/\\\/t.co\\\/fF774B9118\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"0xabad1dea\",\"name\":\"badidea \\ud83d\\udcab\",\"id\":126030998,\"id_str\":\"126030998\",\"indices\":[3,14]},{\"screen_name\":\"pandoramusic\",\"name\":\"Pandora\",\"id\":5796972,\"id_str\":\"5796972\",\"indices\":[20,33]}],\"urls\":[],\"media\":[{\"id\":1336739303586729984,\"id_str\":\"1336739303586729984\",\"indices\":[36,59],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":339,\"resize\":\"fit\"},\"large\":{\"w\":1316,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":192,\"resize\":\"fit\"}},\"source_status_id\":1336739312545783819,\"source_status_id_str\":\"1336739312545783819\",\"source_user_id\":126030998,\"source_user_id_str\":\"126030998\"}]},\"extended_entities\":{\"media\":[{\"id\":1336739303586729984,\"id_str\":\"1336739303586729984\",\"indices\":[36,59],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":339,\"resize\":\"fit\"},\"large\":{\"w\":1316,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":192,\"resize\":\"fit\"}},\"source_status_id\":1336739312545783819,\"source_status_id_str\":\"1336739312545783819\",\"source_user_id\":126030998,\"source_user_id_str\":\"126030998\"},{\"id\":1336739303712567298,\"id_str\":\"1336739303712567298\",\"indices\":[36,59],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHsXMAIp8yf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHsXMAIp8yf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1788,\"h\":846,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":568,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":322,\"resize\":\"fit\"}},\"source_status_id\":1336739312545783819,\"source_status_id_str\":\"1336739312545783819\",\"source_user_id\":126030998,\"source_user_id_str\":\"126030998\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 18:27:42 +0000 2020\",\"id\":1336739312545783819,\"id_str\":\"1336739312545783819\",\"text\":\"... @pandoramusic \\ud83e\\udd28 https:\\\/\\\/t.co\\\/fF774B9118\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"pandoramusic\",\"name\":\"Pandora\",\"id\":5796972,\"id_str\":\"5796972\",\"indices\":[4,17]}],\"urls\":[],\"media\":[{\"id\":1336739303586729984,\"id_str\":\"1336739303586729984\",\"indices\":[20,43],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":339,\"resize\":\"fit\"},\"large\":{\"w\":1316,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":192,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336739303586729984,\"id_str\":\"1336739303586729984\",\"indices\":[20,43],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHOXEAA_Zmf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":339,\"resize\":\"fit\"},\"large\":{\"w\":1316,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":192,\"resize\":\"fit\"}}},{\"id\":1336739303712567298,\"id_str\":\"1336739303712567298\",\"indices\":[20,43],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHsXMAIp8yf.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0NUHsXMAIp8yf.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/fF774B9118\",\"display_url\":\"pic.twitter.com\\\/fF774B9118\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/0xabad1dea\\\/status\\\/1336739312545783819\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1788,\"h\":846,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":568,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":322,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":39,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"4574D2\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme3\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme3\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3708396639\\\/cd18e1b897eebd606a86b5136255c850_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3708396639\\\/cd18e1b897eebd606a86b5136255c850_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/12290752\\\/1413032132\",\"profile_link_color\":\"24436E\",\"profile_sidebar_border_color\":\"4574D2\",\"profile_sidebar_fill_color\":\"CCD7ED\",\"profile_text_color\":\"4574D2\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":779627,\"id_str\":\"779627\",\"name\":\"Jeremy\",\"screen_name\":\"linuxquestions\",\"location\":\"\",\"description\":\"Founder of https:\\\/\\\/t.co\\\/fdxvYO8ghA, Open Source Programs Lead @datadoghq, Bad Voltage, Linux Fund, ardent but realistic Open Source advocate.\",\"url\":\"http:\\\/\\\/t.co\\\/SXpK3ei9Qv\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/SXpK3ei9Qv\",\"expanded_url\":\"http:\\\/\\\/jeremy.linuxquestions.org\\\/\",\"display_url\":\"jeremy.linuxquestions.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fdxvYO8ghA\",\"expanded_url\":\"http:\\\/\\\/LinuxQuestions.org\",\"display_url\":\"LinuxQuestions.org\",\"indices\":[11,34]}]}},\"protected\":false,\"followers_count\":6343,\"friends_count\":152,\"listed_count\":354,\"created_at\":\"Mon Feb 19 03:02:20 +0000 2007\",\"favourites_count\":0,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5490,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:54:16 +0000 2020\",\"id\":1336715802372935682,\"id_str\":\"1336715802372935682\",\"text\":\"RT @sjvn: Red Hat resets CentOS Linux and users are angry https:\\\/\\\/t.co\\\/7SoadnGsc7 via @ZDNet &amp; @sjvn Many @CentOSProject #Linux users are i\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Linux\",\"indices\":[125,131]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sjvn\",\"name\":\"Steven J. Vaughan-Nichols\",\"id\":11099982,\"id_str\":\"11099982\",\"indices\":[3,8]},{\"screen_name\":\"ZDNet\",\"name\":\"ZDNet\",\"id\":3819701,\"id_str\":\"3819701\",\"indices\":[86,92]},{\"screen_name\":\"sjvn\",\"name\":\"Steven J. Vaughan-Nichols\",\"id\":11099982,\"id_str\":\"11099982\",\"indices\":[99,104]},{\"screen_name\":\"CentOSProject\",\"name\":\"CentOS Project\",\"id\":1483245362,\"id_str\":\"1483245362\",\"indices\":[110,124]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7SoadnGsc7\",\"expanded_url\":\"https:\\\/\\\/zd.net\\\/33WWChc\",\"display_url\":\"zd.net\\\/33WWChc\",\"indices\":[58,81]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 16:00:22 +0000 2020\",\"id\":1336702237129793536,\"id_str\":\"1336702237129793536\",\"text\":\"Red Hat resets CentOS Linux and users are angry https:\\\/\\\/t.co\\\/7SoadnGsc7 via @ZDNet &amp; @sjvn Many @CentOSProject\\u2026 https:\\\/\\\/t.co\\\/6Z2QJi6x7L\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ZDNet\",\"name\":\"ZDNet\",\"id\":3819701,\"id_str\":\"3819701\",\"indices\":[76,82]},{\"screen_name\":\"sjvn\",\"name\":\"Steven J. Vaughan-Nichols\",\"id\":11099982,\"id_str\":\"11099982\",\"indices\":[89,94]},{\"screen_name\":\"CentOSProject\",\"name\":\"CentOS Project\",\"id\":1483245362,\"id_str\":\"1483245362\",\"indices\":[100,114]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7SoadnGsc7\",\"expanded_url\":\"https:\\\/\\\/zd.net\\\/33WWChc\",\"display_url\":\"zd.net\\\/33WWChc\",\"indices\":[48,71]},{\"url\":\"https:\\\/\\\/t.co\\\/6Z2QJi6x7L\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336702237129793536\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"E6E6E6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1108449975044853765\\\/as6mAp1c_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1108449975044853765\\\/as6mAp1c_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/779627\\\/1398830141\",\"profile_link_color\":\"365082\",\"profile_sidebar_border_color\":\"365082\",\"profile_sidebar_fill_color\":\"D0D9FF\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":57027700,\"id_str\":\"57027700\",\"name\":\"\\u03b1\\u03bb\\u03b5x \\u03c0\",\"screen_name\":\"ifesdjeen\",\"location\":\"M\\u00fcnchen \\\/ Lugano\",\"description\":\"Distributed and Storage Systems. Apache Cassandra Committer and PMC member. \\nAuthor of Database Internals book @therealdatabass.\",\"url\":\"https:\\\/\\\/t.co\\\/30e0iTaNNl\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/30e0iTaNNl\",\"expanded_url\":\"http:\\\/\\\/databass.dev\",\"display_url\":\"databass.dev\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7009,\"friends_count\":992,\"listed_count\":194,\"created_at\":\"Wed Jul 15 14:16:58 +0000 2009\",\"favourites_count\":5982,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":14983,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 17:16:01 +0000 2020\",\"id\":1335996498891431938,\"id_str\":\"1335996498891431938\",\"text\":\"RT @miltonlopez_: Oh and I almost forgot about @therealdatabass. This should be fun. https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"miltonlopez_\",\"name\":\"Milton Lopez\",\"id\":1081872397433794560,\"id_str\":\"1081872397433794560\",\"indices\":[3,16]},{\"screen_name\":\"therealdatabass\",\"name\":\"The Real Databass \\ud83d\\udc1f\",\"id\":1103943817164668929,\"id_str\":\"1103943817164668929\",\"indices\":[47,63]}],\"urls\":[],\"media\":[{\"id\":1335265582246211586,\"id_str\":\"1335265582246211586\",\"indices\":[85,108],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"display_url\":\"pic.twitter.com\\\/bMUVBzJBzy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/miltonlopez_\\\/status\\\/1335266474638929921\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1144,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":648,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1952,\"h\":2048,\"resize\":\"fit\"}},\"source_status_id\":1335266474638929921,\"source_status_id_str\":\"1335266474638929921\",\"source_user_id\":1081872397433794560,\"source_user_id_str\":\"1081872397433794560\"}]},\"extended_entities\":{\"media\":[{\"id\":1335265582246211586,\"id_str\":\"1335265582246211586\",\"indices\":[85,108],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"display_url\":\"pic.twitter.com\\\/bMUVBzJBzy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/miltonlopez_\\\/status\\\/1335266474638929921\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1144,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":648,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1952,\"h\":2048,\"resize\":\"fit\"}},\"source_status_id\":1335266474638929921,\"source_status_id_str\":\"1335266474638929921\",\"source_user_id\":1081872397433794560,\"source_user_id_str\":\"1081872397433794560\"}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Dec 05 16:55:10 +0000 2020\",\"id\":1335266474638929921,\"id_str\":\"1335266474638929921\",\"text\":\"Oh and I almost forgot about @therealdatabass. This should be fun. https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"therealdatabass\",\"name\":\"The Real Databass \\ud83d\\udc1f\",\"id\":1103943817164668929,\"id_str\":\"1103943817164668929\",\"indices\":[29,45]}],\"urls\":[],\"media\":[{\"id\":1335265582246211586,\"id_str\":\"1335265582246211586\",\"indices\":[67,90],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"display_url\":\"pic.twitter.com\\\/bMUVBzJBzy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/miltonlopez_\\\/status\\\/1335266474638929921\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1144,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":648,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1952,\"h\":2048,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1335265582246211586,\"id_str\":\"1335265582246211586\",\"indices\":[67,90],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EofQ-PaXMAI7ZBK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/bMUVBzJBzy\",\"display_url\":\"pic.twitter.com\\\/bMUVBzJBzy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/miltonlopez_\\\/status\\\/1335266474638929921\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1144,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":648,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1952,\"h\":2048,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335265496061587456,\"in_reply_to_status_id_str\":\"1335265496061587456\",\"in_reply_to_user_id\":1081872397433794560,\"in_reply_to_user_id_str\":\"1081872397433794560\",\"in_reply_to_screen_name\":\"miltonlopez_\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":12,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103362393764253696\\\/okbmomn0_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103362393764253696\\\/okbmomn0_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/57027700\\\/1512074609\",\"profile_link_color\":\"89C9FA\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1103943817164668929,\"id_str\":\"1103943817164668929\",\"name\":\"The Real Databass \\ud83d\\udc1f\",\"screen_name\":\"therealdatabass\",\"location\":\"\",\"description\":\"Database Internals book by @ifesdjeen, published by @OReillyMedia\\nAmazon: https:\\\/\\\/t.co\\\/jl2zzBYPrk Slack: https:\\\/\\\/t.co\\\/KCyxuKTXJl\\nErrata: https:\\\/\\\/t.co\\\/0nB8nRxygZ\",\"url\":\"https:\\\/\\\/t.co\\\/30e0iTaNNl\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/30e0iTaNNl\",\"expanded_url\":\"http:\\\/\\\/databass.dev\",\"display_url\":\"databass.dev\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jl2zzBYPrk\",\"expanded_url\":\"http:\\\/\\\/amzn.to\\\/33wgs0a\",\"display_url\":\"amzn.to\\\/33wgs0a\",\"indices\":[74,97]},{\"url\":\"https:\\\/\\\/t.co\\\/KCyxuKTXJl\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/joindatabass\",\"display_url\":\"bit.ly\\\/joindatabass\",\"indices\":[105,128]},{\"url\":\"https:\\\/\\\/t.co\\\/0nB8nRxygZ\",\"expanded_url\":\"http:\\\/\\\/databass.dev\\\/errata\",\"display_url\":\"databass.dev\\\/errata\",\"indices\":[137,160]}]}},\"protected\":false,\"followers_count\":2708,\"friends_count\":1,\"listed_count\":28,\"created_at\":\"Fri Mar 08 09:01:31 +0000 2019\",\"favourites_count\":389,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":244,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 15:32:38 +0000 2020\",\"id\":1335970481430802432,\"id_str\":\"1335970481430802432\",\"text\":\"@mat4nier @miltonlopez_ Raynal and Cachin are on a rather theoretical side. I did my best to reference them when it\\u2026 https:\\\/\\\/t.co\\\/Tm4rp6vF9Y\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mat4nier\",\"name\":\"Mat Fournier\",\"id\":522449564,\"id_str\":\"522449564\",\"indices\":[0,9]},{\"screen_name\":\"miltonlopez_\",\"name\":\"Milton Lopez\",\"id\":1081872397433794560,\"id_str\":\"1081872397433794560\",\"indices\":[10,23]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Tm4rp6vF9Y\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335970481430802432\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335276453345124357,\"in_reply_to_status_id_str\":\"1335276453345124357\",\"in_reply_to_user_id\":522449564,\"in_reply_to_user_id_str\":\"522449564\",\"in_reply_to_screen_name\":\"mat4nier\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1216792013074522112\\\/P9Lfb6wJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1216792013074522112\\\/P9Lfb6wJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1103943817164668929\\\/1552036486\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":18847562,\"id_str\":\"18847562\",\"name\":\"Marty Cagan\",\"screen_name\":\"cagan\",\"location\":\"Silicon Valley\",\"description\":\"I'm a partner at Silicon Valley Product Group, former product leader at eBay, Netscape and HP.  Author of INSPIRED and just released EMPOWERED.\",\"url\":\"http:\\\/\\\/t.co\\\/GvZX96qTj5\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/GvZX96qTj5\",\"expanded_url\":\"http:\\\/\\\/www.svpg.com\",\"display_url\":\"svpg.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":35358,\"friends_count\":323,\"listed_count\":1203,\"created_at\":\"Sat Jan 10 21:43:34 +0000 2009\",\"favourites_count\":5734,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1035,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 15:21:27 +0000 2020\",\"id\":1335967664959713281,\"id_str\":\"1335967664959713281\",\"text\":\"@mkuplens unfortunately that's just my normal raspy voice.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mkuplens\",\"name\":\"Martin Kupl\\u0113ns-Ewart\",\"id\":5477082,\"id_str\":\"5477082\",\"indices\":[0,9]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335951866291744771,\"in_reply_to_status_id_str\":\"1335951866291744771\",\"in_reply_to_user_id\":5477082,\"in_reply_to_user_id_str\":\"5477082\",\"in_reply_to_screen_name\":\"mkuplens\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"709397\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/924378143800156162\\\/w8hv-GgI_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/924378143800156162\\\/w8hv-GgI_normal.jpg\",\"profile_link_color\":\"FF3300\",\"profile_sidebar_border_color\":\"86A4A6\",\"profile_sidebar_fill_color\":\"A0C5C7\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":790505751030693888,\"id_str\":\"790505751030693888\",\"name\":\"Four Minute Books\",\"screen_name\":\"fourminutebooks\",\"location\":\"\",\"description\":\"Making you #smarter in 4 minutes or less. 800+ free summaries of the world's best #nonfiction #books.\",\"url\":\"https:\\\/\\\/t.co\\\/GGkLnvTKp3\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GGkLnvTKp3\",\"expanded_url\":\"http:\\\/\\\/fourminutebooks.com\",\"display_url\":\"fourminutebooks.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7587,\"friends_count\":7221,\"listed_count\":92,\"created_at\":\"Mon Oct 24 10:50:32 +0000 2016\",\"favourites_count\":816,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9238,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 13:35:50 +0000 2020\",\"id\":1330142883375144965,\"id_str\":\"1330142883375144965\",\"text\":\"Checking TwitCount - The Twitter Share Counts Alternative https:\\\/\\\/t.co\\\/DMwBHD4Nu7 via @twitcountapp #SocialMedia https:\\\/\\\/t.co\\\/R7JcdG9NTk\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"SocialMedia\",\"indices\":[100,112]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"twitcountapp\",\"name\":\"TwitCount\",\"id\":4416553955,\"id_str\":\"4416553955\",\"indices\":[86,99]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DMwBHD4Nu7\",\"expanded_url\":\"http:\\\/\\\/twitcount.com\",\"display_url\":\"twitcount.com\",\"indices\":[58,81]}],\"media\":[{\"id\":1330142881672212484,\"id_str\":\"1330142881672212484\",\"indices\":[113,136],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EnWd50qWMAQ3XXq.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EnWd50qWMAQ3XXq.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/R7JcdG9NTk\",\"display_url\":\"pic.twitter.com\\\/R7JcdG9NTk\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/fourminutebooks\\\/status\\\/1330142883375144965\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":506,\"h\":406,\"resize\":\"fit\"},\"large\":{\"w\":506,\"h\":406,\"resize\":\"fit\"},\"medium\":{\"w\":506,\"h\":406,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1330142881672212484,\"id_str\":\"1330142881672212484\",\"indices\":[113,136],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EnWd50qWMAQ3XXq.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EnWd50qWMAQ3XXq.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/R7JcdG9NTk\",\"display_url\":\"pic.twitter.com\\\/R7JcdG9NTk\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/fourminutebooks\\\/status\\\/1330142883375144965\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":506,\"h\":406,\"resize\":\"fit\"},\"large\":{\"w\":506,\"h\":406,\"resize\":\"fit\"},\"medium\":{\"w\":506,\"h\":406,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[253,203],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EnWd50qWMAQ3XXq.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitcount.com\\\" rel=\\\"nofollow\\\">TwitCounterApp<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/790506738252414976\\\/htzINA7p_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/790506738252414976\\\/htzINA7p_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/790505751030693888\\\/1593167746\",\"profile_link_color\":\"62AF3C\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2680203972,\"id_str\":\"2680203972\",\"name\":\"JoyPixels\",\"screen_name\":\"joypixels\",\"location\":\"Las Vegas, NV\",\"description\":\"Formerly @emojione.  Designing Unicode compliant emoji since 2014. License our emoji for your amazing project or campaign!  #spreadthejoy\",\"url\":\"https:\\\/\\\/t.co\\\/TtY8nT2Pnq\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TtY8nT2Pnq\",\"expanded_url\":\"http:\\\/\\\/joypixels.com\",\"display_url\":\"joypixels.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":6907,\"friends_count\":5304,\"listed_count\":69,\"created_at\":\"Fri Jul 25 18:42:41 +0000 2014\",\"favourites_count\":3240,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4763,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:53:14 +0000 2020\",\"id\":1336730641988087808,\"id_str\":\"1336730641988087808\",\"text\":\"O Christmas tree, o Christmas tree, you're looking \\ud83d\\udcaf\\ud83d\\udd25 in JoyPixels 6.5! \\ud83c\\udf84\\ud83c\\udf84\\ud83c\\udf84 Coming soon!\\n\\nhttps:\\\/\\\/t.co\\\/4jmfdcIi3z https:\\\/\\\/t.co\\\/xlr2HutA4L\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4jmfdcIi3z\",\"expanded_url\":\"http:\\\/\\\/joypixels.com\\\/profiles\\\/emoji\\\/christmas-tree\",\"display_url\":\"joypixels.com\\\/profiles\\\/emoji\\u2026\",\"indices\":[90,113]}],\"media\":[{\"id\":1336730083436859392,\"id_str\":\"1336730083436859392\",\"indices\":[114,137],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0E7bfVEAAiQnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0E7bfVEAAiQnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/xlr2HutA4L\",\"display_url\":\"pic.twitter.com\\\/xlr2HutA4L\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/joypixels\\\/status\\\/1336730641988087808\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1020,\"h\":570,\"resize\":\"fit\"},\"large\":{\"w\":1020,\"h\":570,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":380,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336730083436859392,\"id_str\":\"1336730083436859392\",\"indices\":[114,137],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0E7bfVEAAiQnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0E7bfVEAAiQnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/xlr2HutA4L\",\"display_url\":\"pic.twitter.com\\\/xlr2HutA4L\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/joypixels\\\/status\\\/1336730641988087808\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1020,\"h\":570,\"resize\":\"fit\"},\"large\":{\"w\":1020,\"h\":570,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":380,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"3B3B3B\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1275441012798713856\\\/aq-jJnF2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1275441012798713856\\\/aq-jJnF2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2680203972\\\/1592927551\",\"profile_link_color\":\"47C6A3\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":69040493,\"id_str\":\"69040493\",\"name\":\"R\\u00e9unionnais du monde\",\"screen_name\":\"Reunionnais\",\"location\":\"Reunion\",\"description\":\"L'actu du site https:\\\/\\\/t.co\\\/S6BuW1e1mm\",\"url\":\"https:\\\/\\\/t.co\\\/DVznikbOMw\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DVznikbOMw\",\"expanded_url\":\"https:\\\/\\\/www.reunionnaisdumonde.com\",\"display_url\":\"reunionnaisdumonde.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/S6BuW1e1mm\",\"expanded_url\":\"http:\\\/\\\/www.reunionnaisdumonde.com\",\"display_url\":\"reunionnaisdumonde.com\",\"indices\":[15,38]}]}},\"protected\":false,\"followers_count\":13524,\"friends_count\":2518,\"listed_count\":206,\"created_at\":\"Wed Aug 26 17:27:01 +0000 2009\",\"favourites_count\":10,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":17087,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 10:39:36 +0000 2020\",\"id\":1336621512678379520,\"id_str\":\"1336621512678379520\",\"text\":\"Je rentre \\u00e0 la R\\u00e9union en tant que chef de cuisine https:\\\/\\\/t.co\\\/KRcNuNSH1c Je m'appelle Jean Patrick Anquibou, Cuis\\u2026 https:\\\/\\\/t.co\\\/3qz6gFMpdO\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KRcNuNSH1c\",\"expanded_url\":\"http:\\\/\\\/zpr.io\\\/HJifE\",\"display_url\":\"zpr.io\\\/HJifE\",\"indices\":[51,74]},{\"url\":\"https:\\\/\\\/t.co\\\/3qz6gFMpdO\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336621512678379520\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/zapier.com\\\/\\\" rel=\\\"nofollow\\\">Zapier.com<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1185525815481643009\\\/K_nUQrPt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1185525815481643009\\\/K_nUQrPt_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/69040493\\\/1571486373\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":553668077,\"id_str\":\"553668077\",\"name\":\"Woody Rousseau\",\"screen_name\":\"WoodyRousseau\",\"location\":\"Paris, France\",\"description\":\"CTO & Cofounder @Sipios_Fintech, providing fintech as a service\",\"url\":\"https:\\\/\\\/t.co\\\/qksC75qZue\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qksC75qZue\",\"expanded_url\":\"http:\\\/\\\/sipios.com\",\"display_url\":\"sipios.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":272,\"friends_count\":188,\"listed_count\":24,\"created_at\":\"Sat Apr 14 16:44:13 +0000 2012\",\"favourites_count\":70,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":161,\"lang\":null,\"status\":{\"created_at\":\"Thu Aug 06 17:56:54 +0000 2020\",\"id\":1291433077688991745,\"id_str\":\"1291433077688991745\",\"text\":\"RT @rubensitbon: I just published an article on the development of omnichannel application, in the world of finance, thanks to React Native\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"rubensitbon\",\"name\":\"sitbon ruben\",\"id\":439079608,\"id_str\":\"439079608\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Aug 06 13:11:11 +0000 2020\",\"id\":1291361178090864641,\"id_str\":\"1291361178090864641\",\"text\":\"I just published an article on the development of omnichannel application, in the world of finance, thanks to React\\u2026 https:\\\/\\\/t.co\\\/Uetoi9unty\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Uetoi9unty\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1291361178090864641\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":7,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":7,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/827573483890757636\\\/8cQNKPCj_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/827573483890757636\\\/8cQNKPCj_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":254107028,\"id_str\":\"254107028\",\"name\":\"TensorFlow\",\"screen_name\":\"TensorFlow\",\"location\":\"Mountain View, CA\",\"description\":\"TensorFlow is a fast, flexible, and scalable open-source machine learning library for research and production.\",\"url\":\"https:\\\/\\\/t.co\\\/gxgTGHp5yO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gxgTGHp5yO\",\"expanded_url\":\"http:\\\/\\\/tensorflow.org\",\"display_url\":\"tensorflow.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":258575,\"friends_count\":99,\"listed_count\":2823,\"created_at\":\"Fri Feb 18 16:21:31 +0000 2011\",\"favourites_count\":212,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":1354,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:34:13 +0000 2020\",\"id\":1336771151599636485,\"id_str\":\"1336771151599636485\",\"text\":\"\\u26a1 Use Machine Learning models in all your web prototypes.\\n\\nJoin @jason_mayes and see how Machine Learning can give\\u2026 https:\\\/\\\/t.co\\\/IelOBT1AOA\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jason_mayes\",\"name\":\"Jason Mayes\",\"id\":108920155,\"id_str\":\"108920155\",\"indices\":[64,76]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IelOBT1AOA\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336771151599636485\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.sprinklr.com\\\" rel=\\\"nofollow\\\">Sprinklr<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":36,\"favorite_count\":190,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103339571977248768\\\/FtFnqC38_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103339571977248768\\\/FtFnqC38_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/254107028\\\/1584226541\",\"profile_link_color\":\"FAB81E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15761045,\"id_str\":\"15761045\",\"name\":\"Babyloan\",\"screen_name\":\"babyloan\",\"location\":\"Paris, France\",\"description\":\"Les petits pr\\u00eats font les grandes histoires ! Rejoignez la 1\\u00e8 communaut\\u00e9 europ\\u00e9enne de pr\\u00eateurs solidaires https:\\\/\\\/t.co\\\/GxQmoK4RXY #Crowdfunding #ESS #Change\",\"url\":\"http:\\\/\\\/t.co\\\/7plFZKHRQN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/7plFZKHRQN\",\"expanded_url\":\"http:\\\/\\\/www.babyloan.org\",\"display_url\":\"babyloan.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GxQmoK4RXY\",\"expanded_url\":\"http:\\\/\\\/Babyloan.org\",\"display_url\":\"Babyloan.org\",\"indices\":[107,130]}]}},\"protected\":false,\"followers_count\":6274,\"friends_count\":2995,\"listed_count\":393,\"created_at\":\"Thu Aug 07 08:07:57 +0000 2008\",\"favourites_count\":2127,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4065,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 25 10:41:10 +0000 2020\",\"id\":1331548476681940992,\"id_str\":\"1331548476681940992\",\"text\":\"\\ud83d\\ude80l'#investissement \\u00e0 impact social, pour un monde plus juste ! rdv sur https:\\\/\\\/t.co\\\/Fxf5LVyRIx https:\\\/\\\/t.co\\\/H4jdThEnwt\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"investissement\",\"indices\":[3,18]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Fxf5LVyRIx\",\"expanded_url\":\"http:\\\/\\\/www.babyloan-impact.org\",\"display_url\":\"babyloan-impact.org\",\"indices\":[71,94]},{\"url\":\"https:\\\/\\\/t.co\\\/H4jdThEnwt\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BabyloanImpact\\\/status\\\/1331161867402797058\",\"display_url\":\"twitter.com\\\/BabyloanImpact\\u2026\",\"indices\":[95,118]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1331161867402797058,\"quoted_status_id_str\":\"1331161867402797058\",\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"BADFCD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113009255223906304\\\/5bJadm4r_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113009255223906304\\\/5bJadm4r_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15761045\\\/1528978007\",\"profile_link_color\":\"89C9FA\",\"profile_sidebar_border_color\":\"F2E195\",\"profile_sidebar_fill_color\":\"FF974C\",\"profile_text_color\":\"0E349C\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2361979572,\"id_str\":\"2361979572\",\"name\":\"Amplitude\",\"screen_name\":\"Amplitude_HQ\",\"location\":\"San Francisco\",\"description\":\"Amplitude is the #1 product intelligence platform.\\n\\nNeed help? Submit a ticket: https:\\\/\\\/t.co\\\/NKjBr6pNhU\",\"url\":\"https:\\\/\\\/t.co\\\/EPzs6h9ola\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EPzs6h9ola\",\"expanded_url\":\"https:\\\/\\\/amplitude.com\\\/\",\"display_url\":\"amplitude.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NKjBr6pNhU\",\"expanded_url\":\"http:\\\/\\\/support.amplitude.com\",\"display_url\":\"support.amplitude.com\",\"indices\":[80,103]}]}},\"protected\":false,\"followers_count\":17239,\"friends_count\":11374,\"listed_count\":911,\"created_at\":\"Wed Feb 26 02:23:27 +0000 2014\",\"favourites_count\":8512,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":8909,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:45:07 +0000 2020\",\"id\":1336728595591532546,\"id_str\":\"1336728595591532546\",\"text\":\"Amplitude ranked #1 in Product Analytics in @g2dotcom! \\n\\nLearn more about our top-rated solution:\\u2026 https:\\\/\\\/t.co\\\/w6bSX3tf8M\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"G2dotcom\",\"name\":\"G2\",\"id\":752028078,\"id_str\":\"752028078\",\"indices\":[44,53]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/w6bSX3tf8M\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336728595591532546\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[99,122]}]},\"source\":\"<a href=\\\"https:\\\/\\\/sproutsocial.com\\\" rel=\\\"nofollow\\\">Sprout Social<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"127AB3\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263183776479211520\\\/hkTF9GLf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263183776479211520\\\/hkTF9GLf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2361979572\\\/1590001456\",\"profile_link_color\":\"F2635F\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":533409964,\"id_str\":\"533409964\",\"name\":\"John Cutler\",\"screen_name\":\"johncutlefish\",\"location\":\"\",\"description\":\"I like the beautiful mess of product development. Head of Education @amplitude_hq | https:\\\/\\\/t.co\\\/YFbTOutryI | https:\\\/\\\/t.co\\\/Yyb7LGGwmw | https:\\\/\\\/t.co\\\/WDld0BTODI\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/YFbTOutryI\",\"expanded_url\":\"http:\\\/\\\/cutlefish.substack.com\",\"display_url\":\"cutlefish.substack.com\",\"indices\":[84,107]},{\"url\":\"https:\\\/\\\/t.co\\\/Yyb7LGGwmw\",\"expanded_url\":\"http:\\\/\\\/cutle.fish\",\"display_url\":\"cutle.fish\",\"indices\":[110,133]},{\"url\":\"https:\\\/\\\/t.co\\\/WDld0BTODI\",\"expanded_url\":\"http:\\\/\\\/amplitude.com\\\/north-star\",\"display_url\":\"amplitude.com\\\/north-star\",\"indices\":[136,159]}]}},\"protected\":false,\"followers_count\":41812,\"friends_count\":14247,\"listed_count\":2285,\"created_at\":\"Thu Mar 22 19:22:32 +0000 2012\",\"favourites_count\":107614,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":57182,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:12:52 +0000 2020\",\"id\":1336780878547013633,\"id_str\":\"1336780878547013633\",\"text\":\"OK. This is really silly but I had a writing breakthrough\\n\\nI leave a placeholder for the examples, and keep writing\\u2026 https:\\\/\\\/t.co\\\/ZyfY8n6ZHj\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZyfY8n6ZHj\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336780878547013633\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":65,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/870169811812106241\\\/z9fdNNjW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/870169811812106241\\\/z9fdNNjW_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/533409964\\\/1454244608\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4597853354,\"id_str\":\"4597853354\",\"name\":\"D3.js\",\"screen_name\":\"d3js_org\",\"location\":\"San Francisco, CA\",\"description\":\"An open-source library for data visualization on the web.\",\"url\":\"https:\\\/\\\/t.co\\\/JnjQlsRSt1\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JnjQlsRSt1\",\"expanded_url\":\"https:\\\/\\\/d3js.org\",\"display_url\":\"d3js.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":16483,\"friends_count\":1,\"listed_count\":423,\"created_at\":\"Fri Dec 18 23:14:29 +0000 2015\",\"favourites_count\":60,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":238,\"lang\":null,\"status\":{\"created_at\":\"Wed Sep 30 18:47:37 +0000 2020\",\"id\":1311377176705462272,\"id_str\":\"1311377176705462272\",\"text\":\"RT @sxywu: \\ud83c\\udf8aMy updated Intro #svg+#d3js course is out @FrontendMasters\\ud83e\\udd73\\n\\nPlease check it out\\u2014I put so much \\ud83d\\udc96\\ud83d\\udcad\\u23f0 into it &amp; am esp proud of al\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"svg\",\"indices\":[29,33]},{\"text\":\"d3js\",\"indices\":[34,39]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sxywu\",\"name\":\"Shirley Wu | BLM\",\"id\":190857410,\"id_str\":\"190857410\",\"indices\":[3,9]},{\"screen_name\":\"FrontendMasters\",\"name\":\"Frontend Masters \\ud83d\\udcbb\\u2728\",\"id\":981309937,\"id_str\":\"981309937\",\"indices\":[54,70]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Sep 29 21:21:52 +0000 2020\",\"id\":1311053605797912576,\"id_str\":\"1311053605797912576\",\"text\":\"\\ud83c\\udf8aMy updated Intro #svg+#d3js course is out @FrontendMasters\\ud83e\\udd73\\n\\nPlease check it out\\u2014I put so much \\ud83d\\udc96\\ud83d\\udcad\\u23f0 into it &amp; am es\\u2026 https:\\\/\\\/t.co\\\/r30eca5rWd\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"svg\",\"indices\":[18,22]},{\"text\":\"d3js\",\"indices\":[23,28]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"FrontendMasters\",\"name\":\"Frontend Masters \\ud83d\\udcbb\\u2728\",\"id\":981309937,\"id_str\":\"981309937\",\"indices\":[43,59]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/r30eca5rWd\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1311053605797912576\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":28,\"favorite_count\":198,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":28,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/875787068621832193\\\/HgKolWB5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/875787068621832193\\\/HgKolWB5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4597853354\\\/1450481604\",\"profile_link_color\":\"F58948\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":43593,\"id_str\":\"43593\",\"name\":\"Mike Bostock\",\"screen_name\":\"mbostock\",\"location\":\"San Francisco, CA\",\"description\":\"Building a better computational medium. Founder @observablehq. Creator @d3js_org. Former @nytgraphics. Pronounced BOSS-tock.\",\"url\":\"https:\\\/\\\/t.co\\\/QK6xnRCSUN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QK6xnRCSUN\",\"expanded_url\":\"https:\\\/\\\/observablehq.com\\\/@mbostock\",\"display_url\":\"observablehq.com\\\/@mbostock\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":62624,\"friends_count\":2,\"listed_count\":2620,\"created_at\":\"Tue Dec 05 21:57:30 +0000 2006\",\"favourites_count\":4700,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":10339,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 19:15:25 +0000 2020\",\"id\":1334214608534401026,\"id_str\":\"1334214608534401026\",\"text\":\"RT @kerryrodden: New @observablehq notebook: why you might (or might not) want to use a radial visualization for hierarchical, time series,\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kerryrodden\",\"name\":\"Kerry Rodden\",\"id\":20555877,\"id_str\":\"20555877\",\"indices\":[3,15]},{\"screen_name\":\"observablehq\",\"name\":\"Observable\",\"id\":905255756789825536,\"id_str\":\"905255756789825536\",\"indices\":[21,34]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 02 19:12:43 +0000 2020\",\"id\":1334213926611939328,\"id_str\":\"1334213926611939328\",\"text\":\"New @observablehq notebook: why you might (or might not) want to use a radial visualization for hierarchical, time\\u2026 https:\\\/\\\/t.co\\\/J7zfPj0K3U\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"observablehq\",\"name\":\"Observable\",\"id\":905255756789825536,\"id_str\":\"905255756789825536\",\"indices\":[4,17]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/J7zfPj0K3U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334213926611939328\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":33,\"favorite_count\":162,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":33,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/883703183297490945\\\/UP4f6j-b_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/883703183297490945\\\/UP4f6j-b_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/43593\\\/1449865705\",\"profile_link_color\":\"3B94D9\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":532923,\"id_str\":\"532923\",\"name\":\"Mathias Bynens\",\"screen_name\":\"mathias\",\"location\":\"Munich, Germany\",\"description\":\"I work on @ChromeDevTools & @v8js at Google and on ECMAScript through TC39. \\u2665 JavaScript, HTML, CSS, HTTP, performance, security, Bash, Unicode, i18n, macOS.\",\"url\":\"https:\\\/\\\/t.co\\\/apeIBWukSN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/apeIBWukSN\",\"expanded_url\":\"https:\\\/\\\/mths.be\\\/\",\"display_url\":\"mths.be\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":70480,\"friends_count\":996,\"listed_count\":2193,\"created_at\":\"Thu Jan 04 11:37:32 +0000 2007\",\"favourites_count\":21190,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":21750,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:09:33 +0000 2020\",\"id\":1336795144272703494,\"id_str\":\"1336795144272703494\",\"text\":\"RT @aerotwist: \\ud83c\\udfa5 For the past year or so I've been working hard on modernizing the DevTools codebase along with @TimvdLippe, @Jack_Franklin\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"aerotwist\",\"name\":\"Paul Lewis\",\"id\":42614508,\"id_str\":\"42614508\",\"indices\":[3,13]},{\"screen_name\":\"TimvdLippe\",\"name\":\"Tim van der Lippe\",\"id\":1098433052,\"id_str\":\"1098433052\",\"indices\":[112,123]},{\"screen_name\":\"Jack_Franklin\",\"name\":\"Jack Franklin\",\"id\":14314572,\"id_str\":\"14314572\",\"indices\":[125,139]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 22:07:11 +0000 2020\",\"id\":1336794548715081730,\"id_str\":\"1336794548715081730\",\"text\":\"\\ud83c\\udfa5 For the past year or so I've been working hard on modernizing the DevTools codebase along with @TimvdLippe,\\u2026 https:\\\/\\\/t.co\\\/6STrIm5eS4\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TimvdLippe\",\"name\":\"Tim van der Lippe\",\"id\":1098433052,\"id_str\":\"1098433052\",\"indices\":[97,108]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6STrIm5eS4\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336794548715081730\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[111,134]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":22,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/952797845534453760\\\/HRhT4f_5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/952797845534453760\\\/HRhT4f_5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/532923\\\/1516940454\",\"profile_link_color\":\"336699\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":1106469559576526848,\"id_str\":\"1106469559576526848\",\"name\":\"Antoine Presles\",\"screen_name\":\"AntoinePresles\",\"location\":\"\",\"description\":\"https:\\\/\\\/t.co\\\/wKwkAU9D2v\\n\\nfilm direction - drawing - 2d animation - motion design - storyboard - compositing - editing - graphic design\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wKwkAU9D2v\",\"expanded_url\":\"https:\\\/\\\/www.instagram.com\\\/antoinepresles\\\/\",\"display_url\":\"instagram.com\\\/antoinepresles\\\/\",\"indices\":[0,23]}]}},\"protected\":false,\"followers_count\":7,\"friends_count\":18,\"listed_count\":0,\"created_at\":\"Fri Mar 15 08:17:54 +0000 2019\",\"favourites_count\":22,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2,\"lang\":null,\"status\":{\"created_at\":\"Thu Jan 23 15:03:01 +0000 2020\",\"id\":1220361297189113858,\"id_str\":\"1220361297189113858\",\"text\":\"@Body_Expert c'est pas le \\\"homo\\\" latin qui veut dire \\\"homme\\\", c'est le \\\"homo\\\" grec qui veut dire \\\"m\\u00eame\\\", comme dans\\u2026 https:\\\/\\\/t.co\\\/QVQE2HVnqb\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Body_Expert\",\"name\":\"Vincent Body Expert\",\"id\":972563256769417218,\"id_str\":\"972563256769417218\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QVQE2HVnqb\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1220361297189113858\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1219322291034763264,\"in_reply_to_status_id_str\":\"1219322291034763264\",\"in_reply_to_user_id\":972563256769417218,\"in_reply_to_user_id_str\":\"972563256769417218\",\"in_reply_to_screen_name\":\"Body_Expert\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1106470183139508225\\\/-KneOdfu_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1106470183139508225\\\/-KneOdfu_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":102937620,\"id_str\":\"102937620\",\"name\":\"Mikhail Vink\",\"screen_name\":\"mikhail_vink\",\"location\":\"Munich, Germany\",\"description\":\"Global Marketing Programs Manager @JetBrains\",\"url\":\"https:\\\/\\\/t.co\\\/JzqP9fP3PO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JzqP9fP3PO\",\"expanded_url\":\"http:\\\/\\\/www.linkedin.com\\\/in\\\/mikhailvink\",\"display_url\":\"linkedin.com\\\/in\\\/mikhailvink\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1200,\"friends_count\":784,\"listed_count\":44,\"created_at\":\"Fri Jan 08 09:30:20 +0000 2010\",\"favourites_count\":819,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6754,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:05:33 +0000 2020\",\"id\":1336763937128394754,\"id_str\":\"1336763937128394754\",\"text\":\"@petertretyakov @jetbrains_space \\u042d\\u0442\\u043e \\u0446\\u0435\\u043d\\u0430 Space \\u043f\\u043b\\u0430\\u043d\\u0430 Enterprise \\u0432 \\u043c\\u0435\\u0441\\u044f\\u0446 \\u043f\\u0440\\u0438 \\u043e\\u043f\\u043b\\u0430\\u0442\\u0435 \\u0437\\u0430 \\u0433\\u043e\\u0434.\\n\\nSpace Enterprise (\\u0432 \\u0433\\u043e\\u2026 https:\\\/\\\/t.co\\\/OecOKGdBld\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"petertretyakov\",\"name\":\"Peter Tretyakov\",\"id\":374414766,\"id_str\":\"374414766\",\"indices\":[0,15]},{\"screen_name\":\"jetbrains_space\",\"name\":\"JetBrains Space\",\"id\":1147150594525863937,\"id_str\":\"1147150594525863937\",\"indices\":[16,32]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OecOKGdBld\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336763937128394754\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336762516110716930,\"in_reply_to_status_id_str\":\"1336762516110716930\",\"in_reply_to_user_id\":374414766,\"in_reply_to_user_id_str\":\"374414766\",\"in_reply_to_screen_name\":\"petertretyakov\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"59BEE4\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/523958764349575168\\\/2yH_zQB9_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/523958764349575168\\\/2yH_zQB9_normal.jpeg\",\"profile_link_color\":\"4BB7DF\",\"profile_sidebar_border_color\":\"4BB7DF\",\"profile_sidebar_fill_color\":\"191F22\",\"profile_text_color\":\"8FCAE0\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":17985670,\"id_str\":\"17985670\",\"name\":\"Cheddar\",\"screen_name\":\"get_cheddar\",\"location\":\"Bloomington, IN\",\"description\":\"Subscription and usage-based billing. Cheddar's modern approach to billing gets you up and running in as little as one day.\",\"url\":\"https:\\\/\\\/t.co\\\/oCpI0kFi1j\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/oCpI0kFi1j\",\"expanded_url\":\"https:\\\/\\\/www.getcheddar.com\\\/\",\"display_url\":\"getcheddar.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2737,\"friends_count\":4255,\"listed_count\":86,\"created_at\":\"Tue Dec 09 06:08:25 +0000 2008\",\"favourites_count\":1275,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1152,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:54:27 +0000 2020\",\"id\":1336685648074387462,\"id_str\":\"1336685648074387462\",\"text\":\"RT @thephillyvoice: Comcast will introduce usage-based billing structure beginning next year, with overage fees for those who exceed the th\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thephillyvoice\",\"name\":\"PhillyVoice\",\"id\":2557592940,\"id_str\":\"2557592940\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Nov 29 05:14:00 +0000 2020\",\"id\":1332915696129503234,\"id_str\":\"1332915696129503234\",\"text\":\"Comcast will introduce usage-based billing structure beginning next year, with overage fees for those who exceed th\\u2026 https:\\\/\\\/t.co\\\/wMO2yqbzMm\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wMO2yqbzMm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332915696129503234\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.socialflow.com\\\" rel=\\\"nofollow\\\">SocialFlow<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"414141\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1004855682317733889\\\/L2xBeyIf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1004855682317733889\\\/L2xBeyIf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17985670\\\/1528220610\",\"profile_link_color\":\"7EA230\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"D0EBDF\",\"profile_text_color\":\"507F6C\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":9532042,\"id_str\":\"9532042\",\"name\":\"Louis Rouffineau\",\"screen_name\":\"LouisRouffineau\",\"location\":\"\\ud83c\\udf0d\",\"description\":\"I help designers and front-end \\\/ back-end developers become #freelancers \\ud83d\\udc68\\u200d\\ud83d\\udcbb #JavaScript #ReactJS #NodeJS\",\"url\":\"https:\\\/\\\/t.co\\\/ZEq4k2PO80\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZEq4k2PO80\",\"expanded_url\":\"https:\\\/\\\/www.jungleprogram.com\",\"display_url\":\"jungleprogram.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2130,\"friends_count\":2389,\"listed_count\":95,\"created_at\":\"Thu Oct 18 23:51:57 +0000 2007\",\"favourites_count\":1634,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":616,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 22:07:04 +0000 2020\",\"id\":1334257805491101696,\"id_str\":\"1334257805491101696\",\"text\":\"@thm_a Amazing job! Congrats \\ud83c\\udf8a\\ud83d\\udc4f\\ud83c\\udffb\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thm_a\",\"name\":\"Thomas Gayno\",\"id\":130622143,\"id_str\":\"130622143\",\"indices\":[0,6]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1334165391204110337,\"in_reply_to_status_id_str\":\"1334165391204110337\",\"in_reply_to_user_id\":130622143,\"in_reply_to_user_id_str\":\"130622143\",\"in_reply_to_screen_name\":\"thm_a\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/886913739437600768\\\/Zc6MxO0G_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/886913739437600768\\\/Zc6MxO0G_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/9532042\\\/1406124744\",\"profile_link_color\":\"FAB81E\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":928961,\"id_str\":\"928961\",\"name\":\"Rasmus Lerdorf\",\"screen_name\":\"rasmus\",\"location\":\"Sunnyvale, CA\",\"description\":\"Breaking the Web\",\"url\":\"https:\\\/\\\/t.co\\\/ZxBCCIqUzT\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZxBCCIqUzT\",\"expanded_url\":\"http:\\\/\\\/toys.lerdorf.com\",\"display_url\":\"toys.lerdorf.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":55489,\"friends_count\":143,\"listed_count\":2318,\"created_at\":\"Sun Mar 11 15:39:19 +0000 2007\",\"favourites_count\":17,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":7089,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 20:42:08 +0000 2020\",\"id\":1335323592578490371,\"id_str\":\"1335323592578490371\",\"text\":\"@mjasay @adafruit @mattklein123 Yup, that pretty much sums up my experience over the past 25+ years. The code is a\\u2026 https:\\\/\\\/t.co\\\/yJ2LKPOsdD\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mjasay\",\"name\":\"Matt Asay\",\"id\":7617702,\"id_str\":\"7617702\",\"indices\":[0,7]},{\"screen_name\":\"adafruit\",\"name\":\"adafruit industries\",\"id\":20731304,\"id_str\":\"20731304\",\"indices\":[8,17]},{\"screen_name\":\"mattklein123\",\"name\":\"Matt Klein\",\"id\":310870197,\"id_str\":\"310870197\",\"indices\":[18,31]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yJ2LKPOsdD\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335323592578490371\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":1335319603816239104,\"in_reply_to_status_id_str\":\"1335319603816239104\",\"in_reply_to_user_id\":7617702,\"in_reply_to_user_id_str\":\"7617702\",\"in_reply_to_screen_name\":\"mjasay\",\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"34e47ddf52a690bc\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/34e47ddf52a690bc.json\",\"place_type\":\"city\",\"name\":\"Richmond Hill\",\"full_name\":\"Richmond Hill, Ontario\",\"country_code\":\"CA\",\"country\":\"Canada\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-79.485633,43.829311],[-79.371118,43.829311],[-79.371118,43.977707],[-79.485633,43.977707]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":11,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/918348833205116928\\\/V9ROYRNJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/918348833205116928\\\/V9ROYRNJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/928961\\\/1507787061\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14554903,\"id_str\":\"14554903\",\"name\":\"Marco Neumann\",\"screen_name\":\"neumarcx\",\"location\":\"New York, Dublin, Berlin\",\"description\":\"Information Scientist with a keen interest in the Semantic Web, Linked Data, Types and Relationships. https:\\\/\\\/t.co\\\/jMXBHQmrZs Community Organizer.\",\"url\":\"https:\\\/\\\/t.co\\\/TMy0wgiGkb\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TMy0wgiGkb\",\"expanded_url\":\"http:\\\/\\\/www.lotico.com\",\"display_url\":\"lotico.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jMXBHQmrZs\",\"expanded_url\":\"http:\\\/\\\/Lotico.com\",\"display_url\":\"Lotico.com\",\"indices\":[102,125]}]}},\"protected\":false,\"followers_count\":1014,\"friends_count\":679,\"listed_count\":87,\"created_at\":\"Sun Apr 27 03:38:02 +0000 2008\",\"favourites_count\":1408,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5129,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:30:09 +0000 2020\",\"id\":1336755028066004992,\"id_str\":\"1336755028066004992\",\"text\":\"@melvincarvalho @aaranged @danbri Well, you see here I would say it's not about payments it's all about trust+payme\\u2026 https:\\\/\\\/t.co\\\/ZRwgNA4UaT\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"melvincarvalho\",\"name\":\"Melvin Carvalho\",\"id\":20066079,\"id_str\":\"20066079\",\"indices\":[0,15]},{\"screen_name\":\"aaranged\",\"name\":\"Aaron Bradley\",\"id\":18143999,\"id_str\":\"18143999\",\"indices\":[16,25]},{\"screen_name\":\"danbri\",\"name\":\"Dan Brickley\",\"id\":1246421,\"id_str\":\"1246421\",\"indices\":[26,33]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZRwgNA4UaT\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336755028066004992\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336753196816076802,\"in_reply_to_status_id_str\":\"1336753196816076802\",\"in_reply_to_user_id\":20066079,\"in_reply_to_user_id_str\":\"20066079\",\"in_reply_to_screen_name\":\"melvincarvalho\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1300466118235222019\\\/Hzd4GZlq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1300466118235222019\\\/Hzd4GZlq_normal.jpg\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"BDDCAD\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2574472352,\"id_str\":\"2574472352\",\"name\":\"Cl\\u00e9ment Viktorovitch\",\"screen_name\":\"clemovitch\",\"location\":\"Paris\",\"description\":\"Docteur en science politique \\u2022 Enseigne la rh\\u00e9torique \\u00e0 @sciencespo \\u2022 Tous les dimanches dans @cliquetv, en clair sur @canalplus !\",\"url\":\"https:\\\/\\\/t.co\\\/OLFvuJi1h9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OLFvuJi1h9\",\"expanded_url\":\"http:\\\/\\\/www.instagram.com\\\/clemovitch\\\/\",\"display_url\":\"instagram.com\\\/clemovitch\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":197886,\"friends_count\":718,\"listed_count\":483,\"created_at\":\"Wed Jun 18 09:06:00 +0000 2014\",\"favourites_count\":468,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":835,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 30 08:07:22 +0000 2020\",\"id\":1333321709869469697,\"id_str\":\"1333321709869469697\",\"text\":\"RT @clemovitch: \\u00ab Sur les violences polici\\u00e8res, @GDarmanin commet, au mieux, un d\\u00e9ni de r\\u00e9alit\\u00e9. Et, au pire, un mensonge \\u00e9hont\\u00e9. \\u00bb\\n\\n#BoxeA\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"clemovitch\",\"name\":\"Cl\\u00e9ment Viktorovitch\",\"id\":2574472352,\"id_str\":\"2574472352\",\"indices\":[3,14]},{\"screen_name\":\"GDarmanin\",\"name\":\"G\\u00e9rald DARMANIN\",\"id\":209825928,\"id_str\":\"209825928\",\"indices\":[48,58]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Nov 29 17:17:02 +0000 2020\",\"id\":1333097650535747586,\"id_str\":\"1333097650535747586\",\"text\":\"\\u00ab Sur les violences polici\\u00e8res, @GDarmanin commet, au mieux, un d\\u00e9ni de r\\u00e9alit\\u00e9. Et, au pire, un mensonge \\u00e9hont\\u00e9. \\u00bb\\u2026 https:\\\/\\\/t.co\\\/T8mGiGPR6O\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"GDarmanin\",\"name\":\"G\\u00e9rald DARMANIN\",\"id\":209825928,\"id_str\":\"209825928\",\"indices\":[32,42]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T8mGiGPR6O\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333097650535747586\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1851,\"favorite_count\":4200,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":1851,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/793597009072627712\\\/ASGWA3tK_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/793597009072627712\\\/ASGWA3tK_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2574472352\\\/1554713316\",\"profile_link_color\":\"C12747\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":987547056,\"id_str\":\"987547056\",\"name\":\"Pahpang\",\"screen_name\":\"CptPahpang\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":23,\"friends_count\":259,\"listed_count\":6,\"created_at\":\"Mon Dec 03 22:31:45 +0000 2012\",\"favourites_count\":666,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":940,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 16:11:43 +0000 2020\",\"id\":1334893153372020742,\"id_str\":\"1334893153372020742\",\"text\":\"RT @LeBondyBlog: \\\"C\\u2019est la manifestation la plus claire et visible de l\\u2019islamophobie d\\u2019\\u00c9tat.\\\" Le CCIF a annonc\\u00e9 vouloir contester sa dissol\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LeBondyBlog\",\"name\":\"Le Bondy Blog\",\"id\":112451555,\"id_str\":\"112451555\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 14:10:19 +0000 2020\",\"id\":1334862603626172419,\"id_str\":\"1334862603626172419\",\"text\":\"\\\"C\\u2019est la manifestation la plus claire et visible de l\\u2019islamophobie d\\u2019\\u00c9tat.\\\" Le CCIF a annonc\\u00e9 vouloir contester sa\\u2026 https:\\\/\\\/t.co\\\/hOABwhx8xq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hOABwhx8xq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334862603626172419\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":169,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1236712800480890880\\\/53GamKQb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1236712800480890880\\\/53GamKQb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/987547056\\\/1583738214\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":46130870,\"id_str\":\"46130870\",\"name\":\"Rich Hickey\",\"screen_name\":\"richhickey\",\"location\":\"\",\"description\":\"\",\"url\":\"http:\\\/\\\/t.co\\\/TXQgTnR4HO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/TXQgTnR4HO\",\"expanded_url\":\"http:\\\/\\\/clojure.org\",\"display_url\":\"clojure.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":29430,\"friends_count\":0,\"listed_count\":1183,\"created_at\":\"Wed Jun 10 14:59:33 +0000 2009\",\"favourites_count\":42,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":497,\"lang\":null,\"status\":{\"created_at\":\"Thu Aug 20 20:57:16 +0000 2020\",\"id\":1296551899412467712,\"id_str\":\"1296551899412467712\",\"text\":\"RT @cognitect: Get Datomic dev-local and REBL, now together and free, in Cognitect\\u2019s dev-tools: https:\\\/\\\/t.co\\\/9q38OTZWRr #clojure #datomic\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"clojure\",\"indices\":[120,128]},{\"text\":\"datomic\",\"indices\":[129,137]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"cognitect\",\"name\":\"Cognitect, Inc.\",\"id\":1631031986,\"id_str\":\"1631031986\",\"indices\":[3,13]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9q38OTZWRr\",\"expanded_url\":\"https:\\\/\\\/cognitect.com\\\/dev-tools\\\/index.html\",\"display_url\":\"cognitect.com\\\/dev-tools\\\/inde\\u2026\",\"indices\":[96,119]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Aug 20 20:56:48 +0000 2020\",\"id\":1296551781007273990,\"id_str\":\"1296551781007273990\",\"text\":\"Get Datomic dev-local and REBL, now together and free, in Cognitect\\u2019s dev-tools: https:\\\/\\\/t.co\\\/9q38OTZWRr #clojure #datomic\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"clojure\",\"indices\":[105,113]},{\"text\":\"datomic\",\"indices\":[114,122]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9q38OTZWRr\",\"expanded_url\":\"https:\\\/\\\/cognitect.com\\\/dev-tools\\\/index.html\",\"display_url\":\"cognitect.com\\\/dev-tools\\\/inde\\u2026\",\"indices\":[81,104]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":51,\"favorite_count\":173,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":51,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2694242404\\\/5b0619220a92d391534b0cd89bf5adc1_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2694242404\\\/5b0619220a92d391534b0cd89bf5adc1_normal.jpeg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":24411298,\"id_str\":\"24411298\",\"name\":\"Martine Devos\",\"screen_name\":\"mmdevos\",\"location\":\"Gent Belgium\",\"description\":\"LeSS Scrum Lean Agile Mentor Reader Traveller Walker Thinker Systems Complexity Freedom All One Planet\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":480,\"friends_count\":329,\"listed_count\":37,\"created_at\":\"Sat Mar 14 18:53:31 +0000 2009\",\"favourites_count\":64,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":216,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 25 08:23:51 +0000 2020\",\"id\":1331513918859194369,\"id_str\":\"1331513918859194369\",\"text\":\"@amnestyvlaanderen https:\\\/\\\/t.co\\\/biKTDHAlHB\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/biKTDHAlHB\",\"expanded_url\":\"https:\\\/\\\/www.instagram.com\\\/p\\\/CH-34TFgYf8\\\/?utm_source=ig_web_button_share_sheet\",\"display_url\":\"instagram.com\\\/p\\\/CH-34TFgYf8\\\/\\u2026\",\"indices\":[19,42]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1368581746\\\/martine_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1368581746\\\/martine_normal.jpg\",\"profile_link_color\":\"1F98C7\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"DAECF4\",\"profile_text_color\":\"663B12\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":20733754,\"id_str\":\"20733754\",\"name\":\"Mr.doob\",\"screen_name\":\"mrdoob\",\"location\":\"London\",\"description\":\"Award losing non creative junior developer.\\nMay or may not have something to do with @threejs_org.\",\"url\":\"https:\\\/\\\/t.co\\\/MGoBww58Re\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/MGoBww58Re\",\"expanded_url\":\"https:\\\/\\\/mrdoob.com\",\"display_url\":\"mrdoob.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":46053,\"friends_count\":425,\"listed_count\":1940,\"created_at\":\"Fri Feb 13 00:03:21 +0000 2009\",\"favourites_count\":16670,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":30719,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:55:20 +0000 2020\",\"id\":1336791566023856129,\"id_str\":\"1336791566023856129\",\"text\":\"@TrevorFSmith @MaxBickley @maxweisel Cyberpunk 2077 releases tomorrow and the internet says the download size is 10\\u2026 https:\\\/\\\/t.co\\\/bQFEfKUzwV\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TrevorFSmith\",\"name\":\"Trevor Flowers, now with less sugar\",\"id\":6940,\"id_str\":\"6940\",\"indices\":[0,13]},{\"screen_name\":\"MaxBickley\",\"name\":\"Max Bickley \\ud83d\\udd15\\ud83d\\udd07\",\"id\":9957012,\"id_str\":\"9957012\",\"indices\":[14,25]},{\"screen_name\":\"maxweisel\",\"name\":\"Max Weisel\",\"id\":9767742,\"id_str\":\"9767742\",\"indices\":[26,36]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bQFEfKUzwV\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336791566023856129\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336786364717649921,\"in_reply_to_status_id_str\":\"1336786364717649921\",\"in_reply_to_user_id\":6940,\"in_reply_to_user_id_str\":\"6940\",\"in_reply_to_screen_name\":\"TrevorFSmith\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"101010\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1264791071038435329\\\/qVBo7vx7_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1264791071038435329\\\/qVBo7vx7_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/20733754\\\/1595105400\",\"profile_link_color\":\"7777FF\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"E3E2DE\",\"profile_text_color\":\"634047\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14552480,\"id_str\":\"14552480\",\"name\":\"Liz Keogh\",\"screen_name\":\"lunivore\",\"location\":\"London\",\"description\":\"Lean\\\/Agile consultant, poet, pattern-hunter, free will sceptic, she\\\/her, #BLM. Tweets are protected because Twitter. https:\\\/\\\/t.co\\\/ZZCzd0cqHE\\u2026\",\"url\":\"https:\\\/\\\/t.co\\\/69adw6rvPC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/69adw6rvPC\",\"expanded_url\":\"http:\\\/\\\/lizkeogh.com\",\"display_url\":\"lizkeogh.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZZCzd0cqHE\",\"expanded_url\":\"http:\\\/\\\/lizkeogh.com\\\/2013\\\/05\\\/01\\\/res\",\"display_url\":\"lizkeogh.com\\\/2013\\\/05\\\/01\\\/res\",\"indices\":[117,140]}]}},\"protected\":true,\"followers_count\":14976,\"friends_count\":1132,\"listed_count\":749,\"created_at\":\"Sat Apr 26 22:35:15 +0000 2008\",\"favourites_count\":5243,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":20303,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:42:51 +0000 2020\",\"id\":1336758225333530626,\"id_str\":\"1336758225333530626\",\"text\":\"@e_hoose @davefarley77 Here you go: https:\\\/\\\/t.co\\\/o5ecYkQcOW\\n\\nWorth looking at @tastapod's original intro for how he\\u2026 https:\\\/\\\/t.co\\\/B0ZqojRnGX\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"e_hoose\",\"name\":\"Eric Hoose\",\"id\":2905440621,\"id_str\":\"2905440621\",\"indices\":[0,8]},{\"screen_name\":\"davefarley77\",\"name\":\"Dave Farley\",\"id\":223055648,\"id_str\":\"223055648\",\"indices\":[9,22]},{\"screen_name\":\"tastapod\",\"name\":\"Daniel Terhorst-North\",\"id\":14526430,\"id_str\":\"14526430\",\"indices\":[78,87]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/o5ecYkQcOW\",\"expanded_url\":\"https:\\\/\\\/lizkeogh.com\\\/2011\\\/06\\\/27\\\/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff\\\/\",\"display_url\":\"lizkeogh.com\\\/2011\\\/06\\\/27\\\/atd\\u2026\",\"indices\":[36,59]},{\"url\":\"https:\\\/\\\/t.co\\\/B0ZqojRnGX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336758225333530626\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336750691507982336,\"in_reply_to_status_id_str\":\"1336750691507982336\",\"in_reply_to_user_id\":2905440621,\"in_reply_to_user_id_str\":\"2905440621\",\"in_reply_to_screen_name\":\"e_hoose\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179412355198984193\\\/UKjVKGvc_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179412355198984193\\\/UKjVKGvc_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14552480\\\/1607013901\",\"profile_link_color\":\"A89490\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":770969519439446016,\"id_str\":\"770969519439446016\",\"name\":\"Microservices, Reactive and Distributed Systems\",\"screen_name\":\"reactivevienna\",\"location\":\"Vienna, Austria\",\"description\":\"We are distributed microreactants, most often circulating around our meetup in Vienna! We are powered by @martinschimak and friends.\",\"url\":\"https:\\\/\\\/t.co\\\/tLp7ZxFd7L\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tLp7ZxFd7L\",\"expanded_url\":\"https:\\\/\\\/www.meetup.com\\\/reactive-vienna\\\/\",\"display_url\":\"meetup.com\\\/reactive-vienn\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":223,\"friends_count\":22,\"listed_count\":4,\"created_at\":\"Wed Aug 31 13:00:32 +0000 2016\",\"favourites_count\":82,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":76,\"lang\":null,\"status\":{\"created_at\":\"Tue Apr 07 13:58:33 +0000 2020\",\"id\":1247524165508157441,\"id_str\":\"1247524165508157441\",\"text\":\"N\\u00e4chster Speaker &amp; Termin in 2 Wochen steht nun fest. Dieses Mal dreht sich alles um Conway's Law und einem Real-Li\\u2026 https:\\\/\\\/t.co\\\/jyM2HCMA67\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jyM2HCMA67\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1247524165508157441\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"de\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/834706326693502976\\\/HG4uW-uz_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/834706326693502976\\\/HG4uW-uz_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/770969519439446016\\\/1559637967\",\"profile_link_color\":\"2EA7B7\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":834733989827055616,\"id_str\":\"834733989827055616\",\"name\":\"Domain-Driven Design Vienna\",\"screen_name\":\"dddvienna\",\"location\":\"Wien, \\u00d6sterreich\",\"description\":\"We are software people seeking to practice, discuss and master all aspects of Domain-Driven Design, powered by @martinschimak and friends.\",\"url\":\"https:\\\/\\\/t.co\\\/2tfP2BYGqK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2tfP2BYGqK\",\"expanded_url\":\"https:\\\/\\\/www.meetup.com\\\/ddd-vienna\\\/\",\"display_url\":\"meetup.com\\\/ddd-vienna\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":212,\"friends_count\":66,\"listed_count\":3,\"created_at\":\"Thu Feb 23 11:57:46 +0000 2017\",\"favourites_count\":111,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":58,\"lang\":null,\"status\":{\"created_at\":\"Wed Oct 28 06:44:38 +0000 2020\",\"id\":1321342090874396672,\"id_str\":\"1321342090874396672\",\"text\":\"And for the guys who want to actively participate and discuss, you can register at Meetup and join via Zoom.\\n\\nhttps:\\\/\\\/t.co\\\/S7dOZeVG3A\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/S7dOZeVG3A\",\"expanded_url\":\"https:\\\/\\\/www.meetup.com\\\/ddd-vienna\\\/events\\\/273843143\\\/\",\"display_url\":\"meetup.com\\\/ddd-vienna\\\/eve\\u2026\",\"indices\":[110,133]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1321342088210993152,\"in_reply_to_status_id_str\":\"1321342088210993152\",\"in_reply_to_user_id\":834733989827055616,\"in_reply_to_user_id_str\":\"834733989827055616\",\"in_reply_to_screen_name\":\"dddvienna\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1002165703825395712\\\/4sKX2gs7_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1002165703825395712\\\/4sKX2gs7_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/834733989827055616\\\/1559640570\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15405165,\"id_str\":\"15405165\",\"name\":\"Martin Schimak \\u2615\",\"screen_name\":\"martinschimak\",\"location\":\"Vienna, Austria\",\"description\":\"I\\u2019m #storystorming your business \\ud83e\\udd1f Modeling #DDDesign Collaboration \\ud83c\\udf61 Processes, Sagas in Distributed Systems \\ud83d\\udc77\\u200d\\u2642\\ufe0f @OBJEKTspektrum @dddvienna @reactivevienna\",\"url\":\"https:\\\/\\\/t.co\\\/jdeSHHIhQs\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jdeSHHIhQs\",\"expanded_url\":\"https:\\\/\\\/plexiti.com\",\"display_url\":\"plexiti.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1881,\"friends_count\":470,\"listed_count\":85,\"created_at\":\"Sat Jul 12 15:58:14 +0000 2008\",\"favourites_count\":2735,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4455,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 26 17:17:34 +0000 2020\",\"id\":1332010620259078147,\"id_str\":\"1332010620259078147\",\"text\":\"RT @PatHelland: I just published a new blog post called 'ACID: My Personal \\\"C\\\" Change'.\\n\\nCheck out: https:\\\/\\\/t.co\\\/V11qm4uOUr.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"PatHelland\",\"name\":\"Pat Helland\",\"id\":426067300,\"id_str\":\"426067300\",\"indices\":[3,14]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V11qm4uOUr\",\"expanded_url\":\"http:\\\/\\\/pathelland.substack.com\",\"display_url\":\"pathelland.substack.com\",\"indices\":[100,123]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Nov 26 16:51:54 +0000 2020\",\"id\":1332004162528165888,\"id_str\":\"1332004162528165888\",\"text\":\"I just published a new blog post called 'ACID: My Personal \\\"C\\\" Change'.\\n\\nCheck out: https:\\\/\\\/t.co\\\/V11qm4uOUr.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V11qm4uOUr\",\"expanded_url\":\"http:\\\/\\\/pathelland.substack.com\",\"display_url\":\"pathelland.substack.com\",\"indices\":[84,107]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":71,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/899738418426634240\\\/OsnEzrtY_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/899738418426634240\\\/OsnEzrtY_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15405165\\\/1560425026\",\"profile_link_color\":\"1F98C7\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"F9E2BE\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":22134579,\"id_str\":\"22134579\",\"name\":\"Anton Kulaga\",\"screen_name\":\"antonkulaga\",\"location\":\"\",\"description\":\"\",\"url\":\"http:\\\/\\\/t.co\\\/tiBS81pGnn\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/tiBS81pGnn\",\"expanded_url\":\"http:\\\/\\\/denigma.de\",\"display_url\":\"denigma.de\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":64,\"friends_count\":533,\"listed_count\":3,\"created_at\":\"Fri Feb 27 12:31:46 +0000 2009\",\"favourites_count\":8,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":33,\"lang\":null,\"status\":{\"created_at\":\"Mon Jun 29 02:14:54 +0000 2020\",\"id\":1277425280550866944,\"id_str\":\"1277425280550866944\",\"text\":\"I completed AI for Medical Diagnosis! Check out my certificate https:\\\/\\\/t.co\\\/uLb7mXOvC3 #Coursera\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Coursera\",\"indices\":[87,96]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/uLb7mXOvC3\",\"expanded_url\":\"https:\\\/\\\/coursera.org\\\/share\\\/378ccb9d7d3463dae69f98c975f4e5a2\",\"display_url\":\"coursera.org\\\/share\\\/378ccb9d\\u2026\",\"indices\":[63,86]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1076993556945031168\\\/GZOPKgRW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1076993556945031168\\\/GZOPKgRW_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":66163,\"id_str\":\"66163\",\"name\":\"George Ornbo\",\"screen_name\":\"shapeshed\",\"location\":\"London, UK\",\"description\":\"80040E5D\",\"url\":\"https:\\\/\\\/t.co\\\/skuJeQVOKe\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/skuJeQVOKe\",\"expanded_url\":\"http:\\\/\\\/shapeshed.com\",\"display_url\":\"shapeshed.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1339,\"friends_count\":364,\"listed_count\":108,\"created_at\":\"Thu Dec 14 06:01:01 +0000 2006\",\"favourites_count\":4369,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6772,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 01 12:19:03 +0000 2020\",\"id\":1333747437119418369,\"id_str\":\"1333747437119418369\",\"text\":\"RT @VitalikButerin: Congrats on the launch all!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"VitalikButerin\",\"name\":\"vitalik.eth\",\"id\":295218901,\"id_str\":\"295218901\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 01 12:08:32 +0000 2020\",\"id\":1333744788823101440,\"id_str\":\"1333744788823101440\",\"text\":\"Congrats on the launch all!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2276,\"favorite_count\":19130,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2276,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"002B36\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1309707232687394816\\\/W1IHsi10_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1309707232687394816\\\/W1IHsi10_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/66163\\\/1601094320\",\"profile_link_color\":\"D33682\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"E3D8C6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1369399388,\"id_str\":\"1369399388\",\"name\":\"DevDocs\",\"screen_name\":\"DevDocs\",\"location\":\"\",\"description\":\"API Documentation Browser\\nhttps:\\\/\\\/t.co\\\/i1CKAfO1aQ\",\"url\":\"https:\\\/\\\/t.co\\\/T6qHbXoY7l\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T6qHbXoY7l\",\"expanded_url\":\"https:\\\/\\\/devdocs.io\",\"display_url\":\"devdocs.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/i1CKAfO1aQ\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/freeCodeCamp\\\/devdocs\",\"display_url\":\"github.com\\\/freeCodeCamp\\\/d\\u2026\",\"indices\":[26,49]}]}},\"protected\":false,\"followers_count\":6585,\"friends_count\":7,\"listed_count\":207,\"created_at\":\"Sun Apr 21 12:01:26 +0000 2013\",\"favourites_count\":33,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1018,\"lang\":null,\"status\":{\"created_at\":\"Mon Jan 13 20:42:06 +0000 2020\",\"id\":1216822752008658945,\"id_str\":\"1216822752008658945\",\"text\":\"RT @jed_fox1: I got my @freeCodeCamp backpack! Looking forward to another year of maintaining @DevDocs. https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jed_fox1\",\"name\":\"Jed Fox\",\"id\":1196538462758944769,\"id_str\":\"1196538462758944769\",\"indices\":[3,12]},{\"screen_name\":\"freeCodeCamp\",\"name\":\"freeCodeCamp.org\",\"id\":1668100142,\"id_str\":\"1668100142\",\"indices\":[23,36]},{\"screen_name\":\"DevDocs\",\"name\":\"DevDocs\",\"id\":1369399388,\"id_str\":\"1369399388\",\"indices\":[94,102]}],\"urls\":[],\"media\":[{\"id\":1215618350195380225,\"id_str\":\"1215618350195380225\",\"indices\":[104,127],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"display_url\":\"pic.twitter.com\\\/qXFtlk5Sun\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/jed_fox1\\\/status\\\/1215618357917036544\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1031,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1760,\"h\":2048,\"resize\":\"fit\"},\"small\":{\"w\":584,\"h\":680,\"resize\":\"fit\"}},\"source_status_id\":1215618357917036544,\"source_status_id_str\":\"1215618357917036544\",\"source_user_id\":1196538462758944769,\"source_user_id_str\":\"1196538462758944769\"}]},\"extended_entities\":{\"media\":[{\"id\":1215618350195380225,\"id_str\":\"1215618350195380225\",\"indices\":[104,127],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"display_url\":\"pic.twitter.com\\\/qXFtlk5Sun\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/jed_fox1\\\/status\\\/1215618357917036544\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1031,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1760,\"h\":2048,\"resize\":\"fit\"},\"small\":{\"w\":584,\"h\":680,\"resize\":\"fit\"}},\"source_status_id\":1215618357917036544,\"source_status_id_str\":\"1215618357917036544\",\"source_user_id\":1196538462758944769,\"source_user_id_str\":\"1196538462758944769\"}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Jan 10 12:56:16 +0000 2020\",\"id\":1215618357917036544,\"id_str\":\"1215618357917036544\",\"text\":\"I got my @freeCodeCamp backpack! Looking forward to another year of maintaining @DevDocs. https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"freeCodeCamp\",\"name\":\"freeCodeCamp.org\",\"id\":1668100142,\"id_str\":\"1668100142\",\"indices\":[9,22]},{\"screen_name\":\"DevDocs\",\"name\":\"DevDocs\",\"id\":1369399388,\"id_str\":\"1369399388\",\"indices\":[80,88]}],\"urls\":[],\"media\":[{\"id\":1215618350195380225,\"id_str\":\"1215618350195380225\",\"indices\":[90,113],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"display_url\":\"pic.twitter.com\\\/qXFtlk5Sun\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/jed_fox1\\\/status\\\/1215618357917036544\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1031,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1760,\"h\":2048,\"resize\":\"fit\"},\"small\":{\"w\":584,\"h\":680,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1215618350195380225,\"id_str\":\"1215618350195380225\",\"indices\":[90,113],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EN6-cunXkAELHWu.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/qXFtlk5Sun\",\"display_url\":\"pic.twitter.com\\\/qXFtlk5Sun\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/jed_fox1\\\/status\\\/1215618357917036544\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1031,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":1760,\"h\":2048,\"resize\":\"fit\"},\"small\":{\"w\":584,\"h\":680,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":26,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/412898406353227776\\\/xx1K8o6w_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/412898406353227776\\\/xx1K8o6w_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":28045502,\"id_str\":\"28045502\",\"name\":\"Strange Loop Conf\",\"screen_name\":\"strangeloop_stl\",\"location\":\"St. Louis, MO\",\"description\":\"Official tweets for the Strange Loop software conference in St. Louis, MO. | Sep 30-Oct 2, 2021 | Sep 22-24, 2022\",\"url\":\"https:\\\/\\\/t.co\\\/s3tfSstOq8\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/s3tfSstOq8\",\"expanded_url\":\"http:\\\/\\\/www.thestrangeloop.com\",\"display_url\":\"thestrangeloop.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":12333,\"friends_count\":18,\"listed_count\":502,\"created_at\":\"Wed Apr 01 03:53:58 +0000 2009\",\"favourites_count\":1063,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9382,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 18 16:06:25 +0000 2020\",\"id\":1329093615197560834,\"id_str\":\"1329093615197560834\",\"text\":\"@bmastenbrook @quephird @cemerick Definitely worth the trip! It's a much different view of the Arch from the mounds...\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"bmastenbrook\",\"name\":\"Brian Mastenbrook\",\"id\":28450964,\"id_str\":\"28450964\",\"indices\":[0,13]},{\"screen_name\":\"quephird\",\"name\":\"DANIELLE IS LOOKING FOR A NEW GIG\",\"id\":92061463,\"id_str\":\"92061463\",\"indices\":[14,23]},{\"screen_name\":\"cemerick\",\"name\":\"Chas (pvp gank paladin) Emerick\",\"id\":15029885,\"id_str\":\"15029885\",\"indices\":[24,33]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1328831726978617344,\"in_reply_to_status_id_str\":\"1328831726978617344\",\"in_reply_to_user_id\":28450964,\"in_reply_to_user_id_str\":\"28450964\",\"in_reply_to_screen_name\":\"bmastenbrook\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1883816998\\\/slsquare_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1883816998\\\/slsquare_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/28045502\\\/1399563330\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"BDDCAD\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2825433945,\"id_str\":\"2825433945\",\"name\":\"Sami Moustachir\",\"screen_name\":\"sa_mous\",\"location\":\"Singapore\",\"description\":\"Pythonista exploring Scala, Consulting Data Scientist\\\/ML Engineer, founder @ https:\\\/\\\/t.co\\\/wqPcUBFcRU #nlp Instructor Data Science @GA\",\"url\":\"https:\\\/\\\/t.co\\\/2n7qdkjCob\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2n7qdkjCob\",\"expanded_url\":\"http:\\\/\\\/samimoustachir.com\",\"display_url\":\"samimoustachir.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wqPcUBFcRU\",\"expanded_url\":\"http:\\\/\\\/biasimpact.org\",\"display_url\":\"biasimpact.org\",\"indices\":[77,100]}]}},\"protected\":false,\"followers_count\":350,\"friends_count\":551,\"listed_count\":52,\"created_at\":\"Sun Oct 12 17:41:43 +0000 2014\",\"favourites_count\":884,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":880,\"lang\":null,\"status\":{\"created_at\":\"Wed Oct 14 02:45:25 +0000 2020\",\"id\":1316208458769653762,\"id_str\":\"1316208458769653762\",\"text\":\"Reason why I have been focusing on improving my infra skills lately.\\nEasy to build baseline models, not that easy t\\u2026 https:\\\/\\\/t.co\\\/gKOcFtAO4q\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gKOcFtAO4q\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1316208458769653762\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1315678863347920896,\"quoted_status_id_str\":\"1315678863347920896\",\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1206758277335224321\\\/eDURMfwa_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1206758277335224321\\\/eDURMfwa_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2825433945\\\/1439742850\",\"profile_link_color\":\"89C9FA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2353377708,\"id_str\":\"2353377708\",\"name\":\"CaliOpen\",\"screen_name\":\"caliopen_org\",\"location\":\"\",\"description\":\"Caliopen is a new multi-messaging platform aimed at improving privacy.\\n\\nTry our Beta release on https:\\\/\\\/t.co\\\/Hlx0uZL3Vy now !\",\"url\":\"http:\\\/\\\/t.co\\\/T3k7oby642\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/T3k7oby642\",\"expanded_url\":\"http:\\\/\\\/www.caliopen.org\\\/\",\"display_url\":\"caliopen.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Hlx0uZL3Vy\",\"expanded_url\":\"https:\\\/\\\/www.caliopen.app\",\"display_url\":\"caliopen.app\",\"indices\":[96,119]}]}},\"protected\":false,\"followers_count\":2019,\"friends_count\":16,\"listed_count\":52,\"created_at\":\"Thu Feb 20 15:07:01 +0000 2014\",\"favourites_count\":49,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":530,\"lang\":null,\"status\":{\"created_at\":\"Fri Nov 27 15:49:40 +0000 2020\",\"id\":1332350889487708160,\"id_str\":\"1332350889487708160\",\"text\":\"@0xdefec7edcafe @_julianoe Caliopen n'a pas d'autre ambition (et c'est d\\u00e9j\\u00e0 beaucoup) que d'aggr\\u00e9ger les conversati\\u2026 https:\\\/\\\/t.co\\\/Ss0ebluwRo\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"0xdefec7edcafe\",\"name\":\"P\\u0442i\\u0442 Po\\u0438e\\u0447 de Falc\\u0473-Fi\\u0438d\\u0446s-\\u042f\\u0473\\u042aer\\u0442-\\u0410z\\u0435r\\u0442y\",\"id\":396567587,\"id_str\":\"396567587\",\"indices\":[0,15]},{\"screen_name\":\"_julianoe\",\"name\":\"Julianoe\",\"id\":1561382576,\"id_str\":\"1561382576\",\"indices\":[16,26]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Ss0ebluwRo\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332350889487708160\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":1332338173347819520,\"in_reply_to_status_id_str\":\"1332338173347819520\",\"in_reply_to_user_id\":396567587,\"in_reply_to_user_id_str\":\"396567587\",\"in_reply_to_screen_name\":\"0xdefec7edcafe\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/473173782631174144\\\/JGPyB6SV_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/473173782631174144\\\/JGPyB6SV_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2353377708\\\/1558971066\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":38167592,\"id_str\":\"38167592\",\"name\":\"Bob Nystrom\",\"screen_name\":\"munificentbob\",\"location\":\"Seattle, WA\",\"description\":\"Programming language developer, ex-game developer, UI nerd, author of \\\"Game Programming Patterns\\\" and \\\"Crafting Interpreters\\\".\",\"url\":\"https:\\\/\\\/t.co\\\/CiuBmohOb2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CiuBmohOb2\",\"expanded_url\":\"http:\\\/\\\/stuffwithstuff.com\\\/\",\"display_url\":\"stuffwithstuff.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":15567,\"friends_count\":1327,\"listed_count\":313,\"created_at\":\"Wed May 06 12:33:46 +0000 2009\",\"favourites_count\":11322,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4850,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:50:37 +0000 2020\",\"id\":1336790379308273664,\"id_str\":\"1336790379308273664\",\"text\":\"@watware @dart_lang I think error handling is mostly orthogonal. A function in Dart that needs to return success or\\u2026 https:\\\/\\\/t.co\\\/AmyvjLPBrZ\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"watware\",\"name\":\"Gregor\",\"id\":38430008,\"id_str\":\"38430008\",\"indices\":[0,8]},{\"screen_name\":\"dart_lang\",\"name\":\"Dart Language\",\"id\":376585411,\"id_str\":\"376585411\",\"indices\":[9,19]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AmyvjLPBrZ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336790379308273664\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336783626621620227,\"in_reply_to_status_id_str\":\"1336783626621620227\",\"in_reply_to_user_id\":38430008,\"in_reply_to_user_id_str\":\"38430008\",\"in_reply_to_screen_name\":\"watware\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"4B4E58\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2382773311\\\/gjespcugqa62mj01qtgt_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2382773311\\\/gjespcugqa62mj01qtgt_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/38167592\\\/1452099235\",\"profile_link_color\":\"2FBAEF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"575A66\",\"profile_text_color\":\"7C889C\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":5710012,\"id_str\":\"5710012\",\"name\":\"Emmanuel de Taillac\",\"screen_name\":\"numa1985\",\"location\":\"Paris\",\"description\":\"Lead dev Symfony @ Maisons du monde \\\/\\\/ Passionn\\u00e9 par Symfony, SEO, UI, CSS, webDesign ... et la photo\",\"url\":\"https:\\\/\\\/t.co\\\/P7CqQgx0dt\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/P7CqQgx0dt\",\"expanded_url\":\"http:\\\/\\\/emmanueldetaillac.fr\",\"display_url\":\"emmanueldetaillac.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":302,\"friends_count\":295,\"listed_count\":24,\"created_at\":\"Wed May 02 10:36:28 +0000 2007\",\"favourites_count\":119,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1445,\"lang\":null,\"status\":{\"created_at\":\"Tue Oct 13 10:58:10 +0000 2020\",\"id\":1315970074742870016,\"id_str\":\"1315970074742870016\",\"text\":\"RT @Velvetshadow: T'es un ancien si t'as connu \\u00e7a https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Velvetshadow\",\"name\":\"Sebastien Defrance\",\"id\":802247,\"id_str\":\"802247\",\"indices\":[3,16]}],\"urls\":[],\"media\":[{\"id\":1315695299629854723,\"id_str\":\"1315695299629854723\",\"indices\":[50,73],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"url\":\"https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"display_url\":\"pic.twitter.com\\\/NYKb7KdORn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Velvetshadow\\\/status\\\/1315695490848174083\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"medium\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}},\"source_status_id\":1315695490848174083,\"source_status_id_str\":\"1315695490848174083\",\"source_user_id\":802247,\"source_user_id_str\":\"802247\"}]},\"extended_entities\":{\"media\":[{\"id\":1315695299629854723,\"id_str\":\"1315695299629854723\",\"indices\":[50,73],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"url\":\"https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"display_url\":\"pic.twitter.com\\\/NYKb7KdORn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Velvetshadow\\\/status\\\/1315695490848174083\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"medium\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}},\"source_status_id\":1315695490848174083,\"source_status_id_str\":\"1315695490848174083\",\"source_user_id\":802247,\"source_user_id_str\":\"802247\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Oct 12 16:47:04 +0000 2020\",\"id\":1315695490848174083,\"id_str\":\"1315695490848174083\",\"text\":\"T'es un ancien si t'as connu \\u00e7a https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1315695299629854723,\"id_str\":\"1315695299629854723\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"url\":\"https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"display_url\":\"pic.twitter.com\\\/NYKb7KdORn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Velvetshadow\\\/status\\\/1315695490848174083\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"medium\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1315695299629854723,\"id_str\":\"1315695299629854723\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EkJJ53cWsAMMeWu.png\",\"url\":\"https:\\\/\\\/t.co\\\/NYKb7KdORn\",\"display_url\":\"pic.twitter.com\\\/NYKb7KdORn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Velvetshadow\\\/status\\\/1315695490848174083\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"medium\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":316,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":45,\"favorite_count\":530,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":45,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/767086012120109061\\\/p-KRqu-2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/767086012120109061\\\/p-KRqu-2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/5710012\\\/1448574667\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1093047524426838016,\"id_str\":\"1093047524426838016\",\"name\":\"Milaka\",\"screen_name\":\"__MILaka__\",\"location\":\"USH(humanity)\",\"description\":\"programmer,#philosophy and #psychoanalysis geek\\nUndoubtedly,every one is a special and unique galaxy .who is my next galaxy?\\n\\n#Sociopath #love\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1097,\"friends_count\":1174,\"listed_count\":1,\"created_at\":\"Wed Feb 06 07:23:32 +0000 2019\",\"favourites_count\":15,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":23,\"lang\":null,\"status\":{\"created_at\":\"Mon Jun 08 17:38:50 +0000 2020\",\"id\":1270047649203466240,\"id_str\":\"1270047649203466240\",\"text\":\"@AliMoeini72 \\u0627\\u0632 \\u0644\\u062d\\u0627\\u0638 \\u0637\\u0628 \\u0633\\u0646\\u062a\\u06cc \\u060c\\u0627\\u0632 \\u0639\\u0648\\u0627\\u0645\\u0644 \\u0645\\u0647\\u0645 \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0628\\u06cc\\u0634 \\u0641\\u0639\\u0627\\u0644\\u06cc \\u06a9\\u0628\\u062f \\u0647\\u0633\\u062a\\u0634\\u060c\\u067e\\u0633 \\u062f\\u0631 \\u0627\\u0628\\u062a\\u062f\\u0627 \\u06a9\\u0628\\u062f \\u0628\\u0627\\u06cc\\u062f \\u067e\\u0627\\u06a9\\u0633\\u0627\\u0632\\u06cc \\u0634\\u062f\\u0647 \\u0648\\u0627\\u0632 \\u0627\\u0645\\u0648\\u0631\\u06cc \\u0645\\u062b\\u0644\\u2026 https:\\\/\\\/t.co\\\/qpUDefaQIu\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AliMoeini72\",\"name\":\"Ali Moeini\",\"id\":1177532887199092736,\"id_str\":\"1177532887199092736\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qpUDefaQIu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1270047649203466240\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1269963916525830146,\"in_reply_to_status_id_str\":\"1269963916525830146\",\"in_reply_to_user_id\":1177532887199092736,\"in_reply_to_user_id_str\":\"1177532887199092736\",\"in_reply_to_screen_name\":\"AliMoeini72\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"fa\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247106415065362432\\\/2zZgBBjf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247106415065362432\\\/2zZgBBjf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1093047524426838016\\\/1569172472\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":833572604,\"id_str\":\"833572604\",\"name\":\"Ahmed Zaghrat\",\"screen_name\":\"ZaghratAhmed\",\"location\":\"Berlin, Germany\",\"description\":\"Full-Stack Web Developer\\n#symfony #php #docker #Angular\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":20,\"friends_count\":224,\"listed_count\":0,\"created_at\":\"Wed Sep 19 15:30:01 +0000 2012\",\"favourites_count\":57,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":23,\"lang\":null,\"status\":{\"created_at\":\"Fri Feb 28 06:27:40 +0000 2020\",\"id\":1233277569790771200,\"id_str\":\"1233277569790771200\",\"text\":\"RT @benawad: &gt; how do you choose certain library over others that can do the same things\\n\\nI look at the getting started code for each + the\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"benawad\",\"name\":\"Ben Awad\",\"id\":840626569743912960,\"id_str\":\"840626569743912960\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Feb 27 19:58:15 +0000 2020\",\"id\":1233119171946389505,\"id_str\":\"1233119171946389505\",\"text\":\"&gt; how do you choose certain library over others that can do the same things\\n\\nI look at the getting started code for\\u2026 https:\\\/\\\/t.co\\\/GqtP8JW5Zg\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GqtP8JW5Zg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1233119171946389505\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[120,143]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":49,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1232393442216546305\\\/OhC7tEZu_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1232393442216546305\\\/OhC7tEZu_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/833572604\\\/1572431563\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14057474,\"id_str\":\"14057474\",\"name\":\"ariseth\",\"screen_name\":\"ariseth\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":114,\"friends_count\":384,\"listed_count\":7,\"created_at\":\"Thu Feb 28 22:06:23 +0000 2008\",\"favourites_count\":241,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":39,\"lang\":null,\"status\":{\"created_at\":\"Tue Jul 07 22:54:30 +0000 2020\",\"id\":1280636338211979264,\"id_str\":\"1280636338211979264\",\"text\":\"@thisismyroom The problem is with your entire DQ paradigm. You\\u2019re assuming they\\u2019re not ordering for one.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thisismyroom\",\"name\":\"John Douglas\",\"id\":22593838,\"id_str\":\"22593838\",\"indices\":[0,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1280289207056031744,\"in_reply_to_status_id_str\":\"1280289207056031744\",\"in_reply_to_user_id\":22593838,\"in_reply_to_user_id_str\":\"22593838\",\"in_reply_to_screen_name\":\"thisismyroom\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/552173289926164480\\\/q175pnQq_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/552173289926164480\\\/q175pnQq_normal.jpeg\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2217041202,\"id_str\":\"2217041202\",\"name\":\"Briefly\",\"screen_name\":\"briefly_tldr\",\"location\":\"San Francisco\",\"description\":\"TL;DR for the web.\\n\\nBriefly is a curation community highlighting the best content for specific communities.\",\"url\":\"https:\\\/\\\/t.co\\\/a3lsy4UndI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/a3lsy4UndI\",\"expanded_url\":\"http:\\\/\\\/briefly.co\",\"display_url\":\"briefly.co\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4196,\"friends_count\":1799,\"listed_count\":240,\"created_at\":\"Wed Nov 27 02:50:51 +0000 2013\",\"favourites_count\":942,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":10396,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:26:50 +0000 2020\",\"id\":1336769294500151297,\"id_str\":\"1336769294500151297\",\"text\":\"@micshasan We've got you. Highlight here: https:\\\/\\\/t.co\\\/np4KTnDnbK\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"micshasan\",\"name\":\"Colin O'Malley\",\"id\":15950682,\"id_str\":\"15950682\",\"indices\":[0,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/np4KTnDnbK\",\"expanded_url\":\"https:\\\/\\\/briefly.co\\\/anchor\\\/From_Twitter\\\/story\\\/us-and-states-say-facebook-illegally-crushed-competition\",\"display_url\":\"briefly.co\\\/anchor\\\/From_Tw\\u2026\",\"indices\":[42,65]}]},\"source\":\"<a href=\\\"https:\\\/\\\/briefly.co\\\" rel=\\\"nofollow\\\">Briefly App<\\\/a>\",\"in_reply_to_status_id\":1336769256889982976,\"in_reply_to_status_id_str\":\"1336769256889982976\",\"in_reply_to_user_id\":15950682,\"in_reply_to_user_id_str\":\"15950682\",\"in_reply_to_screen_name\":\"micshasan\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FCFCFC\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263104101304262656\\\/8fxzXtMc_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263104101304262656\\\/8fxzXtMc_normal.jpg\",\"profile_link_color\":\"ADADAD\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14089153,\"id_str\":\"14089153\",\"name\":\"Fran\\u00e7ois Zaninotto\",\"screen_name\":\"francoisz\",\"location\":\"Nancy, France\",\"description\":\"I'm French, CEO at @marmelab. I tweet twice a day about #sustainability #React #LeanStartup #Leadership #Agile #NodeJs #WebPerf #UX #GraphQL #Security #OSS\",\"url\":\"https:\\\/\\\/t.co\\\/coVxCWbZkF\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/coVxCWbZkF\",\"expanded_url\":\"http:\\\/\\\/marmelab.com\\\/\",\"display_url\":\"marmelab.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":6881,\"friends_count\":227,\"listed_count\":514,\"created_at\":\"Thu Mar 06 15:28:54 +0000 2008\",\"favourites_count\":1056,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7650,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:03:02 +0000 2020\",\"id\":1336672707337998336,\"id_str\":\"1336672707337998336\",\"text\":\"On Choosing Boring Technology: The choices we make early on in a tech project need to focus more on delivering valu\\u2026 https:\\\/\\\/t.co\\\/oQ7ir2k5H7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/oQ7ir2k5H7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336672707337998336\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/554969596101267456\\\/wvlcHVWx_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/554969596101267456\\\/wvlcHVWx_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14089153\\\/1480083887\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17659314,\"id_str\":\"17659314\",\"name\":\"Michel Gotta\",\"screen_name\":\"michelgotta\",\"location\":\"Darmstadt, Hessen\",\"description\":\"Senior Software Developer at @veevasystems Frankfurt\\\/GER. Building awesome UI\\\/Frontend for \\u00bbVeeva Link for Oncology\\u00ab with @reactjs\",\"url\":\"https:\\\/\\\/t.co\\\/7XRKrzDgDe\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7XRKrzDgDe\",\"expanded_url\":\"http:\\\/\\\/michelgotta.de\\\/blog\\\/\",\"display_url\":\"michelgotta.de\\\/blog\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1773,\"friends_count\":820,\"listed_count\":59,\"created_at\":\"Wed Nov 26 20:52:59 +0000 2008\",\"favourites_count\":5925,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5068,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:23:48 +0000 2020\",\"id\":1336708131456512000,\"id_str\":\"1336708131456512000\",\"text\":\"RT @ChloeCondon: DNS stands for Din-Na-Saur, right??? \\ud83e\\udd14\\ud83e\\udd95\\ud83e\\udd96\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ChloeCondon\",\"name\":\"Chloe Condon \\ud83c\\udf80\",\"id\":51529520,\"id_str\":\"51529520\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 02:20:47 +0000 2020\",\"id\":1336495982201065472,\"id_str\":\"1336495982201065472\",\"text\":\"DNS stands for Din-Na-Saur, right??? \\ud83e\\udd14\\ud83e\\udd95\\ud83e\\udd96\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":522,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1218646752598937600\\\/mJO5z4N9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1218646752598937600\\\/mJO5z4N9_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17659314\\\/1548803063\",\"profile_link_color\":\"33CCFF\",\"profile_sidebar_border_color\":\"666666\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":16229867,\"id_str\":\"16229867\",\"name\":\"\\u00c9tienne Garbugli (New \\ud83d\\udcd8 \\ud83d\\udc49 Solving Product)\",\"screen_name\":\"egarbugli\",\"location\":\"Nomadic\",\"description\":\"Entrepreneur | Author of https:\\\/\\\/t.co\\\/3hSP8rDsx9 & https:\\\/\\\/t.co\\\/gjgSoOSe89 | Get the first 6 chapters free \\ud83d\\udc49 https:\\\/\\\/t.co\\\/ZhqysyShS7\\n#b2b #innovation #saas #startups\",\"url\":\"https:\\\/\\\/t.co\\\/GN3iz33FaI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GN3iz33FaI\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/egarbugli\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/egarbugli\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3hSP8rDsx9\",\"expanded_url\":\"http:\\\/\\\/LeanB2Bbook.com\",\"display_url\":\"LeanB2Bbook.com\",\"indices\":[25,48]},{\"url\":\"https:\\\/\\\/t.co\\\/gjgSoOSe89\",\"expanded_url\":\"http:\\\/\\\/SolvingProduct.com\",\"display_url\":\"SolvingProduct.com\",\"indices\":[51,74]},{\"url\":\"https:\\\/\\\/t.co\\\/ZhqysyShS7\",\"expanded_url\":\"http:\\\/\\\/leanb2bbook.com\\\/free-sampler\",\"display_url\":\"leanb2bbook.com\\\/free-sampler\",\"indices\":[109,132]}]}},\"protected\":false,\"followers_count\":12513,\"friends_count\":11404,\"listed_count\":402,\"created_at\":\"Wed Sep 10 23:08:49 +0000 2008\",\"favourites_count\":4038,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":13587,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:45:01 +0000 2020\",\"id\":1336773869097594881,\"id_str\":\"1336773869097594881\",\"text\":\"To make progress and reach product-market fit, it's important to understand user expectations. In this guide, I exp\\u2026 https:\\\/\\\/t.co\\\/AeH8e5WmvB\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AeH8e5WmvB\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336773869097594881\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"43494E\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/747655708699725825\\\/xTdTcoIz_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/747655708699725825\\\/xTdTcoIz_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/16229867\\\/1596082883\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":826490068563062784,\"id_str\":\"826490068563062784\",\"name\":\"Digital Life Collec.\",\"screen_name\":\"tech_we_trust\",\"location\":\"\",\"description\":\"A co-operative, est. May 2017. Technology we trust for the world we want. #trust #privacy #equality #decentralization #diglife\",\"url\":\"https:\\\/\\\/t.co\\\/6vXbC5oZvQ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6vXbC5oZvQ\",\"expanded_url\":\"http:\\\/\\\/www.diglife.com\",\"display_url\":\"diglife.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":935,\"friends_count\":470,\"listed_count\":55,\"created_at\":\"Tue Jan 31 17:59:22 +0000 2017\",\"favourites_count\":290,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":501,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 12:02:17 +0000 2020\",\"id\":1334830379426058240,\"id_str\":\"1334830379426058240\",\"text\":\"RT @mutineering: Hey @resonatecoop and co-operators!   We're invited to a party!  thanks to @MeetdotCoop   \\\"pre-Christmas fun despite COVID\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mutineering\",\"name\":\"NickM\",\"id\":410928427,\"id_str\":\"410928427\",\"indices\":[3,15]},{\"screen_name\":\"resonatecoop\",\"name\":\"Resonate\",\"id\":4163402117,\"id_str\":\"4163402117\",\"indices\":[21,34]},{\"screen_name\":\"MeetdotCoop\",\"name\":\"The Online Meeting Cooperative\",\"id\":1297093233781112833,\"id_str\":\"1297093233781112833\",\"indices\":[92,104]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 02 12:52:35 +0000 2020\",\"id\":1334118265182965760,\"id_str\":\"1334118265182965760\",\"text\":\"Hey @resonatecoop and co-operators!   We're invited to a party!  thanks to @MeetdotCoop   \\\"pre-Christmas fun despit\\u2026 https:\\\/\\\/t.co\\\/otunESslja\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"resonatecoop\",\"name\":\"Resonate\",\"id\":4163402117,\"id_str\":\"4163402117\",\"indices\":[4,17]},{\"screen_name\":\"MeetdotCoop\",\"name\":\"The Online Meeting Cooperative\",\"id\":1297093233781112833,\"id_str\":\"1297093233781112833\",\"indices\":[75,87]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/otunESslja\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334118265182965760\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856454369419636736\\\/E68yZym6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856454369419636736\\\/E68yZym6_normal.jpg\",\"profile_link_color\":\"00B0A0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":284547815,\"id_str\":\"284547815\",\"name\":\"Lo\\u00efc Faugeron\",\"screen_name\":\"LoicFaugeron\",\"location\":\"London, England\",\"description\":\"Test, Code, Refactor and Repeat @constantdotco. I pronounce my name LAW-EEK. He \\\/ his. (previously @epiloic)\",\"url\":\"http:\\\/\\\/t.co\\\/Rq3P0lyEcs\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/Rq3P0lyEcs\",\"expanded_url\":\"http:\\\/\\\/gnugat.github.io\\\/\",\"display_url\":\"gnugat.github.io\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1147,\"friends_count\":920,\"listed_count\":69,\"created_at\":\"Tue Apr 19 13:56:28 +0000 2011\",\"favourites_count\":177,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5065,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 19 16:01:38 +0000 2020\",\"id\":1329454799029407746,\"id_str\":\"1329454799029407746\",\"text\":\"@assertchris tell me about it\\ud83d\\ude22\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"assertchris\",\"name\":\"assertchris\",\"id\":79140061,\"id_str\":\"79140061\",\"indices\":[0,12]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1329453155176882177,\"in_reply_to_status_id_str\":\"1329453155176882177\",\"in_reply_to_user_id\":79140061,\"in_reply_to_user_id_str\":\"79140061\",\"in_reply_to_screen_name\":\"assertchris\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097447417287507968\\\/5dvU0GHz_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097447417287507968\\\/5dvU0GHz_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/284547815\\\/1505117337\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1099893698035208192,\"id_str\":\"1099893698035208192\",\"name\":\"Rachelle Wicks\",\"screen_name\":\"RachelleWicks\",\"location\":\"Australia\",\"description\":\"#ActuallyAutistic PhD Candidate and researcher @Griffith_Uni. Autism, emergent literacy, early learning, mental health.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":159,\"friends_count\":243,\"listed_count\":4,\"created_at\":\"Mon Feb 25 04:47:47 +0000 2019\",\"favourites_count\":1158,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":230,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 11:01:34 +0000 2020\",\"id\":1336264652506816512,\"id_str\":\"1336264652506816512\",\"text\":\"RT @Jess_Paynter: My colleagues at GU are looking for psychologists and any other health professionals who work with children on the autism\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Jess_Paynter\",\"name\":\"Jessica Paynter\",\"id\":3122013080,\"id_str\":\"3122013080\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 08:51:14 +0000 2020\",\"id\":1336231854093975552,\"id_str\":\"1336231854093975552\",\"text\":\"My colleagues at GU are looking for psychologists and any other health professionals who work with children on the\\u2026 https:\\\/\\\/t.co\\\/KF7ozLXBee\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KF7ozLXBee\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336231854093975552\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":8,\"favorite_count\":13,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":8,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1185112978472878082\\\/ShMl4r-A_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1185112978472878082\\\/ShMl4r-A_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1099893698035208192\\\/1551071644\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1050579826422177793,\"id_str\":\"1050579826422177793\",\"name\":\"TEDx Macquarie University\",\"screen_name\":\"MacquarieTedx\",\"location\":\"Macquarie University\",\"description\":\"#tedxmacquarieuniversity \\u270c EVENT info at https:\\\/\\\/t.co\\\/qi23iQTXaU Directors @HossaiGul @zeyadmahmoud\",\"url\":\"https:\\\/\\\/t.co\\\/bonn6bJ6Tg\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bonn6bJ6Tg\",\"expanded_url\":\"http:\\\/\\\/www.tedxmacquarieuni.com\",\"display_url\":\"tedxmacquarieuni.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qi23iQTXaU\",\"expanded_url\":\"http:\\\/\\\/tedxmacquarieuni.com\",\"display_url\":\"tedxmacquarieuni.com\",\"indices\":[41,64]}]}},\"protected\":false,\"followers_count\":478,\"friends_count\":559,\"listed_count\":0,\"created_at\":\"Fri Oct 12 02:52:04 +0000 2018\",\"favourites_count\":3212,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":404,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 23:27:05 +0000 2020\",\"id\":1335727491579748352,\"id_str\":\"1335727491579748352\",\"text\":\"RT @FranklinWomen: Meet @HossaiGul one of our inspiring Members. Hossai believes that support &amp; advice from the FW community was a key reas\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"FranklinWomen\",\"name\":\"Franklin Women\",\"id\":2366193422,\"id_str\":\"2366193422\",\"indices\":[3,17]},{\"screen_name\":\"HossaiGul\",\"name\":\"\\u210d\\ud835\\udd60\\ud835\\udd64\\ud835\\udd64\\ud835\\udd52\\ud835\\udd5a \\ud835\\udd3e\\ud835\\udd66\\ud835\\udd5d\",\"id\":1911015926,\"id_str\":\"1911015926\",\"indices\":[24,34]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Dec 06 22:00:54 +0000 2020\",\"id\":1335705803500576768,\"id_str\":\"1335705803500576768\",\"text\":\"Meet @HossaiGul one of our inspiring Members. Hossai believes that support &amp; advice from the FW community was a key\\u2026 https:\\\/\\\/t.co\\\/oI7YfHp9Hy\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"HossaiGul\",\"name\":\"\\u210d\\ud835\\udd60\\ud835\\udd64\\ud835\\udd64\\ud835\\udd52\\ud835\\udd5a \\ud835\\udd3e\\ud835\\udd66\\ud835\\udd5d\",\"id\":1911015926,\"id_str\":\"1911015926\",\"indices\":[5,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/oI7YfHp9Hy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335705803500576768\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":18,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139325537170546688\\\/OYswyeyi_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139325537170546688\\\/OYswyeyi_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1050579826422177793\\\/1567401740\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17833693,\"id_str\":\"17833693\",\"name\":\"Pascal Borreli\",\"screen_name\":\"pborreli\",\"location\":\"\",\"description\":\"CEO of my life, CTO of my localhost, co-founder of my son and daughter, co-owner of @coopTilleuls,\\nSymfony evangelist, impulsive typo fixer.\",\"url\":\"https:\\\/\\\/t.co\\\/0jKXFNizja\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0jKXFNizja\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/pborreli\",\"display_url\":\"github.com\\\/pborreli\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1467,\"friends_count\":577,\"listed_count\":144,\"created_at\":\"Wed Dec 03 10:25:25 +0000 2008\",\"favourites_count\":5439,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":10421,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 02:16:23 +0000 2020\",\"id\":1334682935581175811,\"id_str\":\"1334682935581175811\",\"text\":\"I've been awarded the \\\"Fifteen-year membership\\\" badge on #SymfonyConnect. https:\\\/\\\/t.co\\\/nQ6nrC52Pw\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"SymfonyConnect\",\"indices\":[57,72]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nQ6nrC52Pw\",\"expanded_url\":\"https:\\\/\\\/connect.symfony.com\\\/profile\\\/pborreli\",\"display_url\":\"connect.symfony.com\\\/profile\\\/pborre\\u2026\",\"indices\":[74,97]}]},\"source\":\"<a href=\\\"https:\\\/\\\/connect.symfony.com\\\/\\\" rel=\\\"nofollow\\\">SymfonyConnect<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1246175222597902338\\\/WSqyJ9_5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1246175222597902338\\\/WSqyJ9_5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17833693\\\/1347988862\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":203242921,\"id_str\":\"203242921\",\"name\":\"Ana Trajkovska\",\"screen_name\":\"AnaTrajkovska_\",\"location\":\"Munich, Bavaria\",\"description\":\"Backend Engineer @vercel\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":849,\"friends_count\":536,\"listed_count\":7,\"created_at\":\"Fri Oct 15 21:11:39 +0000 2010\",\"favourites_count\":3260,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":196,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 16:33:59 +0000 2020\",\"id\":1336348308328083456,\"id_str\":\"1336348308328083456\",\"text\":\"RT @rauchg: https:\\\/\\\/t.co\\\/3NjLwqM8uU is now powered by #nextjs \\ud83d\\udd2e https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"nextjs\",\"indices\":[54,61]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"rauchg\",\"name\":\"Guillermo Rauch\",\"id\":15540222,\"id_str\":\"15540222\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU\",\"expanded_url\":\"http:\\\/\\\/Oracle.com\",\"display_url\":\"Oracle.com\",\"indices\":[12,35]}],\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[64,87],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}},\"source_status_id\":1336348180342951937,\"source_status_id_str\":\"1336348180342951937\",\"source_user_id\":15540222,\"source_user_id_str\":\"15540222\"}]},\"extended_entities\":{\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[64,87],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}},\"source_status_id\":1336348180342951937,\"source_status_id_str\":\"1336348180342951937\",\"source_user_id\":15540222,\"source_user_id_str\":\"15540222\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 16:33:28 +0000 2020\",\"id\":1336348180342951937,\"id_str\":\"1336348180342951937\",\"text\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU is now powered by #nextjs \\ud83d\\udd2e https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"nextjs\",\"indices\":[42,49]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU\",\"expanded_url\":\"http:\\\/\\\/Oracle.com\",\"display_url\":\"Oracle.com\",\"indices\":[0,23]}],\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[52,75],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[52,75],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"840f120ae56c1da7\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/840f120ae56c1da7.json\",\"place_type\":\"city\",\"name\":\"Napa\",\"full_name\":\"Napa, CA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-122.358011,38.243267],[-122.254517,38.243267],[-122.254517,38.350876],[-122.358011,38.350876]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":833,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1250818357055696896\\\/gBNi87ab_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1250818357055696896\\\/gBNi87ab_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/203242921\\\/1573164603\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":724642531,\"id_str\":\"724642531\",\"name\":\"Connor Davis\",\"screen_name\":\"connordav_is\",\"location\":\"Manhattan, NY\",\"description\":\"Staff Software Engineer at @vercel working our Global Edge Network, Former Next.js Team Member\",\"url\":\"https:\\\/\\\/t.co\\\/2Dt252IbsY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2Dt252IbsY\",\"expanded_url\":\"https:\\\/\\\/connordav.is\",\"display_url\":\"connordav.is\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":845,\"friends_count\":63,\"listed_count\":14,\"created_at\":\"Sun Jul 29 21:09:05 +0000 2012\",\"favourites_count\":634,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":248,\"lang\":null,\"status\":{\"created_at\":\"Tue Oct 27 16:22:28 +0000 2020\",\"id\":1321125118165295104,\"id_str\":\"1321125118165295104\",\"text\":\"RT @vercel: Next.js 10 is available today, and you can upgrade with just one command. https:\\\/\\\/t.co\\\/Y7EV9vja3o\\n\\nAutomatically optimize image\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"vercel\",\"name\":\"Vercel\",\"id\":4686835494,\"id_str\":\"4686835494\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Y7EV9vja3o\",\"expanded_url\":\"http:\\\/\\\/nextjs.org\\\/10\",\"display_url\":\"nextjs.org\\\/10\",\"indices\":[86,109]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Oct 27 16:07:05 +0000 2020\",\"id\":1321121250236895239,\"id_str\":\"1321121250236895239\",\"text\":\"Next.js 10 is available today, and you can upgrade with just one command. https:\\\/\\\/t.co\\\/Y7EV9vja3o\\n\\nAutomatically op\\u2026 https:\\\/\\\/t.co\\\/z4Z6CzmaER\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Y7EV9vja3o\",\"expanded_url\":\"http:\\\/\\\/nextjs.org\\\/10\",\"display_url\":\"nextjs.org\\\/10\",\"indices\":[74,97]},{\"url\":\"https:\\\/\\\/t.co\\\/z4Z6CzmaER\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1321121250236895239\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":605,\"favorite_count\":2101,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":605,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1118912388160319488\\\/Oz2rqVWZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1118912388160319488\\\/Oz2rqVWZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/724642531\\\/1555787238\",\"profile_link_color\":\"B30C00\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":102483948,\"id_str\":\"102483948\",\"name\":\"Max Rovensky\",\"screen_name\":\"MaxRovensky\",\"location\":\"Kuala Lumpur\",\"description\":\"All things JavaScript. ex @vercel\",\"url\":\"https:\\\/\\\/t.co\\\/K1RfG3Iket\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/K1RfG3Iket\",\"expanded_url\":\"http:\\\/\\\/fivepointseven.com\",\"display_url\":\"fivepointseven.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1237,\"friends_count\":138,\"listed_count\":19,\"created_at\":\"Wed Jan 06 21:24:43 +0000 2010\",\"favourites_count\":2735,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2664,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 09:08:13 +0000 2020\",\"id\":1336598516265701376,\"id_str\":\"1336598516265701376\",\"text\":\"@nero_awab I'll need to eject for my use case, might as well just do a clean set up \\ud83d\\ude48\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"nero_awab\",\"name\":\"Nero\",\"id\":1249172676620333056,\"id_str\":\"1249172676620333056\",\"indices\":[0,10]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336576052194279425,\"in_reply_to_status_id_str\":\"1336576052194279425\",\"in_reply_to_user_id\":1249172676620333056,\"in_reply_to_user_id_str\":\"1249172676620333056\",\"in_reply_to_screen_name\":\"nero_awab\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1202512907134627840\\\/_-ywvAn9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1202512907134627840\\\/_-ywvAn9_normal.jpg\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":116098751,\"id_str\":\"116098751\",\"name\":\"Joe Cohen\",\"screen_name\":\"joecohens\",\"location\":\"Mexico City\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/xUu6IuJfGX\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xUu6IuJfGX\",\"expanded_url\":\"http:\\\/\\\/joecohens.com\\\/\",\"display_url\":\"joecohens.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1239,\"friends_count\":474,\"listed_count\":39,\"created_at\":\"Sun Feb 21 04:46:32 +0000 2010\",\"favourites_count\":1901,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1186,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 07:42:52 +0000 2020\",\"id\":1336577037776072704,\"id_str\":\"1336577037776072704\",\"text\":\"@zallarak @rauchg @vercel @vercel_status @vercel_support @matheusfrndes @mcsdev Hi Zain, we've increased the limit\\u2026 https:\\\/\\\/t.co\\\/sc7ANZVVa9\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"zallarak\",\"name\":\"zain allarakhia\",\"id\":495195159,\"id_str\":\"495195159\",\"indices\":[0,9]},{\"screen_name\":\"rauchg\",\"name\":\"Guillermo Rauch\",\"id\":15540222,\"id_str\":\"15540222\",\"indices\":[10,17]},{\"screen_name\":\"vercel\",\"name\":\"Vercel\",\"id\":4686835494,\"id_str\":\"4686835494\",\"indices\":[18,25]},{\"screen_name\":\"vercel_status\",\"name\":\"Vercel Status\",\"id\":784353190682759168,\"id_str\":\"784353190682759168\",\"indices\":[26,40]},{\"screen_name\":\"vercel_support\",\"name\":\"Vercel Support\",\"id\":1176246977467748353,\"id_str\":\"1176246977467748353\",\"indices\":[41,56]},{\"screen_name\":\"matheusfrndes\",\"name\":\"Matheus Fernandes\",\"id\":747383997362241536,\"id_str\":\"747383997362241536\",\"indices\":[57,71]},{\"screen_name\":\"mcsdev\",\"name\":\"Matthew Sweeney\",\"id\":950378990086316033,\"id_str\":\"950378990086316033\",\"indices\":[72,79]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/sc7ANZVVa9\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336577037776072704\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336565137369513985,\"in_reply_to_status_id_str\":\"1336565137369513985\",\"in_reply_to_user_id\":495195159,\"in_reply_to_user_id_str\":\"495195159\",\"in_reply_to_screen_name\":\"zallarak\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/728430540714483714\\\/07g1T2kC_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/728430540714483714\\\/07g1T2kC_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/116098751\\\/1509061166\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1487249858,\"id_str\":\"1487249858\",\"name\":\"One Month | Learn to code in 30 days\",\"screen_name\":\"onemonthedu\",\"location\":\"New York City, NY\",\"description\":\"The best online coding courses designed specifically for beginners. Learn Python, SQL, HTML, CSS and JavaScript. Have a question? Email teachers@onemonth.com\",\"url\":\"http:\\\/\\\/t.co\\\/8QCHXEhgiB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/8QCHXEhgiB\",\"expanded_url\":\"http:\\\/\\\/onemonth.com\",\"display_url\":\"onemonth.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7287,\"friends_count\":4829,\"listed_count\":1377,\"created_at\":\"Thu Jun 06 08:41:37 +0000 2013\",\"favourites_count\":4173,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":25810,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:05:22 +0000 2020\",\"id\":1336763893482479622,\"id_str\":\"1336763893482479622\",\"text\":\"RT @onemonthedu: Top 7 Best Coding Courses in San Francisco #sanfrancisco #learntocode @GA @HackReactor @appacademyio @joinhorizons @firsts\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"sanfrancisco\",\"indices\":[60,73]},{\"text\":\"learntocode\",\"indices\":[74,86]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"onemonthedu\",\"name\":\"One Month | Learn to code in 30 days\",\"id\":1487249858,\"id_str\":\"1487249858\",\"indices\":[3,15]},{\"screen_name\":\"GA\",\"name\":\"General Assembly\",\"id\":170393291,\"id_str\":\"170393291\",\"indices\":[87,90]},{\"screen_name\":\"HackReactor\",\"name\":\"Hack Reactor\",\"id\":1102977272,\"id_str\":\"1102977272\",\"indices\":[91,103]},{\"screen_name\":\"appacademyio\",\"name\":\"App Academy\",\"id\":588716514,\"id_str\":\"588716514\",\"indices\":[104,117]},{\"screen_name\":\"joinhorizons\",\"name\":\"Horizons\",\"id\":4819296809,\"id_str\":\"4819296809\",\"indices\":[118,131]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/smarterqueue.com\\\" rel=\\\"nofollow\\\">SmarterQueue<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Sep 16 19:00:51 +0000 2020\",\"id\":1306307077019762688,\"id_str\":\"1306307077019762688\",\"text\":\"Top 7 Best Coding Courses in San Francisco #sanfrancisco #learntocode @GA @HackReactor @appacademyio @joinhorizons\\u2026 https:\\\/\\\/t.co\\\/RXue1b7NzH\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"sanfrancisco\",\"indices\":[43,56]},{\"text\":\"learntocode\",\"indices\":[57,69]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"GA\",\"name\":\"General Assembly\",\"id\":170393291,\"id_str\":\"170393291\",\"indices\":[70,73]},{\"screen_name\":\"HackReactor\",\"name\":\"Hack Reactor\",\"id\":1102977272,\"id_str\":\"1102977272\",\"indices\":[74,86]},{\"screen_name\":\"appacademyio\",\"name\":\"App Academy\",\"id\":588716514,\"id_str\":\"588716514\",\"indices\":[87,100]},{\"screen_name\":\"joinhorizons\",\"name\":\"Horizons\",\"id\":4819296809,\"id_str\":\"4819296809\",\"indices\":[101,114]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/RXue1b7NzH\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1306307077019762688\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/smarterqueue.com\\\" rel=\\\"nofollow\\\">SmarterQueue<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1270700805461508097\\\/eee56SY5_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1270700805461508097\\\/eee56SY5_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1487249858\\\/1552145416\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2893528503,\"id_str\":\"2893528503\",\"name\":\"Cachet\",\"screen_name\":\"cachethq\",\"location\":\"\",\"description\":\"Beautiful & simple service statuses.\\nAn open source #statuspage system, for everyone.\",\"url\":\"https:\\\/\\\/t.co\\\/0GbmG4bHLi\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0GbmG4bHLi\",\"expanded_url\":\"https:\\\/\\\/cachethq.io\",\"display_url\":\"cachethq.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":940,\"friends_count\":127,\"listed_count\":43,\"created_at\":\"Wed Nov 26 17:25:35 +0000 2014\",\"favourites_count\":307,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":995,\"lang\":null,\"status\":{\"created_at\":\"Thu Jan 16 10:59:36 +0000 2020\",\"id\":1217763325888663552,\"id_str\":\"1217763325888663552\",\"text\":\"RT @hostedby20i: We've added 3 new open source software packages to our Linux platform, available to install to your web space in one click\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"hostedby20i\",\"name\":\"20i\",\"id\":3879080063,\"id_str\":\"3879080063\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Jan 16 10:42:09 +0000 2020\",\"id\":1217758935995822081,\"id_str\":\"1217758935995822081\",\"text\":\"We've added 3 new open source software packages to our Linux platform, available to install to your web space in on\\u2026 https:\\\/\\\/t.co\\\/UbWdyRAGak\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UbWdyRAGak\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1217758935995822081\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme19\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme19\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/702914691794931712\\\/AbHdURQV_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/702914691794931712\\\/AbHdURQV_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2893528503\\\/1454152182\",\"profile_link_color\":\"7ED321\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14808856,\"id_str\":\"14808856\",\"name\":\"Steven\",\"screen_name\":\"styfle\",\"location\":\"::1\",\"description\":\"\\ud83d\\udc0fSoftware Shepherd @vercel, \\ud83d\\udee1\\ufe0f@typescript enthusiast, \\ud83d\\udc9a@nodejs contributor, \\u269b\\ufe0f@reactjs user, \\ud83e\\udd35husband, \\u271d\\ufe0fJesus lover. Opinions are my own.\",\"url\":\"https:\\\/\\\/t.co\\\/w1gdCtvuqa\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/w1gdCtvuqa\",\"expanded_url\":\"https:\\\/\\\/styfle.dev\",\"display_url\":\"styfle.dev\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1699,\"friends_count\":1593,\"listed_count\":37,\"created_at\":\"Sat May 17 07:29:06 +0000 2008\",\"favourites_count\":21407,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4838,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:18:37 +0000 2020\",\"id\":1336767227954163715,\"id_str\":\"1336767227954163715\",\"text\":\"@shanselman I doubled checked the national archives and you're right, Nixon did in 1960\\n\\nhttps:\\\/\\\/t.co\\\/p1HVP7xflA\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"shanselman\",\"name\":\"Scott Hanselman\",\"id\":5676102,\"id_str\":\"5676102\",\"indices\":[0,11]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/p1HVP7xflA\",\"expanded_url\":\"https:\\\/\\\/www.archives.gov\\\/electoral-college\\\/1960\",\"display_url\":\"archives.gov\\\/electoral-coll\\u2026\",\"indices\":[89,112]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336757545872965633,\"in_reply_to_status_id_str\":\"1336757545872965633\",\"in_reply_to_user_id\":5676102,\"in_reply_to_user_id_str\":\"5676102\",\"in_reply_to_screen_name\":\"shanselman\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330968883969318916\\\/rekM4n0I_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330968883969318916\\\/rekM4n0I_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14808856\\\/1583966478\",\"profile_link_color\":\"26A69A\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":63400533,\"id_str\":\"63400533\",\"name\":\"Mark Glagola\",\"screen_name\":\"mglagola\",\"location\":\"Chicago\",\"description\":\"Maker of digital things. Engineer @vercel.\",\"url\":\"https:\\\/\\\/t.co\\\/PpZ4GUlTeb\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PpZ4GUlTeb\",\"expanded_url\":\"http:\\\/\\\/mark.gl\",\"display_url\":\"mark.gl\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":313,\"friends_count\":356,\"listed_count\":7,\"created_at\":\"Thu Aug 06 07:00:32 +0000 2009\",\"favourites_count\":260,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":46,\"lang\":null,\"status\":{\"created_at\":\"Tue May 19 14:12:46 +0000 2020\",\"id\":1262748032191229955,\"id_str\":\"1262748032191229955\",\"text\":\"@sambecker @matheusfrndes @vercel @Cloudflare Hey Sam - We require http:\\\/\\\/&lt;domain&gt;\\\/.well-known\\\/acme-challenge\\\/ to n\\u2026 https:\\\/\\\/t.co\\\/nQ4YgWU5O8\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sambecker\",\"name\":\"Sam Becker\",\"id\":78369183,\"id_str\":\"78369183\",\"indices\":[0,10]},{\"screen_name\":\"matheusfrndes\",\"name\":\"Matheus Fernandes\",\"id\":747383997362241536,\"id_str\":\"747383997362241536\",\"indices\":[11,25]},{\"screen_name\":\"vercel\",\"name\":\"Vercel\",\"id\":4686835494,\"id_str\":\"4686835494\",\"indices\":[26,33]},{\"screen_name\":\"Cloudflare\",\"name\":\"Cloudflare\",\"id\":32499999,\"id_str\":\"32499999\",\"indices\":[34,45]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nQ4YgWU5O8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1262748032191229955\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[123,146]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1262600475612008448,\"in_reply_to_status_id_str\":\"1262600475612008448\",\"in_reply_to_user_id\":78369183,\"in_reply_to_user_id_str\":\"78369183\",\"in_reply_to_screen_name\":\"sambecker\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/562475968078417920\\\/ikzBnXHT_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/562475968078417920\\\/ikzBnXHT_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/63400533\\\/1411859896\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":2806189923,\"id_str\":\"2806189923\",\"name\":\"codeRIT\",\"screen_name\":\"codeRIT\",\"location\":\"Rochester, NY\",\"description\":\"#RIT's Hacker Community! We strive to attend every #hackathon possible and make cool stuff along the way! Go @RITtigers! Hackin\\u2019 bricks since 2014 \\ud83d\\ude00\",\"url\":\"https:\\\/\\\/t.co\\\/3UZMXkwGBu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3UZMXkwGBu\",\"expanded_url\":\"http:\\\/\\\/coderit.org\",\"display_url\":\"coderit.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":355,\"friends_count\":165,\"listed_count\":1,\"created_at\":\"Sat Oct 04 20:36:31 +0000 2014\",\"favourites_count\":487,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":647,\"lang\":null,\"status\":{\"created_at\":\"Fri May 08 21:24:21 +0000 2020\",\"id\":1258870378425917447,\"id_str\":\"1258870378425917447\",\"text\":\"Congratulations to the @RITtigers class of 2020! We also want to thank all our new codeRIT alumni as they start the\\u2026 https:\\\/\\\/t.co\\\/nSz4c8xjAp\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"RITtigers\",\"name\":\"RIT\",\"id\":145363200,\"id_str\":\"145363200\",\"indices\":[23,33]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nSz4c8xjAp\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1258870378425917447\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/518502500127621121\\\/Kywhc2W6_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/518502500127621121\\\/Kywhc2W6_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2806189923\\\/1412455244\",\"profile_link_color\":\"344353\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2972150189,\"id_str\":\"2972150189\",\"name\":\"BrickHack\",\"screen_name\":\"brickhackrit\",\"location\":\"Rochester, NY\",\"description\":\"RIT's premiere collegiate hackathon continues on Feb 8, 2020! Join the 600 designers and coders sinking 24 hours into building and creating. A @codeRIT event.\",\"url\":\"https:\\\/\\\/t.co\\\/45yAeI5FJm\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/45yAeI5FJm\",\"expanded_url\":\"http:\\\/\\\/brickhack.io\",\"display_url\":\"brickhack.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":350,\"friends_count\":18,\"listed_count\":6,\"created_at\":\"Sat Jan 10 22:18:04 +0000 2015\",\"favourites_count\":110,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":199,\"lang\":null,\"status\":{\"created_at\":\"Fri May 08 21:26:10 +0000 2020\",\"id\":1258870834745221120,\"id_str\":\"1258870834745221120\",\"text\":\"\\ud83e\\uddf1\\ud83d\\udc05\\u2764\\ufe0f https:\\\/\\\/t.co\\\/wCJn95CPY9\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wCJn95CPY9\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/codeRIT\\\/status\\\/1258870378425917447\",\"display_url\":\"twitter.com\\\/codeRIT\\\/status\\u2026\",\"indices\":[5,28]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1258870378425917447,\"quoted_status_id_str\":\"1258870378425917447\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F9F6F3\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1183928483833139202\\\/Q-YL_sMr_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1183928483833139202\\\/Q-YL_sMr_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2972150189\\\/1572736791\",\"profile_link_color\":\"FA743E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":921007607782916097,\"id_str\":\"921007607782916097\",\"name\":\"Awesome\",\"screen_name\":\"awesome__re\",\"location\":\"\",\"description\":\"Community of curated awesome lists on GitHub. By @sindresorhus.\",\"url\":\"https:\\\/\\\/t.co\\\/DKMu9VhdxC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DKMu9VhdxC\",\"expanded_url\":\"https:\\\/\\\/awesome.re\",\"display_url\":\"awesome.re\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3303,\"friends_count\":2,\"listed_count\":40,\"created_at\":\"Thu Oct 19 13:38:20 +0000 2017\",\"favourites_count\":3,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":311,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 14:34:00 +0000 2020\",\"id\":1334506174713126913,\"id_str\":\"1334506174713126913\",\"text\":\"RT @awesome__re: Awesome Social Enterprise\\nBuilding an organization primarily focused on social impact that is at least partially self-fund\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"awesome__re\",\"name\":\"Awesome\",\"id\":921007607782916097,\"id_str\":\"921007607782916097\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Oct 13 20:33:44 +0000 2020\",\"id\":1316114921944477696,\"id_str\":\"1316114921944477696\",\"text\":\"Awesome Social Enterprise\\nBuilding an organization primarily focused on social impact that is at least partially se\\u2026 https:\\\/\\\/t.co\\\/J6M5m7G5eK\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/J6M5m7G5eK\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1316114921944477696\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/921015542390984704\\\/RL5xDxIl_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/921015542390984704\\\/RL5xDxIl_normal.jpg\",\"profile_link_color\":\"FA63A8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":170686450,\"id_str\":\"170686450\",\"name\":\"Sindre Sorhus\",\"screen_name\":\"sindresorhus\",\"location\":\"\",\"description\":\"Full-time open-sourcerer. Wants more empathy & kindness in OSS. \\u2764\\ufe0f Swift. Makes macOS apps, CLI tools, npm packages. Made @awesome__re. Follow: @sindre_gh_repos\",\"url\":\"https:\\\/\\\/t.co\\\/Po2lqJEFOu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Po2lqJEFOu\",\"expanded_url\":\"https:\\\/\\\/sindresorhus.com\",\"display_url\":\"sindresorhus.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":47950,\"friends_count\":445,\"listed_count\":1345,\"created_at\":\"Sun Jul 25 13:48:23 +0000 2010\",\"favourites_count\":14462,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":17333,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 10:17:57 +0000 2020\",\"id\":1336616062230568960,\"id_str\":\"1336616062230568960\",\"text\":\"I really like the sound quality of the original HomePod, but Siri continues to be close to unusable. \\u201cHey Siri, pla\\u2026 https:\\\/\\\/t.co\\\/UvJ9AjuMrU\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UvJ9AjuMrU\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336616062230568960\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":25,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FAFAFA\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1131626244745834497\\\/0SzJoz_J_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1131626244745834497\\\/0SzJoz_J_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/170686450\\\/1607490003\",\"profile_link_color\":\"7F5CE3\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1735,\"id_str\":\"1735\",\"name\":\"Mark Wubben\",\"screen_name\":\"novemberborn\",\"location\":\"Haarlem, The Netherlands\",\"description\":\"Humanist \\u222a Technologist. \\u2661 working with the web. Occasional Dutch speaker. @ava__js sustainer. Product engineer @monolith_web3. He\\\/his. \\ud83c\\uddea\\ud83c\\uddfa\\ud83c\\uddf3\\ud83c\\uddf1\\ud83c\\uddec\\ud83c\\udde7\",\"url\":\"https:\\\/\\\/t.co\\\/Sn4FGlGcmp\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Sn4FGlGcmp\",\"expanded_url\":\"https:\\\/\\\/novemberborn.net\",\"display_url\":\"novemberborn.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1380,\"friends_count\":315,\"listed_count\":106,\"created_at\":\"Mon Jul 17 03:42:56 +0000 2006\",\"favourites_count\":358,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":7296,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 17:30:30 +0000 2020\",\"id\":1336362529543565312,\"id_str\":\"1336362529543565312\",\"text\":\"Looking forward to it! https:\\\/\\\/t.co\\\/ZWKVMBElz7\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZWKVMBElz7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TestJSSummit\\\/status\\\/1336218961986260997\",\"display_url\":\"twitter.com\\\/TestJSSummit\\\/s\\u2026\",\"indices\":[23,46]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336218961986260997,\"quoted_status_id_str\":\"1336218961986260997\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/954394461932572672\\\/-9WM2RiL_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/954394461932572672\\\/-9WM2RiL_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1735\\\/1532465963\",\"profile_link_color\":\"EC2965\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EEEEEE\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1031872250876768256,\"id_str\":\"1031872250876768256\",\"name\":\"Paul Taylor\",\"screen_name\":\"PaulTaylorCEO\",\"location\":\"London, England\",\"description\":\"CEO and founder of @thoughtmachine. Building cloud native core banking. Cofounder of Rhetorical Systems, Phonetic Arts. Coauthor, Google text-to-speech system.\",\"url\":\"https:\\\/\\\/t.co\\\/AfqHH7iG2X\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AfqHH7iG2X\",\"expanded_url\":\"http:\\\/\\\/thoughtmachine.net\",\"display_url\":\"thoughtmachine.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":738,\"friends_count\":1002,\"listed_count\":7,\"created_at\":\"Tue Aug 21 11:54:50 +0000 2018\",\"favourites_count\":175,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":165,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 20:03:33 +0000 2020\",\"id\":1336401047607271430,\"id_str\":\"1336401047607271430\",\"text\":\"Second event of the day complete, thanks to the @sgfintechfest team, @Derek_j_white and @Deloitte Bob Contri for th\\u2026 https:\\\/\\\/t.co\\\/jDLtYd1p2o\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sgfintechfest\",\"name\":\"SG FinTech Festival\",\"id\":4750983733,\"id_str\":\"4750983733\",\"indices\":[48,62]},{\"screen_name\":\"Derek_j_white\",\"name\":\"Derek\",\"id\":306733282,\"id_str\":\"306733282\",\"indices\":[69,83]},{\"screen_name\":\"Deloitte\",\"name\":\"Deloitte\",\"id\":8457092,\"id_str\":\"8457092\",\"indices\":[88,97]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jDLtYd1p2o\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336401047607271430\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1031874715936276480\\\/BHECHN7K_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1031874715936276480\\\/BHECHN7K_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1031872250876768256\\\/1607332666\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1396003728,\"id_str\":\"1396003728\",\"name\":\"GopherCon\",\"screen_name\":\"GopherCon\",\"location\":\"Cyberspace and beyond!\",\"description\":\"GopherCon is now #GoVirCon! Join us virtually in November for a week of online programming, networking and engagement. See ya real soon Mickey!\",\"url\":\"https:\\\/\\\/t.co\\\/VoGcUAp0Ix\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VoGcUAp0Ix\",\"expanded_url\":\"http:\\\/\\\/www.gophercon.com\",\"display_url\":\"gophercon.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":21247,\"friends_count\":106,\"listed_count\":406,\"created_at\":\"Thu May 02 01:56:28 +0000 2013\",\"favourites_count\":2025,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2062,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 23 22:37:50 +0000 2020\",\"id\":1331004057025085440,\"id_str\":\"1331004057025085440\",\"text\":\"Did you attend #GoVirCon and need documentation for your employer and\\\/or continuing education credits? We can provi\\u2026 https:\\\/\\\/t.co\\\/giNqxezaj1\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"GoVirCon\",\"indices\":[15,24]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/giNqxezaj1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1331004057025085440\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1291118503102119937\\\/iMkhAoLf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1291118503102119937\\\/iMkhAoLf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1396003728\\\/1596661756\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1598516899,\"id_str\":\"1598516899\",\"name\":\"Gabriel Aszalos\",\"screen_name\":\"gabrielaszalos\",\"location\":\"Cluj-Napoca, Rom\\u00e2nia\",\"description\":\"Programmer of computers. Ashtangi. Opinions appear to me as if they were my own. Currently hacking at @datadoghq\",\"url\":\"https:\\\/\\\/t.co\\\/1RLdfherqt\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1RLdfherqt\",\"expanded_url\":\"http:\\\/\\\/github.com\\\/gbbr\",\"display_url\":\"github.com\\\/gbbr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":575,\"friends_count\":14,\"listed_count\":27,\"created_at\":\"Tue Jul 16 14:09:39 +0000 2013\",\"favourites_count\":2932,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1754,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 13:19:07 +0000 2020\",\"id\":1334487327188660234,\"id_str\":\"1334487327188660234\",\"text\":\"@BvdBijl @GoLandIDE True. But VIM is VIM. JetBrains is not :)\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"BvdBijl\",\"name\":\"Bouke\",\"id\":17556883,\"id_str\":\"17556883\",\"indices\":[0,8]},{\"screen_name\":\"GoLandIDE\",\"name\":\"JetBrains GoLand\",\"id\":790527680961712128,\"id_str\":\"790527680961712128\",\"indices\":[9,19]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1334148333317853185,\"in_reply_to_status_id_str\":\"1334148333317853185\",\"in_reply_to_user_id\":17556883,\"in_reply_to_user_id_str\":\"17556883\",\"in_reply_to_screen_name\":\"BvdBijl\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1245776501137702915\\\/wXEKDToM_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1245776501137702915\\\/wXEKDToM_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1598516899\\\/1510990997\",\"profile_link_color\":\"55ACEE\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":113419064,\"id_str\":\"113419064\",\"name\":\"Go\",\"screen_name\":\"golang\",\"location\":\"\",\"description\":\"Go will make you love programming again. We promise.\",\"url\":\"http:\\\/\\\/t.co\\\/C4svVTkUmj\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/C4svVTkUmj\",\"expanded_url\":\"http:\\\/\\\/golang.org\\\/\",\"display_url\":\"golang.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":109188,\"friends_count\":0,\"listed_count\":1991,\"created_at\":\"Thu Feb 11 18:04:38 +0000 2010\",\"favourites_count\":270,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":2032,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 21:56:13 +0000 2020\",\"id\":1334617463523340289,\"id_str\":\"1334617463523340289\",\"text\":\"\\ud83c\\udf86 Go 1.15.6 and 1.14.13 are released!\\n\\n\\ud83d\\udce2 Announcement: https:\\\/\\\/t.co\\\/MhynhSKWEx\\n\\n\\u2b07\\ufe0f Download:\\u2026 https:\\\/\\\/t.co\\\/HZG6INbAtq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/MhynhSKWEx\",\"expanded_url\":\"https:\\\/\\\/groups.google.com\\\/g\\\/golang-announce\\\/c\\\/0kN8l6MprTo\\\/m\\\/48QBO0fsBgAJ\",\"display_url\":\"groups.google.com\\\/g\\\/golang-annou\\u2026\",\"indices\":[55,78]},{\"url\":\"https:\\\/\\\/t.co\\\/HZG6INbAtq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334617463523340289\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[94,117]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":166,\"favorite_count\":521,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1142154201444823041\\\/O6AczwfV_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1142154201444823041\\\/O6AczwfV_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/113419064\\\/1398369112\",\"profile_link_color\":\"00ADD8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":16520821,\"id_str\":\"16520821\",\"name\":\"Beyang Liu\",\"screen_name\":\"beyang\",\"location\":\"San Francisco, CA\",\"description\":\"Passionate about developer productivity, collaboration, and helping software engineers level up. Building @srcgraph.\",\"url\":\"https:\\\/\\\/t.co\\\/aQZBLY1hhK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/aQZBLY1hhK\",\"expanded_url\":\"https:\\\/\\\/sourcegraph.com\",\"display_url\":\"sourcegraph.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1722,\"friends_count\":392,\"listed_count\":47,\"created_at\":\"Tue Sep 30 00:04:25 +0000 2008\",\"favourites_count\":2701,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1733,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 01:40:57 +0000 2020\",\"id\":1336485955130167297,\"id_str\":\"1336485955130167297\",\"text\":\"He drew this great analogy comparing programming to cooking and engineering orgs to restaurant kitchens. I just wen\\u2026 https:\\\/\\\/t.co\\\/n7AM3Y3iAD\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/n7AM3Y3iAD\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336485955130167297\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336485954291298304,\"in_reply_to_status_id_str\":\"1336485954291298304\",\"in_reply_to_user_id\":16520821,\"in_reply_to_user_id_str\":\"16520821\",\"in_reply_to_screen_name\":\"beyang\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":48,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1061140144034463744\\\/H-8fUnEF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1061140144034463744\\\/H-8fUnEF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/16520821\\\/1541830703\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2397636133,\"id_str\":\"2397636133\",\"name\":\"Hack Club\",\"screen_name\":\"hackclub\",\"location\":\"Your High School\",\"description\":\"\\ud83d\\ude80 a worldwide community of high school hackers \\ud83e\\udd95 by the students, for the students.\",\"url\":\"https:\\\/\\\/t.co\\\/t3JtBRQGBW\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/t3JtBRQGBW\",\"expanded_url\":\"https:\\\/\\\/hackclub.com\",\"display_url\":\"hackclub.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":12786,\"friends_count\":175,\"listed_count\":83,\"created_at\":\"Wed Mar 19 10:24:35 +0000 2014\",\"favourites_count\":1190,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1657,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:15:46 +0000 2020\",\"id\":1336706113123835905,\"id_str\":\"1336706113123835905\",\"text\":\"RT @thedawgyg: Check them out if you're in the job market. Amazing group of people with a really great cause https:\\\/\\\/t.co\\\/XPWcwjXXFy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thedawgyg\",\"name\":\"dawgyg\",\"id\":318761159,\"id_str\":\"318761159\",\"indices\":[3,13]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XPWcwjXXFy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/hackclub\\\/status\\\/1334213405654310914\",\"display_url\":\"twitter.com\\\/hackclub\\\/statu\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 01:59:11 +0000 2020\",\"id\":1336490547134013442,\"id_str\":\"1336490547134013442\",\"text\":\"Check them out if you're in the job market. Amazing group of people with a really great cause https:\\\/\\\/t.co\\\/XPWcwjXXFy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XPWcwjXXFy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/hackclub\\\/status\\\/1334213405654310914\",\"display_url\":\"twitter.com\\\/hackclub\\\/statu\\u2026\",\"indices\":[94,117]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"5635c19c2b5078d1\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/5635c19c2b5078d1.json\",\"place_type\":\"admin\",\"name\":\"Virginie\",\"full_name\":\"Virginie, USA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-83.67529,36.540739],[-75.16644,36.540739],[-75.16644,39.466012],[-83.67529,39.466012]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334213405654310914,\"quoted_status_id_str\":\"1334213405654310914\",\"retweet_count\":3,\"favorite_count\":31,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":true,\"quoted_status_id\":1334213405654310914,\"quoted_status_id_str\":\"1334213405654310914\",\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333895200301780993\\\/_Ihb9pG5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333895200301780993\\\/_Ihb9pG5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2397636133\\\/1585425118\",\"profile_link_color\":\"E42D40\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2155799509,\"id_str\":\"2155799509\",\"name\":\"Artillery.io | Load Testing\",\"screen_name\":\"artilleryio\",\"location\":\"Shoreditch, London\",\"description\":\"Our mission is to help you keep prod fast and reliable, and your PagerDuty alarms silent.\",\"url\":\"https:\\\/\\\/t.co\\\/OvcUCZxBTL\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OvcUCZxBTL\",\"expanded_url\":\"https:\\\/\\\/artillery.io\",\"display_url\":\"artillery.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":330,\"friends_count\":0,\"listed_count\":12,\"created_at\":\"Fri Oct 25 23:41:24 +0000 2013\",\"favourites_count\":62,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":106,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:34:38 +0000 2020\",\"id\":1336680662456209408,\"id_str\":\"1336680662456209408\",\"text\":\"@julian_wood @naumenko_roman That\\u2019s certainly relevant to our interests! \\ud83d\\ude04 Happy to help out in any way.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"julian_wood\",\"name\":\"Julian Wood\",\"id\":14744498,\"id_str\":\"14744498\",\"indices\":[0,12]},{\"screen_name\":\"naumenko_roman\",\"name\":\"Roman\",\"id\":385197507,\"id_str\":\"385197507\",\"indices\":[13,28]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":1336647732380004352,\"in_reply_to_status_id_str\":\"1336647732380004352\",\"in_reply_to_user_id\":14744498,\"in_reply_to_user_id_str\":\"14744498\",\"in_reply_to_screen_name\":\"julian_wood\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1129331162789359616\\\/EEkyXqKy_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1129331162789359616\\\/EEkyXqKy_normal.jpg\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":11856352,\"id_str\":\"11856352\",\"name\":\"Will Bond\",\"screen_name\":\"wbond\",\"location\":\"Plymouth, NH\",\"description\":\"Software engineer, occasional designer. Working for @sublimehq. Proud husband and father.\",\"url\":\"https:\\\/\\\/t.co\\\/lk5g68uf2N\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lk5g68uf2N\",\"expanded_url\":\"https:\\\/\\\/wbond.net\",\"display_url\":\"wbond.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3673,\"friends_count\":66,\"listed_count\":136,\"created_at\":\"Fri Jan 04 22:17:17 +0000 2008\",\"favourites_count\":207,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3473,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 19:46:45 +0000 2020\",\"id\":1334584881003819011,\"id_str\":\"1334584881003819011\",\"text\":\"Anyone have an Xbox 360 console they would like to sell?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"323232\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1314241275026124800\\\/ufHr99NG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1314241275026124800\\\/ufHr99NG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/11856352\\\/1406147824\",\"profile_link_color\":\"6CB4A8\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EEEEEE\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":42720987,\"id_str\":\"42720987\",\"name\":\"Silo 3D by Nevercenter\",\"screen_name\":\"silo3d\",\"location\":\"\",\"description\":\"Official feed for news, updates, and more about Silo 3D modeling software by @nevercenter.  \\n\\nSilo Forums at: https:\\\/\\\/t.co\\\/KqTjiUdVF1\",\"url\":\"http:\\\/\\\/t.co\\\/uBcmB4wm7S\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/uBcmB4wm7S\",\"expanded_url\":\"http:\\\/\\\/nevercenter.com\\\/silo\",\"display_url\":\"nevercenter.com\\\/silo\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KqTjiUdVF1\",\"expanded_url\":\"http:\\\/\\\/forums.cgsociety.org\\\/forumdisplay.php?f=175\",\"display_url\":\"forums.cgsociety.org\\\/forumdisplay.p\\u2026\",\"indices\":[110,133]}]}},\"protected\":false,\"followers_count\":981,\"friends_count\":56,\"listed_count\":66,\"created_at\":\"Tue May 26 21:09:06 +0000 2009\",\"favourites_count\":115,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":375,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 02:49:35 +0000 2020\",\"id\":1333966515595399169,\"id_str\":\"1333966515595399169\",\"text\":\"It's getting closer!! \\u2728 https:\\\/\\\/t.co\\\/vda600595N\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1333965894100283393,\"id_str\":\"1333965894100283393\",\"indices\":[24,47],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoMy6bxVcAEFNhm.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoMy6bxVcAEFNhm.png\",\"url\":\"https:\\\/\\\/t.co\\\/vda600595N\",\"display_url\":\"pic.twitter.com\\\/vda600595N\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/silo3d\\\/status\\\/1333966515595399169\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":750,\"h\":750,\"resize\":\"fit\"},\"medium\":{\"w\":750,\"h\":750,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1333965894100283393,\"id_str\":\"1333965894100283393\",\"indices\":[24,47],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoMy6bxVcAEFNhm.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoMy6bxVcAEFNhm.png\",\"url\":\"https:\\\/\\\/t.co\\\/vda600595N\",\"display_url\":\"pic.twitter.com\\\/vda600595N\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/silo3d\\\/status\\\/1333966515595399169\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":750,\"h\":750,\"resize\":\"fit\"},\"medium\":{\"w\":750,\"h\":750,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":8,\"favorite_count\":31,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/905552261388025857\\\/U-5dxbpJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/905552261388025857\\\/U-5dxbpJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/42720987\\\/1504735683\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":29253017,\"id_str\":\"29253017\",\"name\":\"CameraBag by Nevercenter\",\"screen_name\":\"camerabag\",\"location\":\"\",\"description\":\"The official account of the CameraBag series. Please follow @nevercenter to join the conversation!\",\"url\":\"http:\\\/\\\/t.co\\\/FbBT7iDTkO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/FbBT7iDTkO\",\"expanded_url\":\"http:\\\/\\\/www.nevercenter.com\\\/camerabag\",\"display_url\":\"nevercenter.com\\\/camerabag\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2738,\"friends_count\":593,\"listed_count\":312,\"created_at\":\"Mon Apr 06 17:55:05 +0000 2009\",\"favourites_count\":114,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2012,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 30 16:34:00 +0000 2020\",\"id\":1333449208687259656,\"id_str\":\"1333449208687259656\",\"text\":\"#CameraBagTip - Animated Previews: Hover over any of the adjustments in the right panel to see a preview of the eff\\u2026 https:\\\/\\\/t.co\\\/N7UJEHZMfg\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"CameraBagTip\",\"indices\":[0,13]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/N7UJEHZMfg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333449208687259656\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804518316085772288\\\/Mc3LGCCj_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804518316085772288\\\/Mc3LGCCj_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/29253017\\\/1515311534\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":43440648,\"id_str\":\"43440648\",\"name\":\"Nevercenter\",\"screen_name\":\"nevercenter\",\"location\":\"\",\"description\":\"A small team developing apps with care. Makers of @Silo3d, @CameraBag, @PixelmashApp, @shibuya_gm, and more!\",\"url\":\"http:\\\/\\\/t.co\\\/FYsNVt2VZv\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/FYsNVt2VZv\",\"expanded_url\":\"http:\\\/\\\/nevercenter.com\",\"display_url\":\"nevercenter.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":409,\"friends_count\":99,\"listed_count\":20,\"created_at\":\"Sat May 30 00:07:27 +0000 2009\",\"favourites_count\":271,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":413,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 17 11:08:54 +0000 2020\",\"id\":1328656353414447105,\"id_str\":\"1328656353414447105\",\"text\":\"RT @silo3d: Looking fwd to seeing what everyone's making in the @Humster3d #CarRenderChallenge! Along with the Silo prizes, the @Nevercente\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"CarRenderChallenge\",\"indices\":[75,94]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"silo3d\",\"name\":\"Silo 3D by Nevercenter\",\"id\":42720987,\"id_str\":\"42720987\",\"indices\":[3,10]},{\"screen_name\":\"humster3d\",\"name\":\"Hum3D\",\"id\":229497670,\"id_str\":\"229497670\",\"indices\":[64,74]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Nov 13 19:12:00 +0000 2020\",\"id\":1327328376852516864,\"id_str\":\"1327328376852516864\",\"text\":\"Looking fwd to seeing what everyone's making in the @Humster3d #CarRenderChallenge! Along with the Silo prizes, the\\u2026 https:\\\/\\\/t.co\\\/bhY5l0enRf\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"CarRenderChallenge\",\"indices\":[63,82]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"humster3d\",\"name\":\"Hum3D\",\"id\":229497670,\"id_str\":\"229497670\",\"indices\":[52,62]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bhY5l0enRf\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1327328376852516864\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/976557137139658753\\\/z32A_iP2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/976557137139658753\\\/z32A_iP2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/43440648\\\/1529105974\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":60362080,\"id_str\":\"60362080\",\"name\":\"paulogdm\",\"screen_name\":\"paulogdm\",\"location\":\"Sao Paulo, Brazil\",\"description\":\"Helping @vercel\\nSoftware Engineer \\ud83d\\udc68\\u200d\\ud83d\\udcbb\\nCoffee? No, but I accept some tea! \\ud83c\\udf75 \\nI'm going to the Next.js conf! https:\\\/\\\/t.co\\\/W23mD1nDc8\\u2026\",\"url\":\"https:\\\/\\\/t.co\\\/Ly4iotneeC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Ly4iotneeC\",\"expanded_url\":\"http:\\\/\\\/paulogdm.com\",\"display_url\":\"paulogdm.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/W23mD1nDc8\",\"expanded_url\":\"http:\\\/\\\/nextjs.org\\\/conf\\\/tickets\\\/p\",\"display_url\":\"nextjs.org\\\/conf\\\/tickets\\\/p\",\"indices\":[107,130]}]}},\"protected\":false,\"followers_count\":703,\"friends_count\":268,\"listed_count\":10,\"created_at\":\"Sun Jul 26 18:22:08 +0000 2009\",\"favourites_count\":4248,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2401,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 18:30:12 +0000 2020\",\"id\":1334928004573761536,\"id_str\":\"1334928004573761536\",\"text\":\"RT @rauchg: @ThePaulMcBride You hurt CLS, the bottom right dimension in that screenshot. The layout shifts, and a ton of work is wasted on\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"rauchg\",\"name\":\"Guillermo Rauch\",\"id\":15540222,\"id_str\":\"15540222\",\"indices\":[3,10]},{\"screen_name\":\"ThePaulMcBride\",\"name\":\"Paul McBride\",\"id\":607791742,\"id_str\":\"607791742\",\"indices\":[12,27]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 17:55:05 +0000 2020\",\"id\":1334919164931129344,\"id_str\":\"1334919164931129344\",\"text\":\"@ThePaulMcBride You hurt CLS, the bottom right dimension in that screenshot. The layout shifts, and a ton of work i\\u2026 https:\\\/\\\/t.co\\\/7sQgJZAEa5\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ThePaulMcBride\",\"name\":\"Paul McBride\",\"id\":607791742,\"id_str\":\"607791742\",\"indices\":[0,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7sQgJZAEa5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334919164931129344\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":1334918299629576194,\"in_reply_to_status_id_str\":\"1334918299629576194\",\"in_reply_to_user_id\":607791742,\"in_reply_to_user_id_str\":\"607791742\",\"in_reply_to_screen_name\":\"ThePaulMcBride\",\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"5a110d312052166f\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/5a110d312052166f.json\",\"place_type\":\"city\",\"name\":\"San Francisco\",\"full_name\":\"San Francisco, CA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-122.514926,37.708075],[-122.357031,37.708075],[-122.357031,37.833238],[-122.514926,37.833238]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"0C0D0D\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1306356444728643584\\\/9ip6zjz5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1306356444728643584\\\/9ip6zjz5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/60362080\\\/1569241039\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"FF0000\",\"profile_sidebar_fill_color\":\"30313B\",\"profile_text_color\":\"AB803A\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":360909999,\"id_str\":\"360909999\",\"name\":\"Sophearak Tha\",\"screen_name\":\"thasophearak\",\"location\":\"Cambodia\",\"description\":\"Internetrovert \\u2022 Minimalist\\n\\nCrafting @moul_co\",\"url\":\"https:\\\/\\\/t.co\\\/gtMyEp0rab\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gtMyEp0rab\",\"expanded_url\":\"https:\\\/\\\/sophearak.me\",\"display_url\":\"sophearak.me\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":212,\"friends_count\":113,\"listed_count\":0,\"created_at\":\"Tue Aug 23 23:26:26 +0000 2011\",\"favourites_count\":370,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":214,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 12 13:21:01 +0000 2020\",\"id\":1326877662334234627,\"id_str\":\"1326877662334234627\",\"text\":\"RT @moul_co: We can take photos anywhere. We feel our surroundings and capture those moments.\\ud83d\\udc99 \\n\\n#photography #olympus #omd #em1 https:\\\/\\\/t.\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"photography\",\"indices\":[97,109]},{\"text\":\"olympus\",\"indices\":[110,118]},{\"text\":\"omd\",\"indices\":[119,123]},{\"text\":\"em1\",\"indices\":[124,128]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"moul_co\",\"name\":\"Moul\",\"id\":1298846857137803264,\"id_str\":\"1298846857137803264\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Nov 12 13:03:06 +0000 2020\",\"id\":1326873152656347137,\"id_str\":\"1326873152656347137\",\"text\":\"We can take photos anywhere. We feel our surroundings and capture those moments.\\ud83d\\udc99 \\n\\n#photography #olympus #omd #em1 https:\\\/\\\/t.co\\\/kxcb0ZurGY\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"photography\",\"indices\":[84,96]},{\"text\":\"olympus\",\"indices\":[97,105]},{\"text\":\"omd\",\"indices\":[106,110]},{\"text\":\"em1\",\"indices\":[111,115]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1326873149489623040,\"id_str\":\"1326873149489623040\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EmoAGXFVMAAyCGR.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EmoAGXFVMAAyCGR.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/kxcb0ZurGY\",\"display_url\":\"pic.twitter.com\\\/kxcb0ZurGY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/moul_co\\\/status\\\/1326873152656347137\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1365,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":800,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1326873149489623040,\"id_str\":\"1326873149489623040\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EmoAGXFVMAAyCGR.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EmoAGXFVMAAyCGR.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/kxcb0ZurGY\",\"display_url\":\"pic.twitter.com\\\/kxcb0ZurGY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/moul_co\\\/status\\\/1326873152656347137\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1365,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":800,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"2D4059\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201176456459505664\\\/6flAPe52_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201176456459505664\\\/6flAPe52_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/360909999\\\/1599732501\",\"profile_link_color\":\"2C3E50\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":3467664025,\"id_str\":\"3467664025\",\"name\":\"sarupbanskota\",\"screen_name\":\"sarupbanskota\",\"location\":\"Singapore\",\"description\":\"interested in code, design, and persuasion.\\nprev: @vercel etc\",\"url\":\"https:\\\/\\\/t.co\\\/xszE1BRLdg\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xszE1BRLdg\",\"expanded_url\":\"https:\\\/\\\/sarupbanskota.com\",\"display_url\":\"sarupbanskota.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":505,\"friends_count\":0,\"listed_count\":18,\"created_at\":\"Sun Sep 06 06:23:58 +0000 2015\",\"favourites_count\":525,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":536,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 18:14:23 +0000 2020\",\"id\":1334561636816887808,\"id_str\":\"1334561636816887808\",\"text\":\"RT @supabase_io: After 9 months of building, 3102 databases launched, 505 issues fixed, and 238,000 lines of code written - we're moving in\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"supabase_io\",\"name\":\"Supabase\",\"id\":1219566488325017602,\"id_str\":\"1219566488325017602\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 14:47:01 +0000 2020\",\"id\":1334509449264979972,\"id_str\":\"1334509449264979972\",\"text\":\"After 9 months of building, 3102 databases launched, 505 issues fixed, and 238,000 lines of code written - we're mo\\u2026 https:\\\/\\\/t.co\\\/ISedmKqKFA\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ISedmKqKFA\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334509449264979972\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":58,\"favorite_count\":308,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":58,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1259081936686837761\\\/52U0Er1K_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1259081936686837761\\\/52U0Er1K_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3467664025\\\/1540013873\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":469472747,\"id_str\":\"469472747\",\"name\":\"Christopher Skillicorn\",\"screen_name\":\"skllcrn\",\"location\":\"Norway\",\"description\":\"Started Wulkano, a digital collective of sorts, and helped create Kap. Currently Product Design at Vercel.\",\"url\":\"https:\\\/\\\/t.co\\\/AtroKa8CHC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AtroKa8CHC\",\"expanded_url\":\"https:\\\/\\\/vercel.com\",\"display_url\":\"vercel.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":687,\"friends_count\":174,\"listed_count\":45,\"created_at\":\"Fri Jan 20 16:47:04 +0000 2012\",\"favourites_count\":11391,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3791,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:57:05 +0000 2020\",\"id\":1336746708768870402,\"id_str\":\"1336746708768870402\",\"text\":\"RT @timneutkens: New Next.js RFC: Tailwind Support!\\n\\n\\u25c6 Fast DX\\n\\u25c6 Zero Config\\n\\u25c6 Backwards Compatible\\n\\nhttps:\\\/\\\/t.co\\\/JA5qVMrsfb https:\\\/\\\/t.co\\\/x\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"timneutkens\",\"name\":\"Tim\",\"id\":1189966273,\"id_str\":\"1189966273\",\"indices\":[3,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JA5qVMrsfb\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/vercel\\\/next.js\\\/discussions\\\/20030\",\"display_url\":\"github.com\\\/vercel\\\/next.js\\u2026\",\"indices\":[101,124]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 17:28:19 +0000 2020\",\"id\":1336724371147264001,\"id_str\":\"1336724371147264001\",\"text\":\"New Next.js RFC: Tailwind Support!\\n\\n\\u25c6 Fast DX\\n\\u25c6 Zero Config\\n\\u25c6 Backwards Compatible\\n\\nhttps:\\\/\\\/t.co\\\/JA5qVMrsfb https:\\\/\\\/t.co\\\/xgteMzosNr\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JA5qVMrsfb\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/vercel\\\/next.js\\\/discussions\\\/20030\",\"display_url\":\"github.com\\\/vercel\\\/next.js\\u2026\",\"indices\":[84,107]}],\"media\":[{\"id\":1336720660396118018,\"id_str\":\"1336720660396118018\",\"indices\":[108,131],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eoz8W77WEAI6BGy.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eoz8W77WEAI6BGy.png\",\"url\":\"https:\\\/\\\/t.co\\\/xgteMzosNr\",\"display_url\":\"pic.twitter.com\\\/xgteMzosNr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/timneutkens\\\/status\\\/1336724371147264001\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"medium\":{\"w\":1200,\"h\":628,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":356,\"resize\":\"fit\"},\"large\":{\"w\":2048,\"h\":1071,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336720660396118018,\"id_str\":\"1336720660396118018\",\"indices\":[108,131],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eoz8W77WEAI6BGy.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eoz8W77WEAI6BGy.png\",\"url\":\"https:\\\/\\\/t.co\\\/xgteMzosNr\",\"display_url\":\"pic.twitter.com\\\/xgteMzosNr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/timneutkens\\\/status\\\/1336724371147264001\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"medium\":{\"w\":1200,\"h\":628,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":356,\"resize\":\"fit\"},\"large\":{\"w\":2048,\"h\":1071,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":106,\"favorite_count\":910,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":106,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/922430337061400576\\\/z9FxGRyd_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/922430337061400576\\\/z9FxGRyd_normal.jpg\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1081963263829651457,\"id_str\":\"1081963263829651457\",\"name\":\"JJ Kasper\",\"screen_name\":\"_ijjk\",\"location\":\"\",\"description\":\"Software Engineer @vercel | Next.js maintainer | Open-source\",\"url\":\"https:\\\/\\\/t.co\\\/IqPjrmQqPB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IqPjrmQqPB\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/ijjk\",\"display_url\":\"github.com\\\/ijjk\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1493,\"friends_count\":149,\"listed_count\":21,\"created_at\":\"Sun Jan 06 17:18:38 +0000 2019\",\"favourites_count\":313,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":74,\"lang\":null,\"status\":{\"created_at\":\"Tue Oct 27 19:11:39 +0000 2020\",\"id\":1321167696814374912,\"id_str\":\"1321167696814374912\",\"text\":\"@Lani78 @vercel We plan to investigate this use case further, to handle the majority use case and ensure good SEO w\\u2026 https:\\\/\\\/t.co\\\/fnvfEq8vNH\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Lani78\",\"name\":\"Niklas Lagergren\",\"id\":69814754,\"id_str\":\"69814754\",\"indices\":[0,7]},{\"screen_name\":\"vercel\",\"name\":\"Vercel\",\"id\":4686835494,\"id_str\":\"4686835494\",\"indices\":[8,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fnvfEq8vNH\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1321167696814374912\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1321163440619139084,\"in_reply_to_status_id_str\":\"1321163440619139084\",\"in_reply_to_user_id\":69814754,\"in_reply_to_user_id_str\":\"69814754\",\"in_reply_to_screen_name\":\"Lani78\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133477700956434432\\\/zolyZVAK_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133477700956434432\\\/zolyZVAK_normal.png\",\"profile_link_color\":\"91D2FA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":800746605297025024,\"id_str\":\"800746605297025024\",\"name\":\"CodeYourFuture\",\"screen_name\":\"CodeYourFuture\",\"location\":\"UK, Italy, ....\",\"description\":\"Training #refugees and #disadvantaged people to become #software #developers. London, Glasgow, North West, West Midlands, Rome  --contact@codeyourfuture.io\",\"url\":\"https:\\\/\\\/t.co\\\/kwV2SwdKbe\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kwV2SwdKbe\",\"expanded_url\":\"https:\\\/\\\/codeyourfuture.io\\\/\",\"display_url\":\"codeyourfuture.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3198,\"friends_count\":423,\"listed_count\":49,\"created_at\":\"Mon Nov 21 17:04:02 +0000 2016\",\"favourites_count\":1049,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1035,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 11:45:51 +0000 2020\",\"id\":1336638183220662278,\"id_str\":\"1336638183220662278\",\"text\":\"RT @EuTalents4: The #NT4EU final conference is coming!\\ud83d\\udcbb\\ud83d\\udcab\\n\\nAgenda &amp; registration:\\n\\ud83d\\udc49https:\\\/\\\/t.co\\\/V0NarJKcG1\\n\\n@EUHomeAffairs will be represent\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"NT4EU\",\"indices\":[20,26]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"EuTalents4\",\"name\":\"NewTalents4Eu\",\"id\":1113558831404077058,\"id_str\":\"1113558831404077058\",\"indices\":[3,14]},{\"screen_name\":\"EUHomeAffairs\",\"name\":\"EUHomeAffairs\",\"id\":420461348,\"id_str\":\"420461348\",\"indices\":[111,125]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V0NarJKcG1\",\"expanded_url\":\"https:\\\/\\\/newtalents4eu.eu\\\/...\\\/final-conference-december-16th\\\/\",\"display_url\":\"newtalents4eu.eu\\\/...\\\/final-conf\\u2026\",\"indices\":[86,109]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 09:12:16 +0000 2020\",\"id\":1336599536349839360,\"id_str\":\"1336599536349839360\",\"text\":\"The #NT4EU final conference is coming!\\ud83d\\udcbb\\ud83d\\udcab\\n\\nAgenda &amp; registration:\\n\\ud83d\\udc49https:\\\/\\\/t.co\\\/V0NarJKcG1\\n\\n@EUHomeAffairs will be r\\u2026 https:\\\/\\\/t.co\\\/aF5wwKVVsw\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"NT4EU\",\"indices\":[4,10]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"EUHomeAffairs\",\"name\":\"EUHomeAffairs\",\"id\":420461348,\"id_str\":\"420461348\",\"indices\":[95,109]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V0NarJKcG1\",\"expanded_url\":\"https:\\\/\\\/newtalents4eu.eu\\\/...\\\/final-conference-december-16th\\\/\",\"display_url\":\"newtalents4eu.eu\\\/...\\\/final-conf\\u2026\",\"indices\":[70,93]},{\"url\":\"https:\\\/\\\/t.co\\\/aF5wwKVVsw\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336599536349839360\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"ro\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"ro\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1278376322100854785\\\/61JMWCyu_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1278376322100854785\\\/61JMWCyu_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/800746605297025024\\\/1593623626\",\"profile_link_color\":\"E81C4F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":950378990086316033,\"id_str\":\"950378990086316033\",\"name\":\"Matthew Sweeney\",\"screen_name\":\"mcsdev\",\"location\":\"UK\",\"description\":\"#BlackLivesMatter\\n\\nHead of Customer Success @vercel\",\"url\":\"https:\\\/\\\/t.co\\\/QAiVyR2Bhr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QAiVyR2Bhr\",\"expanded_url\":\"https:\\\/\\\/mcs.dev\",\"display_url\":\"mcs.dev\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":382,\"friends_count\":299,\"listed_count\":5,\"created_at\":\"Mon Jan 08 14:49:43 +0000 2018\",\"favourites_count\":757,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":880,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:41:24 +0000 2020\",\"id\":1336772960707883012,\"id_str\":\"1336772960707883012\",\"text\":\"@matheusfrndes You forgot threads \\ud83e\\udd74\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"matheusfrndes\",\"name\":\"Matheus Fernandes\",\"id\":747383997362241536,\"id_str\":\"747383997362241536\",\"indices\":[0,14]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336751019611533313,\"in_reply_to_status_id_str\":\"1336751019611533313\",\"in_reply_to_user_id\":747383997362241536,\"in_reply_to_user_id_str\":\"747383997362241536\",\"in_reply_to_screen_name\":\"matheusfrndes\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1111703469856120832\\\/Zo5ai4eb_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1111703469856120832\\\/Zo5ai4eb_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/950378990086316033\\\/1549891145\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2887482605,\"id_str\":\"2887482605\",\"name\":\"luc\",\"screen_name\":\"lucleray\",\"location\":\"France\",\"description\":\"lead software engineer \\u25b2 @vercel\",\"url\":\"https:\\\/\\\/t.co\\\/xfwzmR14Gw\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xfwzmR14Gw\",\"expanded_url\":\"https:\\\/\\\/luc.im\",\"display_url\":\"luc.im\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":671,\"friends_count\":178,\"listed_count\":9,\"created_at\":\"Fri Nov 21 23:35:13 +0000 2014\",\"favourites_count\":1394,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":263,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 10:48:46 +0000 2020\",\"id\":1334811879294820354,\"id_str\":\"1334811879294820354\",\"text\":\"Always bet on Next.js! https:\\\/\\\/t.co\\\/yS8JQUcFSR\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yS8JQUcFSR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/spikebrehm\\\/status\\\/1334528781139259400\",\"display_url\":\"twitter.com\\\/spikebrehm\\\/sta\\u2026\",\"indices\":[23,46]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334528781139259400,\"quoted_status_id_str\":\"1334528781139259400\",\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1216534823361224705\\\/Ydt3rKz0_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1216534823361224705\\\/Ydt3rKz0_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2887482605\\\/1578575932\",\"profile_link_color\":\"2059F6\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3131694958,\"id_str\":\"3131694958\",\"name\":\"altMBA\",\"screen_name\":\"alt_MBA\",\"location\":\"\",\"description\":\"The altMBA is for leaders and ruckus makers looking to level up. To learn more, visit https:\\\/\\\/t.co\\\/AtFlXl0u7o\",\"url\":\"https:\\\/\\\/t.co\\\/nzMnfVCzX8\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nzMnfVCzX8\",\"expanded_url\":\"https:\\\/\\\/altmba.com\",\"display_url\":\"altmba.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AtFlXl0u7o\",\"expanded_url\":\"http:\\\/\\\/altmba.com\\\/tellmemore\",\"display_url\":\"altmba.com\\\/tellmemore\",\"indices\":[86,109]}]}},\"protected\":false,\"followers_count\":22573,\"friends_count\":2,\"listed_count\":217,\"created_at\":\"Fri Apr 03 17:54:25 +0000 2015\",\"favourites_count\":635,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4158,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 23:21:01 +0000 2020\",\"id\":1336450743537197059,\"id_str\":\"1336450743537197059\",\"text\":\"Who's going to be part of the 45th session of the altMBA? Today's the Early Decision deadline. Visit\\u2026 https:\\\/\\\/t.co\\\/yABJEMdGDR\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yABJEMdGDR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336450743537197059\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[102,125]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/685170279518212096\\\/QGnSgoVV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/685170279518212096\\\/QGnSgoVV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3131694958\\\/1452195340\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":42540916,\"id_str\":\"42540916\",\"name\":\"Prey\",\"screen_name\":\"preyproject\",\"location\":\"Living in All Your Devices\",\"description\":\"Security solution to track and recover your smartphone, laptop or tablet if missing or stolen. Support? @preysupport. \\u00bfHablas espa\\u00f1ol? @preyprojectES.\",\"url\":\"https:\\\/\\\/t.co\\\/x70SIX4hNH\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/x70SIX4hNH\",\"expanded_url\":\"https:\\\/\\\/preyproject.com\",\"display_url\":\"preyproject.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":10769,\"friends_count\":4285,\"listed_count\":348,\"created_at\":\"Tue May 26 02:06:51 +0000 2009\",\"favourites_count\":2625,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7128,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:12:51 +0000 2020\",\"id\":1336780877054009344,\"id_str\":\"1336780877054009344\",\"text\":\"@jasonli Thanks for having us on your list, Jason! \\ud83d\\udcaa\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jasonli\",\"name\":\"Jason Li\",\"id\":1980381,\"id_str\":\"1980381\",\"indices\":[0,8]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":1335722973140033536,\"in_reply_to_status_id_str\":\"1335722973140033536\",\"in_reply_to_user_id\":1980381,\"in_reply_to_user_id_str\":\"1980381\",\"in_reply_to_screen_name\":\"jasonli\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"222A33\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1218166964461490176\\\/wzbbjD2z_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1218166964461490176\\\/wzbbjD2z_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/42540916\\\/1570715740\",\"profile_link_color\":\"0081C2\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"D6DCDA\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":686803,\"id_str\":\"686803\",\"name\":\"Andrew Nesbitt\",\"screen_name\":\"teabass\",\"location\":\"UK\",\"description\":\"Maintainer of poodles\",\"url\":\"https:\\\/\\\/t.co\\\/VY0egAxIBS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VY0egAxIBS\",\"expanded_url\":\"https:\\\/\\\/nesbitt.io\",\"display_url\":\"nesbitt.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":5353,\"friends_count\":0,\"listed_count\":391,\"created_at\":\"Tue Jan 23 15:01:41 +0000 2007\",\"favourites_count\":24076,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":42111,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 17:39:02 +0000 2020\",\"id\":1334915129251667969,\"id_str\":\"1334915129251667969\",\"text\":\"@gep13 @devlead @github @octoboxio no, github haven't made any of their new notification apis available to anyone as far as I know\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"gep13\",\"name\":\"Gary Ewan Park\",\"id\":129866083,\"id_str\":\"129866083\",\"indices\":[0,6]},{\"screen_name\":\"devlead\",\"name\":\"Mattias Karlsson\",\"id\":354489873,\"id_str\":\"354489873\",\"indices\":[7,15]},{\"screen_name\":\"github\",\"name\":\"GitHub\",\"id\":13334762,\"id_str\":\"13334762\",\"indices\":[16,23]},{\"screen_name\":\"octoboxio\",\"name\":\"Octobox\",\"id\":1008750245436710913,\"id_str\":\"1008750245436710913\",\"indices\":[24,34]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1334849510355464192,\"in_reply_to_status_id_str\":\"1334849510355464192\",\"in_reply_to_user_id\":129866083,\"in_reply_to_user_id_str\":\"129866083\",\"in_reply_to_screen_name\":\"gep13\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/738645809034584064\\\/Sp_hMSqb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/738645809034584064\\\/Sp_hMSqb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/686803\\\/1549555096\",\"profile_link_color\":\"5074CF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"C4D6F5\",\"profile_text_color\":\"0A0A0A\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14092082,\"id_str\":\"14092082\",\"name\":\"Paulo L F Casaretto\",\"screen_name\":\"pcasaretto\",\"location\":\"\",\"description\":\"Software Engineer at @ResDigitais\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":236,\"friends_count\":59,\"listed_count\":10,\"created_at\":\"Thu Mar 06 23:23:23 +0000 2008\",\"favourites_count\":1213,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":885,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:31:43 +0000 2020\",\"id\":1336695025028227074,\"id_str\":\"1336695025028227074\",\"text\":\"@kelseyhightower I like how @elonmusk defined it: https:\\\/\\\/t.co\\\/Z6uUtZBr9c\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kelseyhightower\",\"name\":\"Kelsey Hightower\",\"id\":159822053,\"id_str\":\"159822053\",\"indices\":[0,16]},{\"screen_name\":\"elonmusk\",\"name\":\"Elon Musk\",\"id\":44196397,\"id_str\":\"44196397\",\"indices\":[28,37]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Z6uUtZBr9c\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/elonmusk\\\/status\\\/1283224654576971777?s=19\",\"display_url\":\"twitter.com\\\/elonmusk\\\/statu\\u2026\",\"indices\":[50,73]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336672575070457858,\"in_reply_to_status_id_str\":\"1336672575070457858\",\"in_reply_to_user_id\":159822053,\"in_reply_to_user_id_str\":\"159822053\",\"in_reply_to_screen_name\":\"kelseyhightower\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1283224654576971777,\"quoted_status_id_str\":\"1283224654576971777\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2694806200\\\/b6bdf248063c0a18a8601f9c4649300a_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/2694806200\\\/b6bdf248063c0a18a8601f9c4649300a_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":5227,\"id_str\":\"5227\",\"name\":\"Steve McGhee\",\"screen_name\":\"stevemcghee\",\"location\":\"San Luis Obispo, CA\",\"description\":\"re-reborn californian \\\/\\\/ Google Cloud Wonk \\\/\\\/ former SRE \\\/\\\/ former athlete\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":508,\"friends_count\":951,\"listed_count\":15,\"created_at\":\"Sun Sep 03 19:08:08 +0000 2006\",\"favourites_count\":2605,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2593,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 23:02:17 +0000 2020\",\"id\":1336446026954108928,\"id_str\":\"1336446026954108928\",\"text\":\"This is so true and so weird. https:\\\/\\\/t.co\\\/o78qqmR5CM\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/o78qqmR5CM\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/apenwarr\\\/status\\\/1336428454884085760\",\"display_url\":\"twitter.com\\\/apenwarr\\\/statu\\u2026\",\"indices\":[30,53]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336428454884085760,\"quoted_status_id_str\":\"1336428454884085760\",\"retweet_count\":0,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/14165402\\\/megaman_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/14165402\\\/megaman_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/5227\\\/1576877608\",\"profile_link_color\":\"324649\",\"profile_sidebar_border_color\":\"0016FF\",\"profile_sidebar_fill_color\":\"6E97FF\",\"profile_text_color\":\"535353\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2259025633,\"id_str\":\"2259025633\",\"name\":\"Andy\",\"screen_name\":\"andybitz_\",\"location\":\"Irithyll of the Boreal Valley\",\"description\":\"Fullstack webdev followed by low-level enthusiast and wannabe gamedev.\\n\\nOccasionally artistic.\\n\\n@vercel\",\"url\":\"https:\\\/\\\/t.co\\\/Immm0FBj1V\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Immm0FBj1V\",\"expanded_url\":\"https:\\\/\\\/andybitz.io\",\"display_url\":\"andybitz.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":117,\"friends_count\":116,\"listed_count\":1,\"created_at\":\"Mon Dec 23 14:47:52 +0000 2013\",\"favourites_count\":618,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":79,\"lang\":null,\"status\":{\"created_at\":\"Fri Aug 07 22:44:33 +0000 2020\",\"id\":1291867855206723585,\"id_str\":\"1291867855206723585\",\"text\":\"@MaxRovensky https:\\\/\\\/t.co\\\/xNaz89TN3Q\\n\\nImagine the chaos you'd cause if you'd train a machine learning model that ca\\u2026 https:\\\/\\\/t.co\\\/ItXYmVhfCG\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"MaxRovensky\",\"name\":\"Max Rovensky\",\"id\":102483948,\"id_str\":\"102483948\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xNaz89TN3Q\",\"expanded_url\":\"https:\\\/\\\/en.m.wikipedia.org\\\/wiki\\\/Bus_(computing)\",\"display_url\":\"en.m.wikipedia.org\\\/wiki\\\/Bus_(comp\\u2026\",\"indices\":[13,36]},{\"url\":\"https:\\\/\\\/t.co\\\/ItXYmVhfCG\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1291867855206723585\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1291740540057186304,\"in_reply_to_status_id_str\":\"1291740540057186304\",\"in_reply_to_user_id\":102483948,\"in_reply_to_user_id_str\":\"102483948\",\"in_reply_to_screen_name\":\"MaxRovensky\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"EBEBEB\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme7\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme7\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1154866209709592577\\\/Nu8bv3Gp_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1154866209709592577\\\/Nu8bv3Gp_normal.jpg\",\"profile_link_color\":\"FA743E\",\"profile_sidebar_border_color\":\"DFDFDF\",\"profile_sidebar_fill_color\":\"F3F3F3\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":382162909,\"id_str\":\"382162909\",\"name\":\"Felicis Ventures\",\"screen_name\":\"felicis\",\"location\":\"Menlo Park, CA\",\"description\":\"Backing iconic companies reinventing critical markets and creating new frontiers; 29 $1B+ companies; $100B+ total market value created\",\"url\":\"https:\\\/\\\/t.co\\\/R9tTp7HtW4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/R9tTp7HtW4\",\"expanded_url\":\"http:\\\/\\\/www.felicis.com\",\"display_url\":\"felicis.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":9579,\"friends_count\":481,\"listed_count\":386,\"created_at\":\"Thu Sep 29 15:58:08 +0000 2011\",\"favourites_count\":989,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":989,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 18:29:34 +0000 2020\",\"id\":1334565457265717248,\"id_str\":\"1334565457265717248\",\"text\":\"We are proud to continue supporting @kpfortney &amp; the @bioagelabs team as they work to decrease the burden of diseas\\u2026 https:\\\/\\\/t.co\\\/vWMSpU6Pde\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kpfortney\",\"name\":\"Kristen Fortney\",\"id\":890816916817821696,\"id_str\":\"890816916817821696\",\"indices\":[36,46]},{\"screen_name\":\"bioagelabs\",\"name\":\"BioAge\",\"id\":3406128460,\"id_str\":\"3406128460\",\"indices\":[57,68]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vWMSpU6Pde\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334565457265717248\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334561412228796417,\"quoted_status_id_str\":\"1334561412228796417\",\"retweet_count\":1,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"CDD8DE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/799388928239222785\\\/sOmIl9Pn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/799388928239222785\\\/sOmIl9Pn_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/382162909\\\/1487278445\",\"profile_link_color\":\"E39116\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":8095292,\"id_str\":\"8095292\",\"name\":\"Aydin Senkut\",\"screen_name\":\"asenkut\",\"location\":\"Menlo Park, CA\",\"description\":\"Founder @Felicis | Investor @Adyen @Shopify @Fitbit @Pluralsight @Rovio @GuardantHealth @opendoor @notionhq | lucky husband & father\",\"url\":\"https:\\\/\\\/t.co\\\/R9tTp7HtW4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/R9tTp7HtW4\",\"expanded_url\":\"http:\\\/\\\/www.felicis.com\",\"display_url\":\"felicis.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":51314,\"friends_count\":1522,\"listed_count\":1720,\"created_at\":\"Fri Aug 10 03:11:41 +0000 2007\",\"favourites_count\":2806,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":3226,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 01:37:03 +0000 2020\",\"id\":1336484973986021376,\"id_str\":\"1336484973986021376\",\"text\":\"Well deserved for @dashamaggio \\\/ and agreed with @DamonKlotz ! https:\\\/\\\/t.co\\\/fN27GabUE8\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"dashamaggio\",\"name\":\"Dasha Maggio\",\"id\":424541862,\"id_str\":\"424541862\",\"indices\":[18,30]},{\"screen_name\":\"DamonKlotz\",\"name\":\"Damon Klotz (he\\\/him)\",\"id\":18665236,\"id_str\":\"18665236\",\"indices\":[49,60]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fN27GabUE8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/damonklotz\\\/status\\\/1336473027970797569\",\"display_url\":\"twitter.com\\\/damonklotz\\\/sta\\u2026\",\"indices\":[63,86]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336473027970797569,\"quoted_status_id_str\":\"1336473027970797569\",\"retweet_count\":2,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1251020908732592128\\\/6n-OLEz6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1251020908732592128\\\/6n-OLEz6_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/8095292\\\/1588529739\",\"profile_link_color\":\"E17F16\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"2F2E36\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":841717447975620608,\"id_str\":\"841717447975620608\",\"name\":\"Rippling\",\"screen_name\":\"Rippling\",\"location\":\"San Francisco, CA\",\"description\":\"We make it unbelievably easy to manage your team's payroll, benefits, computers, and apps. For customer support, DM us with your email and company name.\",\"url\":\"https:\\\/\\\/t.co\\\/Rixhm7tZRx\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Rixhm7tZRx\",\"expanded_url\":\"http:\\\/\\\/www.rippling.com\",\"display_url\":\"rippling.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1758,\"friends_count\":400,\"listed_count\":30,\"created_at\":\"Tue Mar 14 18:27:32 +0000 2017\",\"favourites_count\":256,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":245,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 19:51:50 +0000 2020\",\"id\":1336398100236275722,\"id_str\":\"1336398100236275722\",\"text\":\"@jsjoeio Hi there - We only have a chrome extension at the moment. I have shared this request internally and we wil\\u2026 https:\\\/\\\/t.co\\\/PcFsEDZjri\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jsjoeio\",\"name\":\"Joe Previte\",\"id\":1567529924,\"id_str\":\"1567529924\",\"indices\":[0,8]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PcFsEDZjri\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336398100236275722\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.zendesk.com\\\" rel=\\\"nofollow\\\">Zendesk<\\\/a>\",\"in_reply_to_status_id\":1336021216541306880,\"in_reply_to_status_id_str\":\"1336021216541306880\",\"in_reply_to_user_id\":1567529924,\"in_reply_to_user_id_str\":\"1567529924\",\"in_reply_to_screen_name\":\"jsjoeio\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1233496137056677888\\\/sLWxS6Gi_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1233496137056677888\\\/sLWxS6Gi_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/841717447975620608\\\/1582923371\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":824391063351631872,\"id_str\":\"824391063351631872\",\"name\":\"dhruba borthakur\",\"screen_name\":\"dhruba_rocks\",\"location\":\"San Francisco, CA\",\"description\":\"Rockset\",\"url\":\"https:\\\/\\\/t.co\\\/KtsvNXRdlv\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KtsvNXRdlv\",\"expanded_url\":\"http:\\\/\\\/rockset.com\",\"display_url\":\"rockset.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":173,\"friends_count\":42,\"listed_count\":6,\"created_at\":\"Wed Jan 25 22:58:40 +0000 2017\",\"favourites_count\":76,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":79,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 02:13:36 +0000 2020\",\"id\":1329971193999282177,\"id_str\":\"1329971193999282177\",\"text\":\"I have seen the S3 client library consume quite a bit of CPU to download small bits and pieces from S3 https:\\\/\\\/t.co\\\/7fQQnZxH2s\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7fQQnZxH2s\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/MarkCallaghanDB\\\/status\\\/1329827691810357249\",\"display_url\":\"twitter.com\\\/MarkCallaghanD\\u2026\",\"indices\":[103,126]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1329827691810357249,\"quoted_status_id_str\":\"1329827691810357249\",\"retweet_count\":0,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1317155365885071361\\\/Aswkz0J7_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1317155365885071361\\\/Aswkz0J7_normal.jpg\",\"profile_link_color\":\"64BFDC\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":588566031,\"id_str\":\"588566031\",\"name\":\"Venkat Venkataramani\",\"screen_name\":\"iamveeve\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":286,\"friends_count\":211,\"listed_count\":4,\"created_at\":\"Wed May 23 18:28:30 +0000 2012\",\"favourites_count\":430,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":196,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 07 06:55:08 +0000 2020\",\"id\":1324968612319301632,\"id_str\":\"1324968612319301632\",\"text\":\"50 shades of purple! https:\\\/\\\/t.co\\\/nc7jX6U3eu\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nc7jX6U3eu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/AdamMGrant\\\/status\\\/1324872885324935168\",\"display_url\":\"twitter.com\\\/AdamMGrant\\\/sta\\u2026\",\"indices\":[21,44]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"3ad0f706b3fa62a8\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/3ad0f706b3fa62a8.json\",\"place_type\":\"city\",\"name\":\"Palo Alto\",\"full_name\":\"Palo Alto, CA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-122.190523,37.362824],[-122.097537,37.362824],[-122.097537,37.465918],[-122.190523,37.465918]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1324872885324935168,\"quoted_status_id_str\":\"1324872885324935168\",\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/697834999173632000\\\/S8WMiY7x_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/697834999173632000\\\/S8WMiY7x_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2927758254,\"id_str\":\"2927758254\",\"name\":\"Houseparty\",\"screen_name\":\"houseparty\",\"location\":\"San Francisco, CA\",\"description\":\"The face to face social network. Stay home, stay social.\",\"url\":\"https:\\\/\\\/t.co\\\/BvcIepWd1Z\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/BvcIepWd1Z\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/3pDzBsN\",\"display_url\":\"bit.ly\\\/3pDzBsN\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":372836,\"friends_count\":12,\"listed_count\":1296,\"created_at\":\"Fri Dec 12 20:02:11 +0000 2014\",\"favourites_count\":69136,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":5588,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:13:20 +0000 2020\",\"id\":1336780996172103680,\"id_str\":\"1336780996172103680\",\"text\":\"@damianmohabir We're so sorry you're having technical problems. Please contact us at hello@houseparty.com and we'll take a closer look!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"damianmohabir\",\"name\":\"damian \\u2728\",\"id\":709858696,\"id_str\":\"709858696\",\"indices\":[0,14]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336779110882947072,\"in_reply_to_status_id_str\":\"1336779110882947072\",\"in_reply_to_user_id\":709858696,\"in_reply_to_user_id_str\":\"709858696\",\"in_reply_to_screen_name\":\"damianmohabir\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334635247250538497\\\/lEGPIjNn_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334635247250538497\\\/lEGPIjNn_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2927758254\\\/1607036814\",\"profile_link_color\":\"FAB81E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":121258930,\"id_str\":\"121258930\",\"name\":\"Epic Games Store\",\"screen_name\":\"EpicGames\",\"location\":\"Cary, NC\",\"description\":\"A curated digital storefront for PC and Mac, designed with both players and creators in mind. Focusing on great games and a fair deal for game developers.\",\"url\":\"https:\\\/\\\/t.co\\\/cAlkFB80kX\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/cAlkFB80kX\",\"expanded_url\":\"https:\\\/\\\/epic.gm\\\/free-games\",\"display_url\":\"epic.gm\\\/free-games\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4133615,\"friends_count\":15,\"listed_count\":5740,\"created_at\":\"Mon Mar 08 23:26:58 +0000 2010\",\"favourites_count\":613,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":6395,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:30:28 +0000 2020\",\"id\":1336755110647574532,\"id_str\":\"1336755110647574532\",\"text\":\"RT @PixelatedVicka: ooooooOOOOOooooo I'm still thinking about Bugsnax!\\n\\nEnjoy a Shy Weenyworm (the correct way to dress a hot dog): https:\\\/\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"PixelatedVicka\",\"name\":\"Victoria Rosenthal\",\"id\":825876307,\"id_str\":\"825876307\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 17:28:52 +0000 2020\",\"id\":1336724505939628032,\"id_str\":\"1336724505939628032\",\"text\":\"ooooooOOOOOooooo I'm still thinking about Bugsnax!\\n\\nEnjoy a Shy Weenyworm (the correct way to dress a hot dog):\\u2026 https:\\\/\\\/t.co\\\/EwapUal8eW\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EwapUal8eW\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336724505939628032\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[113,136]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":41,\"favorite_count\":345,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":41,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1324396209856012289\\\/XKEqvgvx_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1324396209856012289\\\/XKEqvgvx_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/121258930\\\/1604604892\",\"profile_link_color\":\"EDAE0E\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"944F1B\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":921772230953934848,\"id_str\":\"921772230953934848\",\"name\":\"rideOS\",\"screen_name\":\"rideOS\",\"location\":\"San Francisco, CA\",\"description\":\"Accelerating the safe, global adoption of next-generation human-driven and autonomously-controlled transportation\",\"url\":\"https:\\\/\\\/t.co\\\/3drCfVQJQ6\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3drCfVQJQ6\",\"expanded_url\":\"http:\\\/\\\/rideos.ai\",\"display_url\":\"rideos.ai\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":457,\"friends_count\":172,\"listed_count\":10,\"created_at\":\"Sat Oct 21 16:16:40 +0000 2017\",\"favourites_count\":56,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":244,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 17:28:51 +0000 2020\",\"id\":1335999730040537089,\"id_str\":\"1335999730040537089\",\"text\":\"RT @FordFund: To help students and families in Miami-Dade, @Ford, @ArgoAI and @FordFund are teaming up with @EducationFund for a pilot to d\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"FordFund\",\"name\":\"Ford Motor Company Fund\",\"id\":117459312,\"id_str\":\"117459312\",\"indices\":[3,12]},{\"screen_name\":\"Ford\",\"name\":\"Ford Motor Company\",\"id\":15676492,\"id_str\":\"15676492\",\"indices\":[59,64]},{\"screen_name\":\"argoai\",\"name\":\"Argo AI\",\"id\":829494326862426114,\"id_str\":\"829494326862426114\",\"indices\":[66,73]},{\"screen_name\":\"FordFund\",\"name\":\"Ford Motor Company Fund\",\"id\":117459312,\"id_str\":\"117459312\",\"indices\":[78,87]},{\"screen_name\":\"EducationFund\",\"name\":\"The Education Fund\",\"id\":35048177,\"id_str\":\"35048177\",\"indices\":[108,122]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 14:43:16 +0000 2020\",\"id\":1335958059055771655,\"id_str\":\"1335958059055771655\",\"text\":\"To help students and families in Miami-Dade, @Ford, @ArgoAI and @FordFund are teaming up with @EducationFund for a\\u2026 https:\\\/\\\/t.co\\\/qYWCks5nxO\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Ford\",\"name\":\"Ford Motor Company\",\"id\":15676492,\"id_str\":\"15676492\",\"indices\":[45,50]},{\"screen_name\":\"argoai\",\"name\":\"Argo AI\",\"id\":829494326862426114,\"id_str\":\"829494326862426114\",\"indices\":[52,59]},{\"screen_name\":\"FordFund\",\"name\":\"Ford Motor Company Fund\",\"id\":117459312,\"id_str\":\"117459312\",\"indices\":[64,73]},{\"screen_name\":\"EducationFund\",\"name\":\"The Education Fund\",\"id\":35048177,\"id_str\":\"35048177\",\"indices\":[94,108]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qYWCks5nxO\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335958059055771655\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":18,\"favorite_count\":90,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":18,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1278749916899098624\\\/HJwFP5VG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1278749916899098624\\\/HJwFP5VG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/921772230953934848\\\/1606775749\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14067452,\"id_str\":\"14067452\",\"name\":\"Phin Barnes\",\"screen_name\":\"phineasb\",\"location\":\"San Francisco\",\"description\":\"Sneakerhead. VC.\",\"url\":\"https:\\\/\\\/t.co\\\/VSh8aTmH84\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VSh8aTmH84\",\"expanded_url\":\"http:\\\/\\\/sneakerheadVC.com\",\"display_url\":\"sneakerheadVC.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":25296,\"friends_count\":1390,\"listed_count\":976,\"created_at\":\"Sun Mar 02 03:26:59 +0000 2008\",\"favourites_count\":6579,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9872,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 20:25:48 +0000 2020\",\"id\":1335319482768609281,\"id_str\":\"1335319482768609281\",\"text\":\"Love this from Steve Nash https:\\\/\\\/t.co\\\/jXvahtcOnP\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1335319438304821250,\"id_str\":\"1335319438304821250\",\"indices\":[26,49],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/ext_tw_video_thumb\\\/1335319438304821250\\\/pu\\\/img\\\/bZBmbc2mk4x5O9XH.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/ext_tw_video_thumb\\\/1335319438304821250\\\/pu\\\/img\\\/bZBmbc2mk4x5O9XH.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/jXvahtcOnP\",\"display_url\":\"pic.twitter.com\\\/jXvahtcOnP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/phineasb\\\/status\\\/1335319482768609281\\\/video\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":349,\"h\":680,\"resize\":\"fit\"},\"medium\":{\"w\":615,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":656,\"h\":1280,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1335319438304821250,\"id_str\":\"1335319438304821250\",\"indices\":[26,49],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/ext_tw_video_thumb\\\/1335319438304821250\\\/pu\\\/img\\\/bZBmbc2mk4x5O9XH.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/ext_tw_video_thumb\\\/1335319438304821250\\\/pu\\\/img\\\/bZBmbc2mk4x5O9XH.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/jXvahtcOnP\",\"display_url\":\"pic.twitter.com\\\/jXvahtcOnP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/phineasb\\\/status\\\/1335319482768609281\\\/video\\\/1\",\"type\":\"video\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":349,\"h\":680,\"resize\":\"fit\"},\"medium\":{\"w\":615,\"h\":1200,\"resize\":\"fit\"},\"large\":{\"w\":656,\"h\":1280,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[41,80],\"duration_millis\":38100,\"variants\":[{\"content_type\":\"application\\\/x-mpegURL\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/ext_tw_video\\\/1335319438304821250\\\/pu\\\/pl\\\/_khD9r4le3twda1Q.m3u8?tag=10\"},{\"bitrate\":2176000,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/ext_tw_video\\\/1335319438304821250\\\/pu\\\/vid\\\/656x1280\\\/Ni8v3IM5rXH5dI_1.mp4?tag=10\"},{\"bitrate\":832000,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/ext_tw_video\\\/1335319438304821250\\\/pu\\\/vid\\\/360x702\\\/q63srcOn26thPwAN.mp4?tag=10\"},{\"bitrate\":632000,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/ext_tw_video\\\/1335319438304821250\\\/pu\\\/vid\\\/320x624\\\/julO64HvojONC6Om.mp4?tag=10\"}]},\"additional_media_info\":{\"monetizable\":false}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/789859648979337216\\\/88XEIZP5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/789859648979337216\\\/88XEIZP5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14067452\\\/1398891938\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":117373375,\"id_str\":\"117373375\",\"name\":\"The Stanford Review\",\"screen_name\":\"StanfordReview\",\"location\":\"Stanford, CA\",\"description\":\"Stanford's Independent Paper since 1987\",\"url\":\"http:\\\/\\\/t.co\\\/iswsuhsu1y\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/iswsuhsu1y\",\"expanded_url\":\"http:\\\/\\\/www.stanfordreview.org\",\"display_url\":\"stanfordreview.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1342,\"friends_count\":245,\"listed_count\":42,\"created_at\":\"Thu Feb 25 10:50:18 +0000 2010\",\"favourites_count\":53,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1017,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 05:29:18 +0000 2020\",\"id\":1334006709203955712,\"id_str\":\"1334006709203955712\",\"text\":\"At @UChicago, a Woke Inquisition - and a Warning\\nhttps:\\\/\\\/t.co\\\/yTcOjVEpwX\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"UChicago\",\"name\":\"The University of Chicago\",\"id\":131144285,\"id_str\":\"131144285\",\"indices\":[3,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yTcOjVEpwX\",\"expanded_url\":\"https:\\\/\\\/stanfordreview.org\\\/stanford-uchicago-woke-inquisition\\\/\",\"display_url\":\"stanfordreview.org\\\/stanford-uchic\\u2026\",\"indices\":[49,72]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"AD0909\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/459797443492577281\\\/fox8mSOc_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/459797443492577281\\\/fox8mSOc_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/117373375\\\/1398468620\",\"profile_link_color\":\"990000\",\"profile_sidebar_border_color\":\"050505\",\"profile_sidebar_fill_color\":\"F56E6A\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":901602108356644865,\"id_str\":\"901602108356644865\",\"name\":\"Bloom\",\"screen_name\":\"Bloom\",\"location\":\"\",\"description\":\"Take control of your credit and identity. Download the app today: https:\\\/\\\/t.co\\\/k9i5xpzcHY\",\"url\":\"https:\\\/\\\/t.co\\\/IIZsk7uhZZ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IIZsk7uhZZ\",\"expanded_url\":\"https:\\\/\\\/bloom.co\",\"display_url\":\"bloom.co\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/k9i5xpzcHY\",\"expanded_url\":\"https:\\\/\\\/go.onelink.me\\\/9Fr3\\\/bf30b5a3\",\"display_url\":\"go.onelink.me\\\/9Fr3\\\/bf30b5a3\",\"indices\":[66,89]}]}},\"protected\":false,\"followers_count\":8452,\"friends_count\":13,\"listed_count\":189,\"created_at\":\"Sun Aug 27 00:27:48 +0000 2017\",\"favourites_count\":104,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":872,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 18 15:10:05 +0000 2020\",\"id\":1329079436788961281,\"id_str\":\"1329079436788961281\",\"text\":\"See our talk at EthOnline about the evolution of decentralized identity \\ud83d\\ude80 \\n\\nhttps:\\\/\\\/t.co\\\/kGDMJEmDmL\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kGDMJEmDmL\",\"expanded_url\":\"https:\\\/\\\/buff.ly\\\/2UDy4F4\",\"display_url\":\"buff.ly\\\/2UDy4F4\",\"indices\":[76,99]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/969048595918827520\\\/kEuRivlF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/969048595918827520\\\/kEuRivlF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/901602108356644865\\\/1519874212\",\"profile_link_color\":\"667EEA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1330110493,\"id_str\":\"1330110493\",\"name\":\"Affirm\",\"screen_name\":\"Affirm\",\"location\":\"San Francisco\",\"description\":\"Honest financial products that improve lives. Payment options are provided by: https:\\\/\\\/t.co\\\/neYmbA9PVU. Savings accounts are held by Cross River Bank, Member FDIC\",\"url\":\"https:\\\/\\\/t.co\\\/9k3ZUOHX6b\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9k3ZUOHX6b\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/2Sm7ujn\",\"display_url\":\"bit.ly\\\/2Sm7ujn\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/neYmbA9PVU\",\"expanded_url\":\"http:\\\/\\\/affirm.com\\\/lenders\",\"display_url\":\"affirm.com\\\/lenders\",\"indices\":[79,102]}]}},\"protected\":false,\"followers_count\":9020,\"friends_count\":418,\"listed_count\":202,\"created_at\":\"Fri Apr 05 21:18:24 +0000 2013\",\"favourites_count\":1884,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":2385,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:55:00 +0000 2020\",\"id\":1336746182782103554,\"id_str\":\"1336746182782103554\",\"text\":\"\\u2018Tis the season for a phone upgrade. Here\\u2019s how retailers and OEMs can cash in now. https:\\\/\\\/t.co\\\/CUUfGoK6H1 https:\\\/\\\/t.co\\\/SgeoYMthav\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CUUfGoK6H1\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/2JFrSKT\",\"display_url\":\"bit.ly\\\/2JFrSKT\",\"indices\":[84,107]}],\"media\":[{\"id\":1336746163484110850,\"id_str\":\"1336746163484110850\",\"indices\":[108,131],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0TjaVWMAIlPm9.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0TjaVWMAIlPm9.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/SgeoYMthav\",\"display_url\":\"pic.twitter.com\\\/SgeoYMthav\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Affirm\\\/status\\\/1336746182782103554\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":338,\"resize\":\"fit\"},\"large\":{\"w\":2048,\"h\":1019,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":597,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336746163484110850,\"id_str\":\"1336746163484110850\",\"indices\":[108,131],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0TjaVWMAIlPm9.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo0TjaVWMAIlPm9.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/SgeoYMthav\",\"display_url\":\"pic.twitter.com\\\/SgeoYMthav\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Affirm\\\/status\\\/1336746182782103554\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":338,\"resize\":\"fit\"},\"large\":{\"w\":2048,\"h\":1019,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":597,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.salesforce.com\\\" rel=\\\"nofollow\\\">Salesforce - Social Studio<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1328845027519332354\\\/TdQpAQ6K_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1328845027519332354\\\/TdQpAQ6K_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1330110493\\\/1593619527\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":43843030,\"id_str\":\"43843030\",\"name\":\"Sergey Surganov\",\"screen_name\":\"surganov\",\"location\":\"Moscow\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/g1IlSHthp2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/g1IlSHthp2\",\"expanded_url\":\"http:\\\/\\\/surganov.com\",\"display_url\":\"surganov.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1591,\"friends_count\":534,\"listed_count\":82,\"created_at\":\"Mon Jun 01 06:28:32 +0000 2009\",\"favourites_count\":3128,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":13221,\"lang\":null,\"status\":{\"created_at\":\"Sun Oct 18 09:36:02 +0000 2020\",\"id\":1317761348441415680,\"id_str\":\"1317761348441415680\",\"text\":\"@mylarmelodies @splitradix @pauldmorgan Nice! By the way, what\\u2019s your solution for overhead camera rig?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mylarmelodies\",\"name\":\"mylar melodies\",\"id\":19498272,\"id_str\":\"19498272\",\"indices\":[0,14]},{\"screen_name\":\"splitradix\",\"name\":\"splitradix\",\"id\":20906485,\"id_str\":\"20906485\",\"indices\":[15,26]},{\"screen_name\":\"pauldmorgan\",\"name\":\"paul morgan\",\"id\":20433870,\"id_str\":\"20433870\",\"indices\":[27,39]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1317737218715287552,\"in_reply_to_status_id_str\":\"1317737218715287552\",\"in_reply_to_user_id\":19498272,\"in_reply_to_user_id_str\":\"19498272\",\"in_reply_to_screen_name\":\"mylarmelodies\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229211924669370368\\\/mZabyvyE_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229211924669370368\\\/mZabyvyE_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/43843030\\\/1546301129\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":3386128527,\"id_str\":\"3386128527\",\"name\":\"Lisa Carey\",\"screen_name\":\"LisaCareyWrites\",\"location\":\"Portland, ME\",\"description\":\"Author @HarperPerennial & @wnbooks, partner to @librarythingtim, besotted mother. Soul divided between Maine and Ireland with a new colony in Ka\\u015f, Turkey.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":371,\"friends_count\":241,\"listed_count\":10,\"created_at\":\"Tue Jul 21 18:26:20 +0000 2015\",\"favourites_count\":1466,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":993,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 07 13:44:42 +0000 2020\",\"id\":1325071682323828736,\"id_str\":\"1325071682323828736\",\"text\":\"@librarythingtim Trash the whole week.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"librarythingtim\",\"name\":\"Tim Spalding\",\"id\":5917472,\"id_str\":\"5917472\",\"indices\":[0,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1324213255481532416,\"in_reply_to_status_id_str\":\"1324213255481532416\",\"in_reply_to_user_id\":5917472,\"in_reply_to_user_id_str\":\"5917472\",\"in_reply_to_screen_name\":\"librarythingtim\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/791719467550138368\\\/r0F8iWIF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/791719467550138368\\\/r0F8iWIF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3386128527\\\/1477671415\",\"profile_link_color\":\"DD2E44\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":946282488745246720,\"id_str\":\"946282488745246720\",\"name\":\"Paco\",\"screen_name\":\"pacocoursey\",\"location\":\"\",\"description\":\"Practicing Minimalist. Design and Code.\",\"url\":\"https:\\\/\\\/t.co\\\/hNgJTKrLVN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hNgJTKrLVN\",\"expanded_url\":\"https:\\\/\\\/paco.sh\",\"display_url\":\"paco.sh\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2582,\"friends_count\":403,\"listed_count\":37,\"created_at\":\"Thu Dec 28 07:31:41 +0000 2017\",\"favourites_count\":4178,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":343,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 01:31:34 +0000 2020\",\"id\":1335396433365626884,\"id_str\":\"1335396433365626884\",\"text\":\"@howardcjohn @rogie @turntablefm https:\\\/\\\/t.co\\\/LZ0pg7oRSh\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"howardcjohn\",\"name\":\"John Howard \\ud83d\\ude80\\ud83c\\udf12\",\"id\":16559034,\"id_str\":\"16559034\",\"indices\":[0,12]},{\"screen_name\":\"rogie\",\"name\":\"\\u02d7\\u02cf\\u02cb\\u0433o\\u0262\\u03b9\\u03b5 \\u02ce\\u02ca\",\"id\":9085252,\"id_str\":\"9085252\",\"indices\":[13,19]},{\"screen_name\":\"turntablefm\",\"name\":\"turntable\",\"id\":284611673,\"id_str\":\"284611673\",\"indices\":[20,32]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LZ0pg7oRSh\",\"expanded_url\":\"http:\\\/\\\/plug.dj\",\"display_url\":\"plug.dj\",\"indices\":[33,56]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335395220540837890,\"in_reply_to_status_id_str\":\"1335395220540837890\",\"in_reply_to_user_id\":16559034,\"in_reply_to_user_id_str\":\"16559034\",\"in_reply_to_screen_name\":\"howardcjohn\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133988261783670784\\\/ai0Qj7Ot_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133988261783670784\\\/ai0Qj7Ot_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/946282488745246720\\\/1559198845\",\"profile_link_color\":\"232323\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":390301795,\"id_str\":\"390301795\",\"name\":\"Marcos Nils\",\"screen_name\":\"marcosnils\",\"location\":\"\\u25b2\",\"description\":\"Principal @ Wildlife \\ud83c\\udfae  | X-Ops Head @ \\u25b2  | X-Infra lead @ MELI | Docker Captain \\ud83d\\udc0b\\u26f5 | PWD and OSS  \\u2764\\ufe0f. \\ud83c\\udf54\\ud83c\\udf77\\u26bd\\ufe0f\\u26f5\\ufe0f\\ud83c\\udfcb\\ufe0f\\ud83c\\udfc2 and some \\ud83d\\udd79\\ufe0f  \\ud83c\\udde6\\ud83c\\uddf7\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3411,\"friends_count\":137,\"listed_count\":83,\"created_at\":\"Thu Oct 13 19:32:08 +0000 2011\",\"favourites_count\":1947,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2378,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 05:08:29 +0000 2020\",\"id\":1336538183383781377,\"id_str\":\"1336538183383781377\",\"text\":\"Following up  on @_AkihiroSuda_ amazing blog post on latest Docker 20.10 release (https:\\\/\\\/t.co\\\/6TXkhCFd3u) ,\\u2026 https:\\\/\\\/t.co\\\/9GIWacmUN5\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"_AkihiroSuda_\",\"name\":\"Akihiro Suda\",\"id\":767921601954193408,\"id_str\":\"767921601954193408\",\"indices\":[17,31]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6TXkhCFd3u\",\"expanded_url\":\"https:\\\/\\\/medium.com\\\/nttlabs\\\/docker-20-10-59cc4bd59d37\",\"display_url\":\"medium.com\\\/nttlabs\\\/docker\\u2026\",\"indices\":[82,105]},{\"url\":\"https:\\\/\\\/t.co\\\/9GIWacmUN5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336538183383781377\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[110,133]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":18,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/630917288619847680\\\/YNTnYxza_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/630917288619847680\\\/YNTnYxza_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/390301795\\\/1561243323\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":744810563289546753,\"id_str\":\"744810563289546753\",\"name\":\"Represent Me\",\"screen_name\":\"RepMeCharity\",\"location\":\"Australia\",\"description\":\"Represent Me is a not-for-profit championing intersectional diversity and inclusion in games and the games industry.\",\"url\":\"https:\\\/\\\/t.co\\\/hLxJOCGZkT\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hLxJOCGZkT\",\"expanded_url\":\"http:\\\/\\\/representme.charity\",\"display_url\":\"representme.charity\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2835,\"friends_count\":110,\"listed_count\":45,\"created_at\":\"Mon Jun 20 08:34:11 +0000 2016\",\"favourites_count\":1002,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4016,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:41:22 +0000 2020\",\"id\":1336742754148237312,\"id_str\":\"1336742754148237312\",\"text\":\"RT @GIBiz: \\\"There is no way to work for the LGBTQ+ community without considering the impacts of other facets of identity: race, culture, re\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"GIBiz\",\"name\":\"GamesIndustry\",\"id\":46146200,\"id_str\":\"46146200\",\"indices\":[3,9]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 16:35:00 +0000 2020\",\"id\":1336710951081488387,\"id_str\":\"1336710951081488387\",\"text\":\"\\\"There is no way to work for the LGBTQ+ community without considering the impacts of other facets of identity: race\\u2026 https:\\\/\\\/t.co\\\/l05fvOFjOH\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/l05fvOFjOH\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336710951081488387\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1268075253818732544\\\/J821altA_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1268075253818732544\\\/J821altA_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/744810563289546753\\\/1600478350\",\"profile_link_color\":\"322850\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3155100389,\"id_str\":\"3155100389\",\"name\":\"IGDA LGBTQ+ SIG\",\"screen_name\":\"IGDA_LGBTQ_SIG\",\"location\":\"Worldwide\",\"description\":\"IGDA LGBTQ+ SIG is a space for queer folks in games and their allies. All tweets represent the SIG and those who lead it, and not necessarily the IGDA overall.\",\"url\":\"https:\\\/\\\/t.co\\\/jRreGdOXHy\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jRreGdOXHy\",\"expanded_url\":\"https:\\\/\\\/www.facebook.com\\\/groups\\\/IGDALGBTQSIG\\\/\",\"display_url\":\"facebook.com\\\/groups\\\/IGDALGB\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":565,\"friends_count\":30,\"listed_count\":6,\"created_at\":\"Sat Apr 11 03:34:25 +0000 2015\",\"favourites_count\":33,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":499,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 10:53:48 +0000 2020\",\"id\":1336625085206020097,\"id_str\":\"1336625085206020097\",\"text\":\"RT @BCbeactive: Happy #RainbowLaces Day! We hope you're all laced up with pride.\\ud83c\\udf08\\n\\nThis year @stonewalluk are sharing 10 tips to step up as\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"RainbowLaces\",\"indices\":[22,35]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"BCbeactive\",\"name\":\"Active Black Country \\ud83c\\udf08\",\"id\":87394449,\"id_str\":\"87394449\",\"indices\":[3,14]},{\"screen_name\":\"stonewalluk\",\"name\":\"stonewalluk\",\"id\":19651284,\"id_str\":\"19651284\",\"indices\":[93,105]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 08:07:17 +0000 2020\",\"id\":1336583181609410560,\"id_str\":\"1336583181609410560\",\"text\":\"Happy #RainbowLaces Day! We hope you're all laced up with pride.\\ud83c\\udf08\\n\\nThis year @stonewalluk are sharing 10 tips to st\\u2026 https:\\\/\\\/t.co\\\/s0ED40O6dX\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"RainbowLaces\",\"indices\":[6,19]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"stonewalluk\",\"name\":\"stonewalluk\",\"id\":19651284,\"id_str\":\"19651284\",\"indices\":[77,89]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/s0ED40O6dX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336583181609410560\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":11,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1062167002209386496\\\/b2A6Pb8j_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1062167002209386496\\\/b2A6Pb8j_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3155100389\\\/1542075344\",\"profile_link_color\":\"F58EA8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":121226571,\"id_str\":\"121226571\",\"name\":\"Sledgehammer Games\",\"screen_name\":\"SHGames\",\"location\":\"Foster City CA - Melbourne AU\",\"description\":\"Game Makers. Team behind #CODWWII, #AdvancedWarfare & #MW3. Follow our lifestyle account @LifeAtSHG! For game support: @ATVIAssist\",\"url\":\"https:\\\/\\\/t.co\\\/AkSuHbn1SS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AkSuHbn1SS\",\"expanded_url\":\"http:\\\/\\\/sledgehammergames.com\",\"display_url\":\"sledgehammergames.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1300299,\"friends_count\":559,\"listed_count\":1684,\"created_at\":\"Mon Mar 08 21:02:45 +0000 2010\",\"favourites_count\":6480,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":9665,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 17:44:42 +0000 2020\",\"id\":1334916555143073792,\"id_str\":\"1334916555143073792\",\"text\":\"RT @LifeAtSHG: The winner of the @NSBE Region VI 2020 Hackathon Challenge is... \\n\\n*Grocery Run 2020* \\ud83e\\uddfb\\ud83e\\uddfb\\ud83e\\uddfb\\n\\nA BIG shout out to everyone who p\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LifeAtSHG\",\"name\":\"Life At Sledgehammer Games\",\"id\":1021513776015663105,\"id_str\":\"1021513776015663105\",\"indices\":[3,13]},{\"screen_name\":\"NSBE\",\"name\":\"NSBE\",\"id\":18419094,\"id_str\":\"18419094\",\"indices\":[33,38]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 17:40:58 +0000 2020\",\"id\":1334915611789561856,\"id_str\":\"1334915611789561856\",\"text\":\"The winner of the @NSBE Region VI 2020 Hackathon Challenge is... \\n\\n*Grocery Run 2020* \\ud83e\\uddfb\\ud83e\\uddfb\\ud83e\\uddfb\\n\\nA BIG shout out to every\\u2026 https:\\\/\\\/t.co\\\/p1GRVBgBkY\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NSBE\",\"name\":\"NSBE\",\"id\":18419094,\"id_str\":\"18419094\",\"indices\":[18,23]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/p1GRVBgBkY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334915611789561856\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":36,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1316135547463634944\\\/doFtj6e5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1316135547463634944\\\/doFtj6e5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/121226571\\\/1593717038\",\"profile_link_color\":\"3399CC\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"303030\",\"profile_text_color\":\"8F8888\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4095361159,\"id_str\":\"4095361159\",\"name\":\"Oblique Questions\",\"screen_name\":\"obliquestions\",\"location\":\"Portland, OR\",\"description\":\"Questions without context, extracted from Project Gutenberg books. A Twitter bot by @matthewmcvickar.\",\"url\":\"https:\\\/\\\/t.co\\\/ihtVm7KkJs\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ihtVm7KkJs\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/matthewmcvickar\\\/oblique-questions-bot\",\"display_url\":\"github.com\\\/matthewmcvicka\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":898,\"friends_count\":4,\"listed_count\":50,\"created_at\":\"Sun Nov 01 22:31:11 +0000 2015\",\"favourites_count\":0,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":11326,\"lang\":null,\"status\":{\"created_at\":\"Tue Jun 02 04:02:56 +0000 2020\",\"id\":1267667995511320576,\"id_str\":\"1267667995511320576\",\"text\":\"\\ud83d\\udccc A message from this bot\\u2019s creator:\\n\\nThis bot will not be posting for a while.\\n\\nIf you like this bot and are able,\\u2026 https:\\\/\\\/t.co\\\/UiDvPS42Gp\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UiDvPS42Gp\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1267667995511320576\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/662044522696671232\\\/kPkdEI8t_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/662044522696671232\\\/kPkdEI8t_normal.png\",\"profile_link_color\":\"333333\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":704764465967820800,\"id_str\":\"704764465967820800\",\"name\":\"Donut.js \\ud83c\\udf69\",\"screen_name\":\"donutjs\",\"location\":\"Portland, OR\",\"description\":\"Monthly event with talks on tech, community, and creativity served with donuts and friendliness. \\u2022 hello@donutjs.club \\u2022 Tweets by @matthewmcvickar \\u2022 \\ud83c\\udf69\\u203f\\ud83c\\udf69\",\"url\":\"https:\\\/\\\/t.co\\\/V3WtwchH5R\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V3WtwchH5R\",\"expanded_url\":\"https:\\\/\\\/donutjs.club\",\"display_url\":\"donutjs.club\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1035,\"friends_count\":1,\"listed_count\":0,\"created_at\":\"Tue Mar 01 20:25:17 +0000 2016\",\"favourites_count\":1158,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1879,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 10 22:23:25 +0000 2020\",\"id\":1326289385101221890,\"id_str\":\"1326289385101221890\",\"text\":\"Hi friends! Quick update: We moved our money to \\n@opencollect (https:\\\/\\\/t.co\\\/ho3NFSBcmd). We\\u2019re saving funds for fut\\u2026 https:\\\/\\\/t.co\\\/Dj4x7v0wBD\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"opencollect\",\"name\":\"Open Collective\",\"id\":4280096173,\"id_str\":\"4280096173\",\"indices\":[49,61]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ho3NFSBcmd\",\"expanded_url\":\"https:\\\/\\\/opencollective.com\\\/donutjs\",\"display_url\":\"opencollective.com\\\/donutjs\",\"indices\":[63,86]},{\"url\":\"https:\\\/\\\/t.co\\\/Dj4x7v0wBD\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1326289385101221890\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/704769418841055232\\\/psXKPCmf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/704769418841055232\\\/psXKPCmf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/704764465967820800\\\/1456864185\",\"profile_link_color\":\"F288A9\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"}],\"next_cursor\":1649184414151530823,\"next_cursor_str\":\"1649184414151530823\",\"previous_cursor\":0,\"previous_cursor_str\":\"0\",\"total_count\":null}}","correlation_id":"0a1c7abd-b0fb-4333-bdb8-3e5d91db404c","screen_name":"thierrymarianne","cursor":"-1","occurred_at":"2020-12-09T22:36:19+00:00","ended_at":"2020-12-09T22:36:19+00:00","started_at":"2020-12-09T22:36:19+00:00"}