{"payload":"{\"method\":\"getListAtCursor\",\"options\":{\"screen_name\":\"thierrymarianne\",\"cursor\":\"-1\",\"correlation_id\":\"ab8db871-e9bb-4865-ab54-65524b608f5e\"},\"response\":{\"users\":[{\"id\":1269544183318093828,\"id_str\":\"1269544183318093828\",\"name\":\"coding.blog\",\"screen_name\":\"coding_blog\",\"location\":\"Munich\",\"description\":\"A blog platform for developers, for everything coding. Not for content-marketing. Not for ads. Quality. Articles. About. Coding.\",\"url\":\"https:\\\/\\\/t.co\\\/pU3QUCwE2O\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pU3QUCwE2O\",\"expanded_url\":\"https:\\\/\\\/coding.blog\",\"display_url\":\"coding.blog\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":559,\"friends_count\":2169,\"listed_count\":8,\"created_at\":\"Sun Jun 07 08:18:28 +0000 2020\",\"favourites_count\":494,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":105,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 07:48:08 +0000 2020\",\"id\":1334766422413729796,\"id_str\":\"1334766422413729796\",\"text\":\"RT @schiefewelt: Organic House it is. This genre just thrives me to create more and more. Best music to get me into the flow state when cod\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"schiefewelt\",\"name\":\"Umut Topuzo\\u011flu\",\"id\":3245346255,\"id_str\":\"3245346255\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 10:50:53 +0000 2020\",\"id\":1334450024609173505,\"id_str\":\"1334450024609173505\",\"text\":\"Organic House it is. This genre just thrives me to create more and more. Best music to get me into the flow state w\\u2026 https:\\\/\\\/t.co\\\/CVp36oIfWI\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CVp36oIfWI\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334450024609173505\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1269545636027916289\\\/kQ4zDs7O_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1269545636027916289\\\/kQ4zDs7O_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1269544183318093828\\\/1591518381\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2294246358,\"id_str\":\"2294246358\",\"name\":\"NERC GW4+ Doctoral Training Partnership\",\"screen_name\":\"GW4plusDTP\",\"location\":\"Bath, Bristol, Cambridge, Cardiff, Exeter, Keyworth, London, Plymouth and Wallingford\",\"description\":\"Providing a training and careers development programme for PhD researchers from the Universities of Bath, Bristol, Cardiff & Exeter & 5 research organisations.\",\"url\":\"http:\\\/\\\/t.co\\\/0BGsf6Q8D3\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/0BGsf6Q8D3\",\"expanded_url\":\"http:\\\/\\\/www.nercgw4plus.ac.uk\",\"display_url\":\"nercgw4plus.ac.uk\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":869,\"friends_count\":562,\"listed_count\":11,\"created_at\":\"Thu Jan 16 10:45:37 +0000 2014\",\"favourites_count\":145,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":219,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 12:22:30 +0000 2020\",\"id\":1336647407266902018,\"id_str\":\"1336647407266902018\",\"text\":\"RT @penguinsci: @claranellist Penguins and climate change! \\ud83d\\udc27 https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"penguinsci\",\"name\":\"Katie O'Brien\",\"id\":1235299787441872896,\"id_str\":\"1235299787441872896\",\"indices\":[3,14]},{\"screen_name\":\"claranellist\",\"name\":\"Dr Clara Nellist\",\"id\":52053878,\"id_str\":\"52053878\",\"indices\":[16,29]}],\"urls\":[],\"media\":[{\"id\":1336627844009648130,\"id_str\":\"1336627844009648130\",\"indices\":[61,84],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"display_url\":\"pic.twitter.com\\\/iMk5blS6Jm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/penguinsci\\\/status\\\/1336627855074201601\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":268,\"resize\":\"fit\"}},\"source_status_id\":1336627855074201601,\"source_status_id_str\":\"1336627855074201601\",\"source_user_id\":1235299787441872896,\"source_user_id_str\":\"1235299787441872896\"}]},\"extended_entities\":{\"media\":[{\"id\":1336627844009648130,\"id_str\":\"1336627844009648130\",\"indices\":[61,84],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"display_url\":\"pic.twitter.com\\\/iMk5blS6Jm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/penguinsci\\\/status\\\/1336627855074201601\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":268,\"resize\":\"fit\"}},\"source_status_id\":1336627855074201601,\"source_status_id_str\":\"1336627855074201601\",\"source_user_id\":1235299787441872896,\"source_user_id_str\":\"1235299787441872896\",\"video_info\":{\"aspect_ratio\":[125,67],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/Eoyn8T8XYAImuVd.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 11:04:48 +0000 2020\",\"id\":1336627855074201601,\"id_str\":\"1336627855074201601\",\"text\":\"@claranellist Penguins and climate change! \\ud83d\\udc27 https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"claranellist\",\"name\":\"Dr Clara Nellist\",\"id\":52053878,\"id_str\":\"52053878\",\"indices\":[0,13]}],\"urls\":[],\"media\":[{\"id\":1336627844009648130,\"id_str\":\"1336627844009648130\",\"indices\":[45,68],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"display_url\":\"pic.twitter.com\\\/iMk5blS6Jm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/penguinsci\\\/status\\\/1336627855074201601\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":268,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336627844009648130,\"id_str\":\"1336627844009648130\",\"indices\":[45,68],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eoyn8T8XYAImuVd.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/iMk5blS6Jm\",\"display_url\":\"pic.twitter.com\\\/iMk5blS6Jm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/penguinsci\\\/status\\\/1336627855074201601\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"large\":{\"w\":500,\"h\":268,\"resize\":\"fit\"},\"medium\":{\"w\":500,\"h\":268,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[125,67],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/Eoyn8T8XYAImuVd.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336091757088567297,\"in_reply_to_status_id_str\":\"1336091757088567297\",\"in_reply_to_user_id\":52053878,\"in_reply_to_user_id_str\":\"52053878\",\"in_reply_to_screen_name\":\"claranellist\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330536625546342404\\\/4AYhjiOm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330536625546342404\\\/4AYhjiOm_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2294246358\\\/1606066308\",\"profile_link_color\":\"981CEB\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":963438785936744448,\"id_str\":\"963438785936744448\",\"name\":\"Upway.io\",\"screen_name\":\"Upwayio\",\"location\":\"Lyon, France\",\"description\":\"D\\u00e9nicheur de talents informatiques en freelance \\ud83d\\ude80\\n\\n#web #mobile #technique #fonctionnel  #developpeur #php #java #react #ruby #symfony #amoa #web\",\"url\":\"https:\\\/\\\/t.co\\\/kcqiwz3ezk\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kcqiwz3ezk\",\"expanded_url\":\"http:\\\/\\\/www.upway.io\",\"display_url\":\"upway.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1405,\"friends_count\":1193,\"listed_count\":9,\"created_at\":\"Tue Feb 13 15:44:41 +0000 2018\",\"favourites_count\":925,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":718,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:32:41 +0000 2020\",\"id\":1336710369570660352,\"id_str\":\"1336710369570660352\",\"text\":\"\\u26a1[Up\\u2019Offer] \\u26a1\\n\\nComment imaginez-vous les v\\u00e9hicules industriels du #futur ? \\ud83d\\udcad\\n \\nSi vous vrombissez d\\u2019id\\u00e9es et que vo\\u2026 https:\\\/\\\/t.co\\\/Xqkd8jn9kR\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"futur\",\"indices\":[66,72]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Xqkd8jn9kR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336710369570660352\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/964513651309907971\\\/uPYCMhnq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/964513651309907971\\\/uPYCMhnq_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/963438785936744448\\\/1580320732\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1306944890119639040,\"id_str\":\"1306944890119639040\",\"name\":\"Awesome Go Repos\",\"screen_name\":\"AwesomeGoRepos\",\"location\":\"\",\"description\":\"Tweeting links to awesome Go repos. \\n\\nhttps:\\\/\\\/t.co\\\/IomrIanyP9\\n\\nRun by @aarondfrancis (and his computers)\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IomrIanyP9\",\"expanded_url\":\"http:\\\/\\\/aggregatedawesome.com\\\/go\",\"display_url\":\"aggregatedawesome.com\\\/go\",\"indices\":[38,61]}]}},\"protected\":false,\"followers_count\":220,\"friends_count\":3203,\"listed_count\":2,\"created_at\":\"Fri Sep 18 13:15:34 +0000 2020\",\"favourites_count\":1,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":389,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:49:39 +0000 2020\",\"id\":1336759938253778946,\"id_str\":\"1336759938253778946\",\"text\":\"sql-migrate (1967 \\u2605, updated 5 months ago)\\n\\nSQL schema migration tool for Go. \\nhttps:\\\/\\\/t.co\\\/yGjz12Nm4d\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yGjz12Nm4d\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/rubenv\\\/sql-migrate\",\"display_url\":\"github.com\\\/rubenv\\\/sql-mig\\u2026\",\"indices\":[79,102]}]},\"source\":\"<a href=\\\"http:\\\/\\\/aaronfrancis.com\\\" rel=\\\"nofollow\\\">Prospector App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1306946372688580610\\\/TfCCltmy_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1306946372688580610\\\/TfCCltmy_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1306944890119639040\\\/1600435272\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":197530793,\"id_str\":\"197530793\",\"name\":\"Arthur Ggd\",\"screen_name\":\"ArthyGgd\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":38,\"friends_count\":113,\"listed_count\":2,\"created_at\":\"Fri Oct 01 19:06:36 +0000 2010\",\"favourites_count\":10,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":37,\"lang\":null,\"status\":{\"created_at\":\"Tue Jan 28 00:32:51 +0000 2020\",\"id\":1221954252651868165,\"id_str\":\"1221954252651868165\",\"text\":\"RT @felixge: 1) Are you using #postgres via #docker for mac?\\n\\nHave you ever noticed `EXPLAIN ANALYZE` slowing down your queries by like 60x\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"postgres\",\"indices\":[30,39]},{\"text\":\"docker\",\"indices\":[44,51]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"felixge\",\"name\":\"Felix Geisend\\u00f6rfer\",\"id\":9599342,\"id_str\":\"9599342\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Jan 26 19:17:31 +0000 2020\",\"id\":1221512507690496001,\"id_str\":\"1221512507690496001\",\"text\":\"1) Are you using #postgres via #docker for mac?\\n\\nHave you ever noticed `EXPLAIN ANALYZE` slowing down your queries\\u2026 https:\\\/\\\/t.co\\\/j5dPcJma4B\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"postgres\",\"indices\":[17,26]},{\"text\":\"docker\",\"indices\":[31,38]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/j5dPcJma4B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1221512507690496001\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":193,\"favorite_count\":466,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":193,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3256498654\\\/f82be8c527d6a403d722a30e9883c6cb_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3256498654\\\/f82be8c527d6a403d722a30e9883c6cb_normal.jpeg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":91636366,\"id_str\":\"91636366\",\"name\":\"\\ud83c\\udd82\\ud83c\\udd7e\\ud83c\\udd7f\\ud83c\\udd77\\ud83c\\udd78\\ud83c\\udd70 \\ud83c\\udd7c\\ud83c\\udd78\\ud83c\\udd7b\\ud83c\\udd7b\\ud83c\\udd74\\ud83c\\udd81 \\ud83d\\udc8b\",\"screen_name\":\"Sophia_56673\",\"location\":\"\\ud83d\\udccd US \\ud83c\\uddfa\\ud83c\\uddf8\",\"description\":\"A beautiful girl wants to meet an interesting men!Add me and I\\u00b4ll send you a message with my most favorite photo  \\ud83d\\udc59\\ud83d\\ude1a\\ud83d\\udc9d\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":5,\"friends_count\":793,\"listed_count\":0,\"created_at\":\"Sat Nov 21 19:26:43 +0000 2009\",\"favourites_count\":0,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":30,\"lang\":null,\"status\":{\"created_at\":\"Fri Oct 23 02:19:17 +0000 2020\",\"id\":1319463373394894848,\"id_str\":\"1319463373394894848\",\"text\":\"Those Who Don't Believe In Magic Will Never Find It. \\ud83c\\udf80\\ud83d\\udc57 https:\\\/\\\/t.co\\\/NyzqdZH1kY\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1319463364792373254,\"id_str\":\"1319463364792373254\",\"indices\":[56,79],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Ek-s8ICXUAYV9Ka.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Ek-s8ICXUAYV9Ka.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NyzqdZH1kY\",\"display_url\":\"pic.twitter.com\\\/NyzqdZH1kY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/fewkes21\\\/status\\\/1319463373394894848\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":656,\"resize\":\"fit\"},\"large\":{\"w\":918,\"h\":885,\"resize\":\"fit\"},\"medium\":{\"w\":918,\"h\":885,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1319463364792373254,\"id_str\":\"1319463364792373254\",\"indices\":[56,79],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Ek-s8ICXUAYV9Ka.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Ek-s8ICXUAYV9Ka.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NyzqdZH1kY\",\"display_url\":\"pic.twitter.com\\\/NyzqdZH1kY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/fewkes21\\\/status\\\/1319463373394894848\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":656,\"resize\":\"fit\"},\"large\":{\"w\":918,\"h\":885,\"resize\":\"fit\"},\"medium\":{\"w\":918,\"h\":885,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1319463381590487040\\\/w_ZpZCEU_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1319463381590487040\\\/w_ZpZCEU_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/91636366\\\/1603419561\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":316435980,\"id_str\":\"316435980\",\"name\":\"Devrimci\",\"screen_name\":\"Mikael_Orkhan\",\"location\":\"Baku, Azerbaijan\",\"description\":\"revolutioner\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":114,\"friends_count\":337,\"listed_count\":0,\"created_at\":\"Mon Jun 13 13:04:03 +0000 2011\",\"favourites_count\":3937,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2678,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 14:43:07 +0000 2020\",\"id\":1336320407083732993,\"id_str\":\"1336320407083732993\",\"text\":\"RT @Muhammed_018: \\u041d\\u0435\\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u043f\\u043e\\u0432\\u043e\\u0440\\u043e\\u0442. Syrians for Truth and Justice \\u0443\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0430\\u044e\\u0442, \\u0447\\u0442\\u043e \\u0441\\u043e\\u0442\\u043d\\u0438 \\u0441\\u0438\\u0440\\u0438\\u0439\\u0446\\u0435\\u0432 \\u0431\\u044b\\u043b\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u044b \\u0432 \\u041a\\u0430\\u0440\\u0430\\u0431\\u0430\\u0445 \\u0432\\u043e\\u0435\\u0432\\u0430\\u0442\\u044c \\u043d\\u0430 \\u0441\\u0442\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Muhammed_018\",\"name\":\"\\u041c\\u0443\\u0445\\u0430\\u043c\\u0435\\u0434 \\u0410\\u043b\\u0438\\u0435\\u0432\",\"id\":1313012858452684803,\"id_str\":\"1313012858452684803\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 14:25:23 +0000 2020\",\"id\":1336315945120374789,\"id_str\":\"1336315945120374789\",\"text\":\"\\u041d\\u0435\\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u043f\\u043e\\u0432\\u043e\\u0440\\u043e\\u0442. Syrians for Truth and Justice \\u0443\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0430\\u044e\\u0442, \\u0447\\u0442\\u043e \\u0441\\u043e\\u0442\\u043d\\u0438 \\u0441\\u0438\\u0440\\u0438\\u0439\\u0446\\u0435\\u0432 \\u0431\\u044b\\u043b\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u044b \\u0432 \\u041a\\u0430\\u0440\\u0430\\u0431\\u0430\\u0445 \\u0432\\u043e\\u0435\\u0432\\u0430\\u0442\\u044c\\u2026 https:\\\/\\\/t.co\\\/S9YRCoKzkP\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/S9YRCoKzkP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336315945120374789\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":42,\"favorite_count\":236,\"favorited\":false,\"retweeted\":false,\"lang\":\"ru\"},\"is_quote_status\":false,\"retweet_count\":42,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"ru\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"0C0300\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320810753507659781\\\/83JoMc2N_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320810753507659781\\\/83JoMc2N_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/316435980\\\/1603299266\",\"profile_link_color\":\"105DA1\",\"profile_sidebar_border_color\":\"321EB9\",\"profile_sidebar_fill_color\":\"86E0F8\",\"profile_text_color\":\"9480D4\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3283996374,\"id_str\":\"3283996374\",\"name\":\"philip browning\",\"screen_name\":\"browningphilip1\",\"location\":\"Australia: Cbr Syd Mel\",\"description\":\"Founder, Enterpreneur, Trusted Advisor, Strategist, Innovator; Instigator; #food #digital #value #data #blockchain #marketplaces #platforms #systems\",\"url\":\"https:\\\/\\\/t.co\\\/56bNPnc8ar\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/56bNPnc8ar\",\"expanded_url\":\"http:\\\/\\\/www.smartoysters.com\",\"display_url\":\"smartoysters.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":930,\"friends_count\":3728,\"listed_count\":219,\"created_at\":\"Sun Jul 19 06:12:38 +0000 2015\",\"favourites_count\":9806,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3687,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 04:23:38 +0000 2020\",\"id\":1336164510726463489,\"id_str\":\"1336164510726463489\",\"text\":\"@QUTEship  @foodagility\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"QUTEship\",\"name\":\"QUT Entrepreneurship\",\"id\":770040894376509441,\"id_str\":\"770040894376509441\",\"indices\":[0,9]},{\"screen_name\":\"foodagility\",\"name\":\"Food Agility CRC\",\"id\":709215112565907459,\"id_str\":\"709215112565907459\",\"indices\":[11,23]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336164205188136961,\"in_reply_to_status_id_str\":\"1336164205188136961\",\"in_reply_to_user_id\":3283996374,\"in_reply_to_user_id_str\":\"3283996374\",\"in_reply_to_screen_name\":\"browningphilip1\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856728755053527040\\\/uG8HLlHV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856728755053527040\\\/uG8HLlHV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3283996374\\\/1493095127\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":141463816,\"id_str\":\"141463816\",\"name\":\"R\\u00fana Bouius\",\"screen_name\":\"RunaBouius\",\"location\":\"Los Angeles, California\",\"description\":\"#ConsciousLeadership | #Power | #EmergingLeadershipTrends | #Well-Being | #Culture | #CollectiveIntelligence | #Regeneration |#Decentralization | #Economy\",\"url\":\"https:\\\/\\\/t.co\\\/M4Fo0E9pEg\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/M4Fo0E9pEg\",\"expanded_url\":\"https:\\\/\\\/truepowerinstitute.com\\\/\",\"display_url\":\"truepowerinstitute.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1863,\"friends_count\":2813,\"listed_count\":78,\"created_at\":\"Sat May 08 04:50:10 +0000 2010\",\"favourites_count\":21166,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":20281,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:01:10 +0000 2020\",\"id\":1336793034218934273,\"id_str\":\"1336793034218934273\",\"text\":\"Deep listening is an art-form and needs to be learned and cultivated. You want to listen to understand instead of l\\u2026 https:\\\/\\\/t.co\\\/sJn6VhVuwl\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/sJn6VhVuwl\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336793034218934273\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite Inc.<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"DBE9ED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme17\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme17\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1303170338235191297\\\/nspl4N9h_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1303170338235191297\\\/nspl4N9h_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/141463816\\\/1603405738\",\"profile_link_color\":\"CC3352\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"E6F6F9\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1260559582663004166,\"id_str\":\"1260559582663004166\",\"name\":\"SecurityBash\",\"screen_name\":\"Securitybash\",\"location\":\"\",\"description\":\"A central place to see all the Security news, tutorials and information specifically for devs.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":758,\"friends_count\":3891,\"listed_count\":7,\"created_at\":\"Wed May 13 13:16:48 +0000 2020\",\"favourites_count\":1351,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":228,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:30:13 +0000 2020\",\"id\":1336739949039726597,\"id_str\":\"1336739949039726597\",\"text\":\"How to Safely Store a Password(2010)\\nhttps:\\\/\\\/t.co\\\/s7KlEYTBNm\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/s7KlEYTBNm\",\"expanded_url\":\"https:\\\/\\\/codahale.com\\\/how-to-safely-store-a-password\\\/\",\"display_url\":\"codahale.com\\\/how-to-safely-\\u2026\",\"indices\":[37,60]}]},\"source\":\"<a href=\\\"https:\\\/\\\/crowdfireapp.com\\\" rel=\\\"nofollow\\\">Crowdfire App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1264651100432539659\\\/PZe2i5Go_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1264651100432539659\\\/PZe2i5Go_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2216242399,\"id_str\":\"2216242399\",\"name\":\"nicolas decoster\",\"screen_name\":\"ogadaki\",\"location\":\"canvas\",\"description\":\"Building (and using) programming tools for end-users (hobbyist, creator, narrator, designer, artist, scientist, musicians...)\\n\\nCreator of @adacraft_org\",\"url\":\"https:\\\/\\\/t.co\\\/4utWrnWWHp\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4utWrnWWHp\",\"expanded_url\":\"https:\\\/\\\/adacraft.org\",\"display_url\":\"adacraft.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":534,\"friends_count\":1227,\"listed_count\":43,\"created_at\":\"Tue Nov 26 19:22:05 +0000 2013\",\"favourites_count\":3435,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1871,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 09:43:53 +0000 2020\",\"id\":1336607489731727360,\"id_str\":\"1336607489731727360\",\"text\":\"RT @tlse_dasci: N'oubliez pas de vous inscrire pour le meetup de ce soir avec @ogadaki qui vous pr\\u00e9sentera @adacraft_org \\ud83d\\ude42\\n\\nhttps:\\\/\\\/t.co\\\/dF\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"tlse_dasci\",\"name\":\"Toulouse DataScience\",\"id\":2851362587,\"id_str\":\"2851362587\",\"indices\":[3,14]},{\"screen_name\":\"ogadaki\",\"name\":\"nicolas decoster\",\"id\":2216242399,\"id_str\":\"2216242399\",\"indices\":[78,86]},{\"screen_name\":\"adacraft_org\",\"name\":\"adacraft\",\"id\":1291655124486627330,\"id_str\":\"1291655124486627330\",\"indices\":[107,120]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 08:26:52 +0000 2020\",\"id\":1336588110554148864,\"id_str\":\"1336588110554148864\",\"text\":\"N'oubliez pas de vous inscrire pour le meetup de ce soir avec @ogadaki qui vous pr\\u00e9sentera @adacraft_org \\ud83d\\ude42\\u2026 https:\\\/\\\/t.co\\\/fQc9NWHV3n\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ogadaki\",\"name\":\"nicolas decoster\",\"id\":2216242399,\"id_str\":\"2216242399\",\"indices\":[62,70]},{\"screen_name\":\"adacraft_org\",\"name\":\"adacraft\",\"id\":1291655124486627330,\"id_str\":\"1291655124486627330\",\"indices\":[91,104]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/fQc9NWHV3n\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336588110554148864\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[108,131]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334863213914181638,\"quoted_status_id_str\":\"1334863213914181638\",\"retweet_count\":2,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":true,\"quoted_status_id\":1334863213914181638,\"quoted_status_id_str\":\"1334863213914181638\",\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1326080079697485824\\\/bRa3PV1W_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1326080079697485824\\\/bRa3PV1W_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2216242399\\\/1418734190\",\"profile_link_color\":\"EC7336\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4847154914,\"id_str\":\"4847154914\",\"name\":\"Shelmex\",\"screen_name\":\"shelmex_mfg\",\"location\":\"Monterrey, Nuevo Le\\u00f3n\",\"description\":\"Shelmex provides agile manufacturing and distribution services in Mexico.\",\"url\":\"https:\\\/\\\/t.co\\\/V9Oxyfw6jl\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/V9Oxyfw6jl\",\"expanded_url\":\"http:\\\/\\\/www.shelmex.com\\\/\",\"display_url\":\"shelmex.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3811,\"friends_count\":2178,\"listed_count\":6,\"created_at\":\"Tue Feb 02 02:03:39 +0000 2016\",\"favourites_count\":0,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1366,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:24:20 +0000 2020\",\"id\":1336798864565735430,\"id_str\":\"1336798864565735430\",\"text\":\"We provide customizable solutions for multiple benefits.\\n\\nhttps:\\\/\\\/t.co\\\/15erU13921\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/15erU13921\",\"expanded_url\":\"http:\\\/\\\/shelmex.com\\\/oursolutions\\\/\",\"display_url\":\"shelmex.com\\\/oursolutions\\\/\",\"indices\":[58,81]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.socialjukebox.com\\\" rel=\\\"nofollow\\\">The Social Jukebox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/694340946964541440\\\/gs11CjZg_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/694340946964541440\\\/gs11CjZg_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4847154914\\\/1454382941\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":923967789400051712,\"id_str\":\"923967789400051712\",\"name\":\"Kabylixx (\\u2d59\\u2d53\\u2d3c\\u2d39\\u2d30\\u2d4f\\u2d3b)\",\"screen_name\":\"kabylixx\",\"location\":\"Paris, France\",\"description\":\"D\\u00e9veloppeur PHP\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":30,\"friends_count\":257,\"listed_count\":1,\"created_at\":\"Fri Oct 27 17:41:02 +0000 2017\",\"favourites_count\":410,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":183,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 05 16:40:20 +0000 2020\",\"id\":1324391107086684160,\"id_str\":\"1324391107086684160\",\"text\":\"@sami_jnih Ah bah \\u00e7a promet ... https:\\\/\\\/t.co\\\/0oz5eljzak\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sami_jnih\",\"name\":\"Sami Jnih\",\"id\":916608783966760961,\"id_str\":\"916608783966760961\",\"indices\":[0,10]}],\"urls\":[],\"media\":[{\"id\":1324391094990348290,\"id_str\":\"1324391094990348290\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/0oz5eljzak\",\"display_url\":\"pic.twitter.com\\\/0oz5eljzak\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kabylixx\\\/status\\\/1324391107086684160\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"medium\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"large\":{\"w\":480,\"h\":270,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1324391094990348290,\"id_str\":\"1324391094990348290\",\"indices\":[32,55],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmEurxiXIAIXV3g.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/0oz5eljzak\",\"display_url\":\"pic.twitter.com\\\/0oz5eljzak\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kabylixx\\\/status\\\/1324391107086684160\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"medium\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":480,\"h\":270,\"resize\":\"fit\"},\"large\":{\"w\":480,\"h\":270,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[16,9],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmEurxiXIAIXV3g.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1324358982153211905,\"in_reply_to_status_id_str\":\"1324358982153211905\",\"in_reply_to_user_id\":916608783966760961,\"in_reply_to_user_id_str\":\"916608783966760961\",\"in_reply_to_screen_name\":\"sami_jnih\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242560725438119938\\\/zy_sP3Wt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1242560725438119938\\\/zy_sP3Wt_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1195013928209788928,\"id_str\":\"1195013928209788928\",\"name\":\"NGI Data Portability and Services Incubator\",\"screen_name\":\"NGI_DAPSI\",\"location\":\"Europe\",\"description\":\"@EU_H2020  |  @NGI4eu Programme with \\u20ac5.6M fund for \\ud83d\\udd1d internet #researchers and #innovators to develop human-centric solutions in the #DataPortability field\",\"url\":\"https:\\\/\\\/t.co\\\/1pQEuDnIny\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1pQEuDnIny\",\"expanded_url\":\"http:\\\/\\\/www.dapsi.ngi.eu\",\"display_url\":\"dapsi.ngi.eu\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1072,\"friends_count\":3702,\"listed_count\":27,\"created_at\":\"Thu Nov 14 16:21:53 +0000 2019\",\"favourites_count\":293,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":81,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 11:58:22 +0000 2020\",\"id\":1334104619388194817,\"id_str\":\"1334104619388194817\",\"text\":\"\\ud83d\\udc4bHello #dataportability innovators!\\n\\nApply for @DAPSI to fund your ideas &amp; activities\\n\\ud83d\\udcb0Grants up to \\u20ac150k\\n\\ud83d\\udee0technica\\u2026 https:\\\/\\\/t.co\\\/KpzTNa5BJq\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"dataportability\",\"indices\":[7,23]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"dapsi\",\"name\":\"David Schalkq\",\"id\":26567673,\"id_str\":\"26567673\",\"indices\":[47,53]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KpzTNa5BJq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334104619388194817\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1204722671629545474\\\/gVKpnJxJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1204722671629545474\\\/gVKpnJxJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1195013928209788928\\\/1576749506\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":156605862,\"id_str\":\"156605862\",\"name\":\"Ari Bajo\",\"screen_name\":\"ari_bajo\",\"location\":\"Paris, France\",\"description\":\"Freelance Data Engineer & Technical Writer. I digest 50+ tech blogs by French companies at https:\\\/\\\/t.co\\\/iuWoW8V2fG\",\"url\":\"https:\\\/\\\/t.co\\\/41T9zWH7Er\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/41T9zWH7Er\",\"expanded_url\":\"https:\\\/\\\/guriosity.com\",\"display_url\":\"guriosity.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iuWoW8V2fG\",\"expanded_url\":\"http:\\\/\\\/guriosity.com\",\"display_url\":\"guriosity.com\",\"indices\":[91,114]}]}},\"protected\":false,\"followers_count\":328,\"friends_count\":1108,\"listed_count\":2,\"created_at\":\"Thu Jun 17 11:24:07 +0000 2010\",\"favourites_count\":840,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":221,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 20:16:42 +0000 2020\",\"id\":1335317193622491142,\"id_str\":\"1335317193622491142\",\"text\":\"RT @miqwit: Wrote about my CTO experience here: https:\\\/\\\/t.co\\\/4qSfGigqKw #software #dev #cto\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"software\",\"indices\":[72,81]},{\"text\":\"dev\",\"indices\":[82,86]},{\"text\":\"cto\",\"indices\":[87,91]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"miqwit\",\"name\":\"Micka\\u00ebl A\",\"id\":517397626,\"id_str\":\"517397626\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4qSfGigqKw\",\"expanded_url\":\"https:\\\/\\\/dev.to\\\/miqwit\\\/from-developer-to-cto-a-journey-5478\",\"display_url\":\"dev.to\\\/miqwit\\\/from-de\\u2026\",\"indices\":[48,71]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Dec 05 14:05:05 +0000 2020\",\"id\":1335223674010525696,\"id_str\":\"1335223674010525696\",\"text\":\"Wrote about my CTO experience here: https:\\\/\\\/t.co\\\/4qSfGigqKw #software #dev #cto\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"software\",\"indices\":[60,69]},{\"text\":\"dev\",\"indices\":[70,74]},{\"text\":\"cto\",\"indices\":[75,79]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4qSfGigqKw\",\"expanded_url\":\"https:\\\/\\\/dev.to\\\/miqwit\\\/from-developer-to-cto-a-journey-5478\",\"display_url\":\"dev.to\\\/miqwit\\\/from-de\\u2026\",\"indices\":[36,59]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":12,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161163418843385856\\\/ylPA0sgy_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161163418843385856\\\/ylPA0sgy_normal.jpg\",\"profile_link_color\":\"1F98C7\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"DAECF4\",\"profile_text_color\":\"54425E\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":953748782394499072,\"id_str\":\"953748782394499072\",\"name\":\"Alchemy\",\"screen_name\":\"AlchemyPlatform\",\"location\":\"San Francisco, CA\",\"description\":\"\\u26a1\\ufe0fThe Leading Blockchain Developer Platform\\n\\ud83c\\udf0e Powering Millions Of Users Worldwide\\n\\ud83c\\udf89 Backed By @Stanford, @Coinbase, The @Google Chairman, Charles Schwab, etc\",\"url\":\"https:\\\/\\\/t.co\\\/yLDmUVnLa4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yLDmUVnLa4\",\"expanded_url\":\"http:\\\/\\\/alchemyapi.io\",\"display_url\":\"alchemyapi.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":14731,\"friends_count\":6707,\"listed_count\":90,\"created_at\":\"Wed Jan 17 22:00:04 +0000 2018\",\"favourites_count\":1068,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":950,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:29:25 +0000 2020\",\"id\":1336785044954697728,\"id_str\":\"1336785044954697728\",\"text\":\"@b_asselstine @brttb The Graph has done great things for the ecosystem, that's we feel so blessed to be powering th\\u2026 https:\\\/\\\/t.co\\\/YjkSzidDPp\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"b_asselstine\",\"name\":\"Brendan Asselstine\",\"id\":193969648,\"id_str\":\"193969648\",\"indices\":[0,13]},{\"screen_name\":\"brttb\",\"name\":\"Brett\",\"id\":9814652,\"id_str\":\"9814652\",\"indices\":[14,20]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/YjkSzidDPp\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336785044954697728\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336779968500514817,\"in_reply_to_status_id_str\":\"1336779968500514817\",\"in_reply_to_user_id\":193969648,\"in_reply_to_user_id_str\":\"193969648\",\"in_reply_to_screen_name\":\"b_asselstine\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1141227414321631233\\\/WPs0ZMk5_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1141227414321631233\\\/WPs0ZMk5_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/953748782394499072\\\/1561049872\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1179802604550918145,\"id_str\":\"1179802604550918145\",\"name\":\"Civic Mouse\",\"screen_name\":\"civic_mouse\",\"location\":\"\",\"description\":\"Civic Mouse est un blog sur la citoyennet\\u00e9 \\u00e0 l'\\u00e8re du num\\u00e9rique. Il grignote toutes les informations sur #civictech  #Communs #participationcitoyenne\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":594,\"friends_count\":701,\"listed_count\":5,\"created_at\":\"Thu Oct 03 16:58:29 +0000 2019\",\"favourites_count\":69,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":115,\"lang\":null,\"status\":{\"created_at\":\"Tue May 12 09:57:27 +0000 2020\",\"id\":1260147067252547585,\"id_str\":\"1260147067252547585\",\"text\":\"RT @Enroweb: [old] Dans une longue et dense enqu\\u00eate du Guardian, le d\\u00e9veloppeur fran\\u00e7ais Guillaume Chaslot appara\\u00eet comme un lanceur d\\u2019aler\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Enroweb\",\"name\":\"Antoine Blanchard\",\"id\":40197991,\"id_str\":\"40197991\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon May 11 11:08:29 +0000 2020\",\"id\":1259802554017480704,\"id_str\":\"1259802554017480704\",\"text\":\"[old] Dans une longue et dense enqu\\u00eate du Guardian, le d\\u00e9veloppeur fran\\u00e7ais Guillaume Chaslot appara\\u00eet comme un lan\\u2026 https:\\\/\\\/t.co\\\/IzQN7vIlVo\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IzQN7vIlVo\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1259802554017480704\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":16,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179803028905484289\\\/UElyGRRI_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179803028905484289\\\/UElyGRRI_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1179802604550918145\\\/1570125184\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2909601876,\"id_str\":\"2909601876\",\"name\":\"Ian Chaplin\",\"screen_name\":\"theichap\",\"location\":\"London, England\",\"description\":\"Global Talent Leader | Mental Health First Aider | #talentacquisition #leadership #mentalhealth #talentdevelopment\",\"url\":\"https:\\\/\\\/t.co\\\/efRnQybblo\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/efRnQybblo\",\"expanded_url\":\"http:\\\/\\\/linkedin.com\\\/in\\\/ichaplin\",\"display_url\":\"linkedin.com\\\/in\\\/ichaplin\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":867,\"friends_count\":3452,\"listed_count\":13,\"created_at\":\"Tue Nov 25 04:41:40 +0000 2014\",\"favourites_count\":160,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1661,\"lang\":null,\"status\":{\"created_at\":\"Fri Nov 06 10:58:17 +0000 2020\",\"id\":1324667412810240005,\"id_str\":\"1324667412810240005\",\"text\":\"Loving the energy here this morning at the #manchestercareersfair! https:\\\/\\\/t.co\\\/8dQBJMNwpx\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"manchestercareersfair\",\"indices\":[43,65]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8dQBJMNwpx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/UKCareersFair\\\/status\\\/1324429317405855744\",\"display_url\":\"twitter.com\\\/UKCareersFair\\\/\\u2026\",\"indices\":[67,90]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1324429317405855744,\"quoted_status_id_str\":\"1324429317405855744\",\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1252962127033352193\\\/_Gw6vYRZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1252962127033352193\\\/_Gw6vYRZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2909601876\\\/1600114688\",\"profile_link_color\":\"4A913C\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1247179310663749632,\"id_str\":\"1247179310663749632\",\"name\":\"ToiletHill\",\"screen_name\":\"ToiletHill\",\"location\":\"\",\"description\":\"Working on figuring it all out.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3,\"friends_count\":150,\"listed_count\":0,\"created_at\":\"Mon Apr 06 15:08:45 +0000 2020\",\"favourites_count\":7,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":14,\"lang\":null,\"status\":{\"created_at\":\"Fri Jul 03 13:29:08 +0000 2020\",\"id\":1279044505891553280,\"id_str\":\"1279044505891553280\",\"text\":\"Requesting faucet funds into 0x7e70fe0e002ccDF4B1298603d55AbEbd0Ff9B41E on the #Rinkeby #Ethereum test network.\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Rinkeby\",\"indices\":[79,87]},{\"text\":\"Ethereum\",\"indices\":[88,97]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247180833712009218\\\/ZZ9OVHkX_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247180833712009218\\\/ZZ9OVHkX_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":91659990,\"id_str\":\"91659990\",\"name\":\"Got Instrumentals\",\"screen_name\":\"GotInstrumental\",\"location\":\"\\u13d4\\u13be\\u13a1\\u13de\\u13a0\\u13d4\\u13c6\\u13a0\\u13ac\",\"description\":\"Got Instrumentals is a platform to buy, sell and listen to instrumentals. Start uploading beats today! Got Instrumentals App for IOS, Android & more!\",\"url\":\"https:\\\/\\\/t.co\\\/XJPTRr0Ppu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XJPTRr0Ppu\",\"expanded_url\":\"https:\\\/\\\/GotInstrumentals.com\",\"display_url\":\"GotInstrumentals.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":81667,\"friends_count\":82896,\"listed_count\":290,\"created_at\":\"Sat Nov 21 21:44:54 +0000 2009\",\"favourites_count\":13778,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":87299,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 19:40:08 +0000 2020\",\"id\":1336395154949857280,\"id_str\":\"1336395154949857280\",\"text\":\"I saw The Game trending and it scared me but it\\u2019s just people playing a video game. @thegame is good! https:\\\/\\\/t.co\\\/MUYFM0o8Dv\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thegame\",\"name\":\"The Game\",\"id\":28895421,\"id_str\":\"28895421\",\"indices\":[84,92]}],\"urls\":[],\"media\":[{\"id\":1336395148201250818,\"id_str\":\"1336395148201250818\",\"indices\":[102,125],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovUTogXUAIrj9w.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovUTogXUAIrj9w.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MUYFM0o8Dv\",\"display_url\":\"pic.twitter.com\\\/MUYFM0o8Dv\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/GotInstrumental\\\/status\\\/1336395154949857280\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"medium\":{\"w\":200,\"h\":160,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":200,\"h\":160,\"resize\":\"fit\"},\"large\":{\"w\":200,\"h\":160,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336395148201250818,\"id_str\":\"1336395148201250818\",\"indices\":[102,125],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovUTogXUAIrj9w.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EovUTogXUAIrj9w.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MUYFM0o8Dv\",\"display_url\":\"pic.twitter.com\\\/MUYFM0o8Dv\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/GotInstrumental\\\/status\\\/1336395154949857280\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"medium\":{\"w\":200,\"h\":160,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":200,\"h\":160,\"resize\":\"fit\"},\"large\":{\"w\":200,\"h\":160,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[5,4],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EovUTogXUAIrj9w.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243696520987389953\\\/vLvk0nZz_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243696520987389953\\\/vLvk0nZz_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/91659990\\\/1585697211\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":2231792288,\"id_str\":\"2231792288\",\"name\":\"(webdev \\\"Tory\\\")\",\"screen_name\":\"Endless_WebDev\",\"location\":\"Provo & Salt Lake City, UT\",\"description\":\"Clojure CLJ full-stack development, with some JS and PHP thrown in occasionally. Professional tech account for @WorldsEndless.\",\"url\":\"https:\\\/\\\/t.co\\\/pbKGArCfVd\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pbKGArCfVd\",\"expanded_url\":\"http:\\\/\\\/tech.toryanderson.com\",\"display_url\":\"tech.toryanderson.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":246,\"friends_count\":451,\"listed_count\":14,\"created_at\":\"Thu Dec 05 17:24:11 +0000 2013\",\"favourites_count\":3453,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1788,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:40:54 +0000 2020\",\"id\":1336742634010787841,\"id_str\":\"1336742634010787841\",\"text\":\"Thought from #emacs conference: \\\"music should be open\\\/libre. It's like code, or algorithm.\\\"\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"emacs\",\"indices\":[13,19]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1234906600642498561\\\/LWAblWYA_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1234906600642498561\\\/LWAblWYA_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2231792288\\\/1464105195\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14600138,\"id_str\":\"14600138\",\"name\":\"Julien Dorra\",\"screen_name\":\"juliendorra\",\"location\":\"Paris\",\"description\":\"Creative technology. Launching @benthamrs, designing @hermetikavr\\n#Museomix co-founder\",\"url\":\"https:\\\/\\\/t.co\\\/9qG3naQivK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9qG3naQivK\",\"expanded_url\":\"http:\\\/\\\/benth.am\\\/hermetikavr\",\"display_url\":\"benth.am\\\/hermetikavr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4419,\"friends_count\":5000,\"listed_count\":273,\"created_at\":\"Wed Apr 30 13:40:45 +0000 2008\",\"favourites_count\":401,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":14749,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 07:51:56 +0000 2020\",\"id\":1336579317820772352,\"id_str\":\"1336579317820772352\",\"text\":\"@__tosh @paulg Sony, Canon, Nikon? Yamaha (in Music)?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"__tosh\",\"name\":\"Thomas Schranz \\ud83c\\udf44\",\"id\":16611962,\"id_str\":\"16611962\",\"indices\":[0,7]},{\"screen_name\":\"paulg\",\"name\":\"Paul Graham\",\"id\":183749519,\"id_str\":\"183749519\",\"indices\":[8,14]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336398480881963008,\"in_reply_to_status_id_str\":\"1336398480881963008\",\"in_reply_to_user_id\":16611962,\"in_reply_to_user_id_str\":\"16611962\",\"in_reply_to_screen_name\":\"__tosh\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"tl\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"DBDBDB\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3596570905\\\/662bcd3d54f4c8d8f35f953ff8e2b398_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/3596570905\\\/662bcd3d54f4c8d8f35f953ff8e2b398_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14600138\\\/1356228025\",\"profile_link_color\":\"006285\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"ECF3F3\",\"profile_text_color\":\"1F1F1F\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":4189605555,\"id_str\":\"4189605555\",\"name\":\"Serokell\",\"screen_name\":\"serokell\",\"location\":\"\",\"description\":\"The most bizarre company with brave ideas of functional programming application.  #Haskell #Nix #Elixir #Rust #Agda #Cplusplus #ML #AI\",\"url\":\"https:\\\/\\\/t.co\\\/JBhoIfnJcP\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JBhoIfnJcP\",\"expanded_url\":\"https:\\\/\\\/serokell.io\",\"display_url\":\"serokell.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3519,\"friends_count\":2710,\"listed_count\":61,\"created_at\":\"Sat Nov 14 22:53:31 +0000 2015\",\"favourites_count\":1443,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":586,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:08:40 +0000 2020\",\"id\":1336689224783949824,\"id_str\":\"1336689224783949824\",\"text\":\"What are the benefits of functional programming for smart contract development? Find out in our interview with Anth\\u2026 https:\\\/\\\/t.co\\\/U77Zb1XQXz\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/U77Zb1XQXz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336689224783949824\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1214166141699903488\\\/YFTm53z8_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1214166141699903488\\\/YFTm53z8_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4189605555\\\/1537885644\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4891258704,\"id_str\":\"4891258704\",\"name\":\"CoMakery\",\"screen_name\":\"comakery\",\"location\":\"Distributed\",\"description\":\"Gather your tribe and achieve big missions. \\n#community #projectmanagement #freelance #dao\\n#blockchain #distributedteam #remotework\",\"url\":\"https:\\\/\\\/t.co\\\/jtzZhy8GBR\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jtzZhy8GBR\",\"expanded_url\":\"http:\\\/\\\/comakery.com\",\"display_url\":\"comakery.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2191,\"friends_count\":3028,\"listed_count\":54,\"created_at\":\"Thu Feb 11 05:51:22 +0000 2016\",\"favourites_count\":286,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":145,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 14 20:50:29 +0000 2020\",\"id\":1327715550068310016,\"id_str\":\"1327715550068310016\",\"text\":\"RT @OpenCollabathon: If you have missed our live events, do not worry. We have recordings of all the events on our Youtube channel. Do not\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"OpenCollabathon\",\"name\":\"Open Climate Collabathon\",\"id\":1249343480784203778,\"id_str\":\"1249343480784203778\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Nov 14 20:31:30 +0000 2020\",\"id\":1327710771476910081,\"id_str\":\"1327710771476910081\",\"text\":\"If you have missed our live events, do not worry. We have recordings of all the events on our Youtube channel. Do n\\u2026 https:\\\/\\\/t.co\\\/avnSALeIfS\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/avnSALeIfS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1327710771476910081\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1049106967845715969\\\/3DPBmoIb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1049106967845715969\\\/3DPBmoIb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4891258704\\\/1538961709\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14935958,\"id_str\":\"14935958\",\"name\":\"Grady Owens\",\"screen_name\":\"baphijmm\",\"location\":\"Mayhill, NM\",\"description\":\"It\\\/Its. Published fantasy author, professional voice and film actor, web developer, astrophysicist, freelance researcher. Standard NERD. Ran for US Congress.\",\"url\":\"https:\\\/\\\/t.co\\\/lT8NS02uat\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lT8NS02uat\",\"expanded_url\":\"http:\\\/\\\/www.gradyowens.us\",\"display_url\":\"gradyowens.us\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":542,\"friends_count\":806,\"listed_count\":28,\"created_at\":\"Wed May 28 17:47:34 +0000 2008\",\"favourites_count\":347,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":15680,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 03:11:26 +0000 2020\",\"id\":1336508729706090499,\"id_str\":\"1336508729706090499\",\"text\":\"@TallMist @VeraLycaon https:\\\/\\\/t.co\\\/1dPfm3hIif\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TallMist\",\"name\":\"Willow Jirachi Alphys Buchanan\",\"id\":2952725698,\"id_str\":\"2952725698\",\"indices\":[0,9]},{\"screen_name\":\"VeraLycaon\",\"name\":\"Vera \\\"Eat the Rich\\\" Lycaon\",\"id\":462589563,\"id_str\":\"462589563\",\"indices\":[10,21]}],\"urls\":[],\"media\":[{\"id\":1336508722470785027,\"id_str\":\"1336508722470785027\",\"indices\":[22,45],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eow7mhoVEAMkcd8.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eow7mhoVEAMkcd8.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/1dPfm3hIif\",\"display_url\":\"pic.twitter.com\\\/1dPfm3hIif\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/baphijmm\\\/status\\\/1336508729706090499\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":498,\"h\":372,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":498,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":498,\"h\":372,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336508722470785027,\"id_str\":\"1336508722470785027\",\"indices\":[22,45],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eow7mhoVEAMkcd8.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/Eow7mhoVEAMkcd8.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/1dPfm3hIif\",\"display_url\":\"pic.twitter.com\\\/1dPfm3hIif\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/baphijmm\\\/status\\\/1336508729706090499\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"large\":{\"w\":498,\"h\":372,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":498,\"h\":372,\"resize\":\"fit\"},\"small\":{\"w\":498,\"h\":372,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[83,62],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/Eow7mhoVEAMkcd8.mp4\"}]}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336463298380898306,\"in_reply_to_status_id_str\":\"1336463298380898306\",\"in_reply_to_user_id\":2952725698,\"in_reply_to_user_id_str\":\"2952725698\",\"in_reply_to_screen_name\":\"TallMist\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/54778375\\\/baphicon_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/54778375\\\/baphicon_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14935958\\\/1589673429\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"111015\",\"profile_text_color\":\"404040\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1232669967209959425,\"id_str\":\"1232669967209959425\",\"name\":\"Jordan Black\",\"screen_name\":\"Jord_techruiter\",\"location\":\"London\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":146,\"friends_count\":391,\"listed_count\":2,\"created_at\":\"Wed Feb 26 14:13:25 +0000 2020\",\"favourites_count\":673,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":54,\"lang\":null,\"status\":{\"created_at\":\"Tue Sep 29 10:59:50 +0000 2020\",\"id\":1310897065707343872,\"id_str\":\"1310897065707343872\",\"text\":\"#java #dataengineer #javadeveloper #spark #kafka #hadoop #multithreading #concurrency\\n\\nhttps:\\\/\\\/t.co\\\/gndtkAAeA3\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"java\",\"indices\":[0,5]},{\"text\":\"dataengineer\",\"indices\":[6,19]},{\"text\":\"javadeveloper\",\"indices\":[20,34]},{\"text\":\"spark\",\"indices\":[35,41]},{\"text\":\"kafka\",\"indices\":[42,48]},{\"text\":\"hadoop\",\"indices\":[49,56]},{\"text\":\"multithreading\",\"indices\":[57,72]},{\"text\":\"concurrency\",\"indices\":[73,85]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gndtkAAeA3\",\"expanded_url\":\"https:\\\/\\\/towardsdatascience.com\\\/data-engineering-in-2020-e46910786eda\",\"display_url\":\"towardsdatascience.com\\\/data-engineeri\\u2026\",\"indices\":[87,110]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1310896966960926726,\"in_reply_to_status_id_str\":\"1310896966960926726\",\"in_reply_to_user_id\":1232669967209959425,\"in_reply_to_user_id_str\":\"1232669967209959425\",\"in_reply_to_screen_name\":\"Jord_techruiter\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311676942819758080\\\/k3ptl3RU_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311676942819758080\\\/k3ptl3RU_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1232669967209959425\\\/1601295558\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1168467545227182080,\"id_str\":\"1168467545227182080\",\"name\":\"TheTowerOfScience\",\"screen_name\":\"TowerOfScience\",\"location\":\"\",\"description\":\"Reducing the gap between #science & society I #ScienceStorytelling I #CareerDevelopment\\n\\n#science #interviews #career\",\"url\":\"https:\\\/\\\/t.co\\\/kQBFSiPWAu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kQBFSiPWAu\",\"expanded_url\":\"http:\\\/\\\/thetowerofscience.com\\\/\",\"display_url\":\"thetowerofscience.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":754,\"friends_count\":3989,\"listed_count\":0,\"created_at\":\"Mon Sep 02 10:16:15 +0000 2019\",\"favourites_count\":281,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":315,\"lang\":null,\"status\":{\"created_at\":\"Fri Aug 28 21:20:01 +0000 2020\",\"id\":1299456729487486976,\"id_str\":\"1299456729487486976\",\"text\":\"@naval Dear Naval, thank you for putting these concepts into words, and for the audio version on Youtube, they expl\\u2026 https:\\\/\\\/t.co\\\/qY9qymibSl\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"naval\",\"name\":\"Naval\",\"id\":745273,\"id_str\":\"745273\",\"indices\":[0,6]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qY9qymibSl\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1299456729487486976\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1002103360646823936,\"in_reply_to_status_id_str\":\"1002103360646823936\",\"in_reply_to_user_id\":745273,\"in_reply_to_user_id_str\":\"745273\",\"in_reply_to_screen_name\":\"naval\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1168469489639444480\\\/q2-6-EH2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1168469489639444480\\\/q2-6-EH2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1168467545227182080\\\/1567419811\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":978659871167057920,\"id_str\":\"978659871167057920\",\"name\":\"Elisha Camilleri\",\"screen_name\":\"elishac_sig\",\"location\":\"London\",\"description\":\"Principal Consultant @Signify_Tech! My messages are open \\u2709\\ufe0f No, I cannot code but I can definitely find your next job! Tweeting all things #Scala and #Haskell \\u2764\",\"url\":\"https:\\\/\\\/t.co\\\/1QzwFHJnPZ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1QzwFHJnPZ\",\"expanded_url\":\"https:\\\/\\\/www.signifytechnology.com\\\/\",\"display_url\":\"signifytechnology.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":877,\"friends_count\":4722,\"listed_count\":6,\"created_at\":\"Tue Mar 27 15:47:50 +0000 2018\",\"favourites_count\":3588,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1204,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 11:40:59 +0000 2020\",\"id\":1336636962329989124,\"id_str\":\"1336636962329989124\",\"text\":\"Job opportunity! Data Engineer Scala\\\/Spark, \\u00a360,000 - \\u00a380,000 - #London. https:\\\/\\\/t.co\\\/WqzJ2Rb1Do https:\\\/\\\/t.co\\\/FC7TsLoah8\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"London\",\"indices\":[64,71]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WqzJ2Rb1Do\",\"expanded_url\":\"https:\\\/\\\/tinyurl.com\\\/y4qvjwx8\",\"display_url\":\"tinyurl.com\\\/y4qvjwx8\",\"indices\":[73,96]}],\"media\":[{\"id\":1336636960861990913,\"id_str\":\"1336636960861990913\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoywO-3WMAE0cC9.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoywO-3WMAE0cC9.png\",\"url\":\"https:\\\/\\\/t.co\\\/FC7TsLoah8\",\"display_url\":\"pic.twitter.com\\\/FC7TsLoah8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/elishac_sig\\\/status\\\/1336636962329989124\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":600,\"h\":314,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":600,\"h\":314,\"resize\":\"fit\"},\"medium\":{\"w\":600,\"h\":314,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336636960861990913,\"id_str\":\"1336636960861990913\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoywO-3WMAE0cC9.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoywO-3WMAE0cC9.png\",\"url\":\"https:\\\/\\\/t.co\\\/FC7TsLoah8\",\"display_url\":\"pic.twitter.com\\\/FC7TsLoah8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/elishac_sig\\\/status\\\/1336636962329989124\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":600,\"h\":314,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":600,\"h\":314,\"resize\":\"fit\"},\"medium\":{\"w\":600,\"h\":314,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/paiger.co\\\" rel=\\\"nofollow\\\">Paiger<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1095322050510635008\\\/_idJh3Mb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1095322050510635008\\\/_idJh3Mb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/978659871167057920\\\/1533627815\",\"profile_link_color\":\"F58EA8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":487347744,\"id_str\":\"487347744\",\"name\":\"LELAIDIER BROQUARD emmanuelle\",\"screen_name\":\"LBROQUARD\",\"location\":\"Versailles \",\"description\":\"@EVVersailles @enmarche #\\u00e9galit\\u00e9FH #handicap #autisme #association #sensibilisation #accompagnement @EgaliteEnsemble\",\"url\":\"https:\\\/\\\/t.co\\\/kLQNG9Zlv4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kLQNG9Zlv4\",\"expanded_url\":\"https:\\\/\\\/ensemblevivonsversailles.fr\\\/\",\"display_url\":\"ensemblevivonsversailles.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":530,\"friends_count\":3152,\"listed_count\":3,\"created_at\":\"Thu Feb 09 08:21:51 +0000 2012\",\"favourites_count\":5754,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3680,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 28 20:29:27 +0000 2020\",\"id\":1332783685716815884,\"id_str\":\"1332783685716815884\",\"text\":\"RT @AutismeInfo: \\u00c0 Rouen, ces parents attaquent l\\u2019\\u00c9tat en justice pour \\u00ab d\\u00e9faut de prise en charge \\u00bb de leur fils autiste\\nJustice. Des pare\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AutismeInfo\",\"name\":\"autisme info\",\"id\":73844486,\"id_str\":\"73844486\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Nov 28 20:27:08 +0000 2020\",\"id\":1332783104331804672,\"id_str\":\"1332783104331804672\",\"text\":\"\\u00c0 Rouen, ces parents attaquent l\\u2019\\u00c9tat en justice pour \\u00ab d\\u00e9faut de prise en charge \\u00bb de leur fils autiste\\nJustice. D\\u2026 https:\\\/\\\/t.co\\\/vRbtcerZ94\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vRbtcerZ94\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332783104331804672\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1260857861908955138\\\/s11eSdsB_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1260857861908955138\\\/s11eSdsB_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/487347744\\\/1603482752\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1062624648465137665,\"id_str\":\"1062624648465137665\",\"name\":\"TiersLieuxEdu\",\"screen_name\":\"TiersLieuxEdu\",\"location\":\"France\",\"description\":\"#TLEdu diffuse la culture des tiers-lieux dans l'\\u00e9ducation en f\\u00e9d\\u00e9rant une communaut\\u00e9  \\u00e0 travers des rencontres, des projets et des ressources. #Francophonie\",\"url\":\"https:\\\/\\\/t.co\\\/GtsfxdkON9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GtsfxdkON9\",\"expanded_url\":\"http:\\\/\\\/www.tierslieuxedu.org\\\/\",\"display_url\":\"tierslieuxedu.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3726,\"friends_count\":3210,\"listed_count\":53,\"created_at\":\"Wed Nov 14 08:33:53 +0000 2018\",\"favourites_count\":1410,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1502,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:12:42 +0000 2020\",\"id\":1336780836276932609,\"id_str\":\"1336780836276932609\",\"text\":\"RT @edulab_r2: Apr\\u00e8s quelques mois de collaborations avec @interactik 35, nous sommes heureux de vous partager la doc' compl\\u00e8te pour fabriq\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"edulab_r2\",\"name\":\"EduLab Rennes 2\",\"id\":796631460727885824,\"id_str\":\"796631460727885824\",\"indices\":[3,13]},{\"screen_name\":\"interactik\",\"name\":\"LivingLab Interactik\",\"id\":788390363358752768,\"id_str\":\"788390363358752768\",\"indices\":[58,69]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 11:05:00 +0000 2020\",\"id\":1336627904306941952,\"id_str\":\"1336627904306941952\",\"text\":\"Apr\\u00e8s quelques mois de collaborations avec @interactik 35, nous sommes heureux de vous partager la doc' compl\\u00e8te po\\u2026 https:\\\/\\\/t.co\\\/MV4L0SYyrO\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"interactik\",\"name\":\"LivingLab Interactik\",\"id\":788390363358752768,\"id_str\":\"788390363358752768\",\"indices\":[43,54]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/MV4L0SYyrO\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336627904306941952\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":19,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1062628514271293440\\\/v7wxWGCG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1062628514271293440\\\/v7wxWGCG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1062624648465137665\\\/1583495280\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":148778585,\"id_str\":\"148778585\",\"name\":\"C\\u00e9line Coubard\",\"screen_name\":\"celinecoubard\",\"location\":\"Paris\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":36,\"friends_count\":113,\"listed_count\":0,\"created_at\":\"Thu May 27 15:43:40 +0000 2010\",\"favourites_count\":135,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":47,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 26 07:59:48 +0000 2020\",\"id\":1331870256600674305,\"id_str\":\"1331870256600674305\",\"text\":\"Fi\\u00e8re d'\\u00eatre au Conseil d'administration d'Halage et de voir fleurir ces beaux projets \\ud83d\\ude09 https:\\\/\\\/t.co\\\/QQ6pRbMly7\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QQ6pRbMly7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/HalageAssociat1\\\/status\\\/1331840107415031809\",\"display_url\":\"twitter.com\\\/HalageAssociat\\u2026\",\"indices\":[89,112]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1331840107415031809,\"quoted_status_id_str\":\"1331840107415031809\",\"retweet_count\":1,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/875292805714911233\\\/JO8QjhXY_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/875292805714911233\\\/JO8QjhXY_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/148778585\\\/1556272397\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1878676573,\"id_str\":\"1878676573\",\"name\":\"Charles-Henri Gougerot-Duvoisin\",\"screen_name\":\"CharlesH_GD\",\"location\":\"France\",\"description\":\"CEO @ObvyApp #Fintech #Frenchtech LinkedIn : https:\\\/\\\/t.co\\\/pgmcIMtsv2 - Mes tweets n\\u2019engagent que moi\",\"url\":\"https:\\\/\\\/t.co\\\/i96hCfsAm7\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/i96hCfsAm7\",\"expanded_url\":\"https:\\\/\\\/www.obvy-app.com\",\"display_url\":\"obvy-app.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pgmcIMtsv2\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/charleshgd\",\"display_url\":\"linkedin.com\\\/in\\\/charleshgd\",\"indices\":[45,68]}]}},\"protected\":false,\"followers_count\":2071,\"friends_count\":2621,\"listed_count\":249,\"created_at\":\"Wed Sep 18 08:34:19 +0000 2013\",\"favourites_count\":10888,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2226,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 01 17:03:19 +0000 2020\",\"id\":1333818976187666438,\"id_str\":\"1333818976187666438\",\"text\":\"La #PS5 \\u00e0 gagner ! https:\\\/\\\/t.co\\\/HrU3tHJI3n\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"PS5\",\"indices\":[3,7]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/HrU3tHJI3n\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ObvyApp\\\/status\\\/1333714936904765440\",\"display_url\":\"twitter.com\\\/ObvyApp\\\/status\\u2026\",\"indices\":[19,42]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1333714936904765440,\"quoted_status_id_str\":\"1333714936904765440\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/992429407603249158\\\/GuhBIjDo_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/992429407603249158\\\/GuhBIjDo_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1878676573\\\/1543851586\",\"profile_link_color\":\"91D2FA\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":19884434,\"id_str\":\"19884434\",\"name\":\"Pierre Arlais\",\"screen_name\":\"PierreArlais\",\"location\":\"Paris\",\"description\":\"#FOSS #opensource #SCOP, directeur @Bearstech, organisateur de choses qui se d\\u00e9roulent plus ou moins bien comme pr\\u00e9vu selon les cas\",\"url\":\"http:\\\/\\\/t.co\\\/oH112qeJFk\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/oH112qeJFk\",\"expanded_url\":\"http:\\\/\\\/bearstech.com\",\"display_url\":\"bearstech.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1041,\"friends_count\":903,\"listed_count\":25,\"created_at\":\"Mon Feb 02 00:04:52 +0000 2009\",\"favourites_count\":1182,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1989,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 20:57:45 +0000 2020\",\"id\":1336052300075372546,\"id_str\":\"1336052300075372546\",\"text\":\"Every episode of The Mandalorian https:\\\/\\\/t.co\\\/9hMAXbnoNk\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9hMAXbnoNk\",\"expanded_url\":\"https:\\\/\\\/youtu.be\\\/Y7EB4ZYWKYI\",\"display_url\":\"youtu.be\\\/Y7EB4ZYWKYI\",\"indices\":[33,56]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1266575001\\\/eightbit-04d0a435-e3b3-44d2-96d9-1c5d414a3411_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1266575001\\\/eightbit-04d0a435-e3b3-44d2-96d9-1c5d414a3411_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/19884434\\\/1424387187\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":421795636,\"id_str\":\"421795636\",\"name\":\"Philip Vollet\",\"screen_name\":\"philipvollet\",\"location\":\"Berlin, Germany\",\"description\":\"Insights from building Natural Language Processing pipelines @KPMG | Discussing Machine Learning Data Science & Open Source libraries | 50K+ Follower @LinkedIn\",\"url\":\"https:\\\/\\\/t.co\\\/5brBQ1ps3d\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/5brBQ1ps3d\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/philipvollet\",\"display_url\":\"linkedin.com\\\/in\\\/philipvollet\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2944,\"friends_count\":2185,\"listed_count\":47,\"created_at\":\"Sat Nov 26 11:40:03 +0000 2011\",\"favourites_count\":2851,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1872,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 08:32:16 +0000 2020\",\"id\":1335502303625940993,\"id_str\":\"1335502303625940993\",\"text\":\"Hover is a machine teaching library that enables intuitive and effecient supervision. In other words, it provides a\\u2026 https:\\\/\\\/t.co\\\/je5UZjwtKC\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/je5UZjwtKC\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335502303625940993\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":20,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"BDBDBD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1322051446053941248\\\/WXva0YAI_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1322051446053941248\\\/WXva0YAI_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/421795636\\\/1596475733\",\"profile_link_color\":\"029671\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2563957176,\"id_str\":\"2563957176\",\"name\":\"Jarek Ratajski\",\"screen_name\":\"jarek000000\",\"location\":\"Orion-Cygnus Arm\",\"description\":\"I am anarchitect\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1915,\"friends_count\":453,\"listed_count\":41,\"created_at\":\"Thu Jun 12 19:46:15 +0000 2014\",\"favourites_count\":1342,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1826,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:25:47 +0000 2020\",\"id\":1336753932027228160,\"id_str\":\"1336753932027228160\",\"text\":\"@mstk It compiles.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mstk\",\"name\":\"Justin Le\",\"id\":907281,\"id_str\":\"907281\",\"indices\":[0,5]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336740019675963392,\"in_reply_to_status_id_str\":\"1336740019675963392\",\"in_reply_to_user_id\":907281,\"in_reply_to_user_id_str\":\"907281\",\"in_reply_to_screen_name\":\"mstk\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/897340310287732736\\\/XJ4HusxD_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/897340310287732736\\\/XJ4HusxD_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2563957176\\\/1402602846\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1221967296698245121,\"id_str\":\"1221967296698245121\",\"name\":\"Zwick Zanow\",\"screen_name\":\"ZwickZanow4\",\"location\":\"London\",\"description\":\"I am Mr. Zwick Zanow, an employee with Lloyd's Bank Plc London\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":21,\"friends_count\":461,\"listed_count\":0,\"created_at\":\"Tue Jan 28 01:24:48 +0000 2020\",\"favourites_count\":10,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":11,\"lang\":null,\"status\":{\"created_at\":\"Tue Jan 28 01:41:22 +0000 2020\",\"id\":1221971498241593344,\"id_str\":\"1221971498241593344\",\"text\":\"https:\\\/\\\/t.co\\\/NQFRQ1lUec\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1221971493480992768,\"id_str\":\"1221971493480992768\",\"indices\":[0,23],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVqWkAAym63.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVqWkAAym63.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NQFRQ1lUec\",\"display_url\":\"pic.twitter.com\\\/NQFRQ1lUec\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ZwickZanow4\\\/status\\\/1221971498241593344\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":275,\"h\":183,\"resize\":\"fit\"},\"large\":{\"w\":275,\"h\":183,\"resize\":\"fit\"},\"small\":{\"w\":275,\"h\":183,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1221971493480992768,\"id_str\":\"1221971493480992768\",\"indices\":[0,23],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVqWkAAym63.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVqWkAAym63.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NQFRQ1lUec\",\"display_url\":\"pic.twitter.com\\\/NQFRQ1lUec\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ZwickZanow4\\\/status\\\/1221971498241593344\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":275,\"h\":183,\"resize\":\"fit\"},\"large\":{\"w\":275,\"h\":183,\"resize\":\"fit\"},\"small\":{\"w\":275,\"h\":183,\"resize\":\"fit\"}}},{\"id\":1221971493489463296,\"id_str\":\"1221971493489463296\",\"indices\":[0,23],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVsX0AAzETd.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EPVQmVsX0AAzETd.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NQFRQ1lUec\",\"display_url\":\"pic.twitter.com\\\/NQFRQ1lUec\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/ZwickZanow4\\\/status\\\/1221971498241593344\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":259,\"h\":194,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":259,\"h\":194,\"resize\":\"fit\"},\"small\":{\"w\":259,\"h\":194,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1221969462565515266\\\/ou8rPSZo_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1221969462565515266\\\/ou8rPSZo_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1221967296698245121\\\/1580175431\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1194582921455296517,\"id_str\":\"1194582921455296517\",\"name\":\"Plant an App\",\"screen_name\":\"plantanapp\",\"location\":\"\",\"description\":\"Leading the Low-Code Revolution by giving development teams the speed of low-code without compromising the power of code.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":174,\"friends_count\":1035,\"listed_count\":2,\"created_at\":\"Wed Nov 13 11:49:23 +0000 2019\",\"favourites_count\":48,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":145,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 18:00:22 +0000 2020\",\"id\":1336370049079242752,\"id_str\":\"1336370049079242752\",\"text\":\"Become a low-code investor on @joinrepublic https:\\\/\\\/t.co\\\/ERsNxkkC7U\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"joinrepublic\",\"name\":\"Republic \\ud83e\\udd84\",\"id\":728347697246142464,\"id_str\":\"728347697246142464\",\"indices\":[30,43]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ERsNxkkC7U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/joinrepublic\\\/status\\\/1334951706405253121\",\"display_url\":\"twitter.com\\\/joinrepublic\\\/s\\u2026\",\"indices\":[44,67]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334951706405253121,\"quoted_status_id_str\":\"1334951706405253121\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1227287200192061446\\\/_xe2jg0e_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1227287200192061446\\\/_xe2jg0e_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1194582921455296517\\\/1581443026\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":391542441,\"id_str\":\"391542441\",\"name\":\"Nathalie Serruques\",\"screen_name\":\"nserruques\",\"location\":\"Paris, France\",\"description\":\"J'ai fait mes classes chez @emmaus_france et grandi au sein de @caritasfrance & de l'@unicef_france | Team @unaf_fr depuis 2016 \\\/ compte r\\u00e9solument perso\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1894,\"friends_count\":803,\"listed_count\":63,\"created_at\":\"Sat Oct 15 18:29:45 +0000 2011\",\"favourites_count\":13228,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":16519,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 19:19:03 +0000 2020\",\"id\":1335665074841800704,\"id_str\":\"1335665074841800704\",\"text\":\"Supporting humanitarian scientific research is important to me. That's why I've donated 9 months of my computer's p\\u2026 https:\\\/\\\/t.co\\\/2ZVo1aH8Bx\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2ZVo1aH8Bx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335665074841800704\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.worldcommunitygrid.org\\\" rel=\\\"nofollow\\\">World Community Grid<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/732929434815201284\\\/Eo5VwPWW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/732929434815201284\\\/Eo5VwPWW_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/391542441\\\/1469707514\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"BDDCAD\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1185993485750587395,\"id_str\":\"1185993485750587395\",\"name\":\"Stacksciences\",\"screen_name\":\"stacksciences\",\"location\":\"Switzerland\",\"description\":\"Your cloud infrastructure security audit in few minutes, for free! signup now!\",\"url\":\"https:\\\/\\\/t.co\\\/5BWUbpQ1as\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/5BWUbpQ1as\",\"expanded_url\":\"https:\\\/\\\/stacksciences.com\",\"display_url\":\"stacksciences.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":492,\"friends_count\":3188,\"listed_count\":4,\"created_at\":\"Sun Oct 20 18:58:22 +0000 2019\",\"favourites_count\":163,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":94,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 22:10:10 +0000 2020\",\"id\":1335708136439767042,\"id_str\":\"1335708136439767042\",\"text\":\"Impressive work from prevasio! https:\\\/\\\/t.co\\\/sfSVtTxOSD\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/sfSVtTxOSD\",\"expanded_url\":\"https:\\\/\\\/blog.prevasio.com\\\/2020\\\/12\\\/operation-red-kangaroo-industrys-first.html?m=1\",\"display_url\":\"blog.prevasio.com\\\/2020\\\/12\\\/operat\\u2026\",\"indices\":[31,54]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1299716510706008066\\\/rhXTjF9X_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1299716510706008066\\\/rhXTjF9X_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1185993485750587395\\\/1601399077\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1126117912719372288,\"id_str\":\"1126117912719372288\",\"name\":\"Puis-Nicot\",\"screen_name\":\"ChristinePuisN\",\"location\":\"Versailles\",\"description\":\"@ecologienmarche @UDE_FR Citoyenne engag\\u00e9e dans le d\\u00e9veloppement durable, le spectacle vivant, les arts plastiques #culture\",\"url\":\"https:\\\/\\\/t.co\\\/9QNMcq6lfB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9QNMcq6lfB\",\"expanded_url\":\"https:\\\/\\\/www.akitsudigital.fr\",\"display_url\":\"akitsudigital.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":124,\"friends_count\":246,\"listed_count\":1,\"created_at\":\"Wed May 08 13:33:27 +0000 2019\",\"favourites_count\":1932,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1082,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:48:33 +0000 2020\",\"id\":1336714360937443330,\"id_str\":\"1336714360937443330\",\"text\":\"RT @lamaisondfemmes: \\u2753Avec 1\\u20ac on fait quoi \\u2753\\n\\ud83c\\udfe5 Les femmes sont de plus en plus nombreuses \\u00e0 venir nous consulter (+30% en septembre 2020)\\nA\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"lamaisondfemmes\",\"name\":\"La Maison des femmes\",\"id\":771263667354542080,\"id_str\":\"771263667354542080\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 16:32:00 +0000 2020\",\"id\":1336710196379471876,\"id_str\":\"1336710196379471876\",\"text\":\"\\u2753Avec 1\\u20ac on fait quoi \\u2753\\n\\ud83c\\udfe5 Les femmes sont de plus en plus nombreuses \\u00e0 venir nous consulter (+30% en septembre 2020\\u2026 https:\\\/\\\/t.co\\\/xQmz9Wpyz7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xQmz9Wpyz7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336710196379471876\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":57,\"favorite_count\":69,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":57,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333687878753390592\\\/krVUEaDd_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333687878753390592\\\/krVUEaDd_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1126117912719372288\\\/1585413050\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":true,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1536802130,\"id_str\":\"1536802130\",\"name\":\"Martin lutton\",\"screen_name\":\"MartyloOps\",\"location\":\"Lille, France\",\"description\":\"j'\\ud83d\\udc99 @welovedevs | Fanatique de voiture-Ballon \\u26bd\\ud83d\\ude97\\ud83d\\udca8| \\u00c9colo par n\\u00e9cessit\\u00e9 \\ud83c\\udf0f | \\u26aa\\ufe0flosc\\ud83d\\udd34\",\"url\":\"https:\\\/\\\/t.co\\\/EPWTrUtGEt\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EPWTrUtGEt\",\"expanded_url\":\"http:\\\/\\\/www.welovedevs.com\",\"display_url\":\"welovedevs.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":335,\"friends_count\":2318,\"listed_count\":1,\"created_at\":\"Fri Jun 21 15:53:20 +0000 2013\",\"favourites_count\":4211,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":3779,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:12:47 +0000 2020\",\"id\":1336705359495507973,\"id_str\":\"1336705359495507973\",\"text\":\"@Sardoche_Lol Caillou\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Sardoche_Lol\",\"name\":\"Sardoche\",\"id\":898994539,\"id_str\":\"898994539\",\"indices\":[0,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1336703163819233282,\"in_reply_to_status_id_str\":\"1336703163819233282\",\"in_reply_to_user_id\":898994539,\"in_reply_to_user_id_str\":\"898994539\",\"in_reply_to_screen_name\":\"Sardoche_Lol\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201508634548744192\\\/8agqLa0E_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201508634548744192\\\/8agqLa0E_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1536802130\\\/1377106738\",\"profile_link_color\":\"330000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1204826379889582080,\"id_str\":\"1204826379889582080\",\"name\":\"0x_1ngs0c\\\/\",\"screen_name\":\"0x_1ngs0c\",\"location\":\"France\",\"description\":\"ITSec | Network Linux SysAdmin | Hacking | Redteam | Blockchain\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":331,\"friends_count\":765,\"listed_count\":2,\"created_at\":\"Wed Dec 11 18:13:08 +0000 2019\",\"favourites_count\":648,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":188,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 17:14:34 +0000 2020\",\"id\":1334908969438113792,\"id_str\":\"1334908969438113792\",\"text\":\"RT @Cyb3rguerre: Des hackers imitent le SMS TousAntiCovid du gouvernement pour diffuser un dangereux malware https:\\\/\\\/t.co\\\/QwR142H8Zs https:\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Cyb3rguerre\",\"name\":\"Cyberguerre\",\"id\":1064895606555066369,\"id_str\":\"1064895606555066369\",\"indices\":[3,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QwR142H8Zs\",\"expanded_url\":\"https:\\\/\\\/cyberguerre.numerama.com\\\/9188-des-hackers-imitent-le-sms-tousanticovid-du-gouvernement-pour-diffuser-un-dangereux-malware.html\",\"display_url\":\"cyberguerre.numerama.com\\\/9188-des-hacke\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 09:07:01 +0000 2020\",\"id\":1334786274893443072,\"id_str\":\"1334786274893443072\",\"text\":\"Des hackers imitent le SMS TousAntiCovid du gouvernement pour diffuser un dangereux malware https:\\\/\\\/t.co\\\/QwR142H8Zs https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QwR142H8Zs\",\"expanded_url\":\"https:\\\/\\\/cyberguerre.numerama.com\\\/9188-des-hackers-imitent-le-sms-tousanticovid-du-gouvernement-pour-diffuser-un-dangereux-malware.html\",\"display_url\":\"cyberguerre.numerama.com\\\/9188-des-hacke\\u2026\",\"indices\":[92,115]}],\"media\":[{\"id\":1334786272196485120,\"id_str\":\"1334786272196485120\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"display_url\":\"pic.twitter.com\\\/3RlEbh9Vaz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Cyb3rguerre\\\/status\\\/1334786274893443072\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":675,\"resize\":\"fit\"},\"large\":{\"w\":1920,\"h\":1080,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1334786272196485120,\"id_str\":\"1334786272196485120\",\"indices\":[116,139],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoYdCuVW4AAB8_M.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/3RlEbh9Vaz\",\"display_url\":\"pic.twitter.com\\\/3RlEbh9Vaz\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Cyb3rguerre\\\/status\\\/1334786274893443072\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":675,\"resize\":\"fit\"},\"large\":{\"w\":1920,\"h\":1080,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/cyberguerre.numerama.com\\\" rel=\\\"nofollow\\\">Cyberguerre<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":166,\"favorite_count\":127,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":166,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330275600062439426\\\/ebM3qUVM_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1330275600062439426\\\/ebM3qUVM_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1204826379889582080\\\/1578399387\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":309040201,\"id_str\":\"309040201\",\"name\":\"Lo\\u00efc Tosser\",\"screen_name\":\"Wowi42\",\"location\":\"Dubai, UAE\",\"description\":\"CoFounder https:\\\/\\\/t.co\\\/80UoLAwd4Z \\n\\nFrench Nerd! #sysadmin #Rust #FreeBSD #Go #Archlinux #PostgreSQL #erlang #Elixir #Python\\n\\nNam et ipsa scientia potestas est\",\"url\":\"https:\\\/\\\/t.co\\\/43QfBcr0yp\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/43QfBcr0yp\",\"expanded_url\":\"https:\\\/\\\/kalvad.com\",\"display_url\":\"kalvad.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/80UoLAwd4Z\",\"expanded_url\":\"http:\\\/\\\/kalvad.com\",\"display_url\":\"kalvad.com\",\"indices\":[10,33]}]}},\"protected\":false,\"followers_count\":351,\"friends_count\":898,\"listed_count\":85,\"created_at\":\"Wed Jun 01 12:42:16 +0000 2011\",\"favourites_count\":1176,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":3341,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 08:14:41 +0000 2020\",\"id\":1336585042781462528,\"id_str\":\"1336585042781462528\",\"text\":\"RT @PierreZ: QEMU project: QEMU version 5.2.0 released https:\\\/\\\/t.co\\\/pa0QeyFqxh\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"PierreZ\",\"name\":\"Pierre Zemb\",\"id\":20902054,\"id_str\":\"20902054\",\"indices\":[3,11]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pa0QeyFqxh\",\"expanded_url\":\"https:\\\/\\\/www.qemu.org\\\/2020\\\/12\\\/08\\\/qemu-5-2-0\\\/\",\"display_url\":\"qemu.org\\\/2020\\\/12\\\/08\\\/qem\\u2026\",\"indices\":[55,78]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 22:26:16 +0000 2020\",\"id\":1336436961863757825,\"id_str\":\"1336436961863757825\",\"text\":\"QEMU project: QEMU version 5.2.0 released https:\\\/\\\/t.co\\\/pa0QeyFqxh\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pa0QeyFqxh\",\"expanded_url\":\"https:\\\/\\\/www.qemu.org\\\/2020\\\/12\\\/08\\\/qemu-5-2-0\\\/\",\"display_url\":\"qemu.org\\\/2020\\\/12\\\/08\\\/qem\\u2026\",\"indices\":[42,65]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"et\"},\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"et\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/924596762924519424\\\/wbKwREXf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/924596762924519424\\\/wbKwREXf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/309040201\\\/1517719636\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":131908706,\"id_str\":\"131908706\",\"name\":\"Scaleway FR\",\"screen_name\":\"Scaleway_fr\",\"location\":\"Paris\",\"description\":\"Scaleway est l\\u2019un des leaders europ\\u00e9ens du #cloud \\u2601\\ufe0f\\nPour toute demande d\\u2019assistance, merci de contacter @scaleway_help \\ud83d\\udc69\\u200d\\ud83d\\udcbb\",\"url\":\"https:\\\/\\\/t.co\\\/qI9aVuhEY2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qI9aVuhEY2\",\"expanded_url\":\"http:\\\/\\\/www.scaleway.com\\\/fr\",\"display_url\":\"scaleway.com\\\/fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":28369,\"friends_count\":12642,\"listed_count\":253,\"created_at\":\"Sun Apr 11 18:24:18 +0000 2010\",\"favourites_count\":1888,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":15301,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:54:59 +0000 2020\",\"id\":1336685779976941571,\"id_str\":\"1336685779976941571\",\"text\":\"@arvi89 Bonjour @arvi89, suite \\u00e0 l'uncapping nous affichons uniquement les prix \\u00e0 l'heure pour la majorit\\u00e9 de nos p\\u2026 https:\\\/\\\/t.co\\\/3mkykh4FZn\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"arvi89\",\"name\":\"Arvi Lef\\u00e8vre\",\"id\":18236221,\"id_str\":\"18236221\",\"indices\":[0,7]},{\"screen_name\":\"arvi89\",\"name\":\"Arvi Lef\\u00e8vre\",\"id\":18236221,\"id_str\":\"18236221\",\"indices\":[16,23]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3mkykh4FZn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336685779976941571\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1335414035018371072,\"in_reply_to_status_id_str\":\"1335414035018371072\",\"in_reply_to_user_id\":18236221,\"in_reply_to_user_id_str\":\"18236221\",\"in_reply_to_screen_name\":\"arvi89\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097899781534507010\\\/zzNiaMuK_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097899781534507010\\\/zzNiaMuK_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/131908706\\\/1605777844\",\"profile_link_color\":\"981CEB\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":1083280158117715969,\"id_str\":\"1083280158117715969\",\"name\":\"The Agency Dev\",\"screen_name\":\"TheAgencyDev\",\"location\":\"Vancouver, BC\",\"description\":\"Tweets about the developer perspective of #agencylife ; Newsletters delivered every week via https:\\\/\\\/t.co\\\/enY3xwDQ5B ; Curated by @incredimike\",\"url\":\"https:\\\/\\\/t.co\\\/1JNPrinPY1\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/1JNPrinPY1\",\"expanded_url\":\"https:\\\/\\\/agencydev.click\",\"display_url\":\"agencydev.click\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/enY3xwDQ5B\",\"expanded_url\":\"http:\\\/\\\/agencydev.click\",\"display_url\":\"agencydev.click\",\"indices\":[93,116]}]}},\"protected\":false,\"followers_count\":3000,\"friends_count\":3556,\"listed_count\":21,\"created_at\":\"Thu Jan 10 08:31:30 +0000 2019\",\"favourites_count\":1181,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":6735,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:31:03 +0000 2020\",\"id\":1336694856807276550,\"id_str\":\"1336694856807276550\",\"text\":\"RT @TheAgencyDev: \\ud83e\\udd1e\\ud83e\\udd1e\\ud83e\\udd1e https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TheAgencyDev\",\"name\":\"The Agency Dev\",\"id\":1083280158117715969,\"id_str\":\"1083280158117715969\",\"indices\":[3,16]}],\"urls\":[],\"media\":[{\"id\":1157651333828272128,\"id_str\":\"1157651333828272128\",\"indices\":[22,45],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"display_url\":\"pic.twitter.com\\\/5zvbNDj7un\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TheAgencyDev\\\/status\\\/1157651337347239936\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"medium\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"}},\"source_status_id\":1157651337347239936,\"source_status_id_str\":\"1157651337347239936\",\"source_user_id\":1083280158117715969,\"source_user_id_str\":\"1083280158117715969\"}]},\"extended_entities\":{\"media\":[{\"id\":1157651333828272128,\"id_str\":\"1157651333828272128\",\"indices\":[22,45],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"display_url\":\"pic.twitter.com\\\/5zvbNDj7un\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TheAgencyDev\\\/status\\\/1157651337347239936\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"medium\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"}},\"source_status_id\":1157651337347239936,\"source_status_id_str\":\"1157651337347239936\",\"source_user_id\":1083280158117715969,\"source_user_id_str\":\"1083280158117715969\"}]},\"source\":\"<a href=\\\"https:\\\/\\\/socialbee.io\\\/\\\" rel=\\\"nofollow\\\">SocialBee.io v2<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Aug 03 13:56:01 +0000 2019\",\"id\":1157651337347239936,\"id_str\":\"1157651337347239936\",\"text\":\"\\ud83e\\udd1e\\ud83e\\udd1e\\ud83e\\udd1e https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1157651333828272128,\"id_str\":\"1157651333828272128\",\"indices\":[4,27],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"display_url\":\"pic.twitter.com\\\/5zvbNDj7un\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TheAgencyDev\\\/status\\\/1157651337347239936\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"medium\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1157651333828272128,\"id_str\":\"1157651333828272128\",\"indices\":[4,27],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EBDNwS6XYAAnm3G.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5zvbNDj7un\",\"display_url\":\"pic.twitter.com\\\/5zvbNDj7un\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TheAgencyDev\\\/status\\\/1157651337347239936\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"medium\":{\"w\":1080,\"h\":1080,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/socialbee.io\\\/\\\" rel=\\\"nofollow\\\">SocialBee.io v2<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":19,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1096101799574958080\\\/R2pS_ViG_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1096101799574958080\\\/R2pS_ViG_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1083280158117715969\\\/1573370542\",\"profile_link_color\":\"F17F0F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":193677301,\"id_str\":\"193677301\",\"name\":\"EXTIA\",\"screen_name\":\"Extia_conseil\",\"location\":\"S\\u00e8vres, France\",\"description\":\"Soci\\u00e9t\\u00e9 de #Conseil \\u00ab d\\u2019abord qui, ensuite quoi ! \\u00bb. Nous twittons et RT sur : #Actu #BestPractices #Bien\\u00catreAuTravail #Agilit\\u00e9 #Engineering #IT #Cloud & #Data\",\"url\":\"https:\\\/\\\/t.co\\\/kJs6mqcpwG\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kJs6mqcpwG\",\"expanded_url\":\"https:\\\/\\\/www.extia.fr\\\/?utm_source=Twitter&utm_medium=Accueil&utm_campaign=accueil_twitter\",\"display_url\":\"extia.fr\\\/?utm_source=Tw\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7065,\"friends_count\":7110,\"listed_count\":64,\"created_at\":\"Wed Sep 22 12:39:18 +0000 2010\",\"favourites_count\":1301,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2342,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 12:05:43 +0000 2020\",\"id\":1336280797142261767,\"id_str\":\"1336280797142261767\",\"text\":\"En cette #Journ\\u00e9eMondialeDuClimat voici un RDV \\u00e0 ne pas manquer. \\ud83d\\udc47 \\n\\nLe Meetup\\u00ae Event Dev focus Green IT organis\\u00e9 p\\u2026 https:\\\/\\\/t.co\\\/6xtSrroVC1\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Journ\\u00e9eMondialeDuClimat\",\"indices\":[9,33]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6xtSrroVC1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336280797142261767\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1332323639337824259,\"quoted_status_id_str\":\"1332323639337824259\",\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FAF9F7\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1300747494628958209\\\/TS75hOXs_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1300747494628958209\\\/TS75hOXs_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/193677301\\\/1599552379\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15385968,\"id_str\":\"15385968\",\"name\":\"Giorgio Bertini\",\"screen_name\":\"gfbertini\",\"location\":\"\",\"description\":\"Society culture art intelligence cognition neuroscience autopoiesis complexity systems networks\",\"url\":\"http:\\\/\\\/t.co\\\/1uNeIAAC3Q\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/1uNeIAAC3Q\",\"expanded_url\":\"http:\\\/\\\/gfbertini.wordpress.com\\\/\",\"display_url\":\"gfbertini.wordpress.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2436,\"friends_count\":2434,\"listed_count\":281,\"created_at\":\"Fri Jul 11 01:52:17 +0000 2008\",\"favourites_count\":280,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":23106,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:03:28 +0000 2020\",\"id\":1336778515753148429,\"id_str\":\"1336778515753148429\",\"text\":\"Gunin Alexander | Learning Art https:\\\/\\\/t.co\\\/8nkcK30pda\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8nkcK30pda\",\"expanded_url\":\"https:\\\/\\\/learningchangeart.wordpress.com\\\/2016\\\/03\\\/18\\\/gunin-alexander\\\/\",\"display_url\":\"learningchangeart.wordpress.com\\\/2016\\\/03\\\/18\\\/gun\\u2026\",\"indices\":[31,54]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme3\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme3\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334667664552325121\\\/37hg5Uk8_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1334667664552325121\\\/37hg5Uk8_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15385968\\\/1544989111\",\"profile_link_color\":\"67C5AF\",\"profile_sidebar_border_color\":\"CBD7D3\",\"profile_sidebar_fill_color\":\"4E8695\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":994550974311215105,\"id_str\":\"994550974311215105\",\"name\":\"PySer\",\"screen_name\":\"PythonSerbia\",\"location\":\"Novi Sad, Republic of Serbia\",\"description\":\"PySer is a one day, community-driven Python conference full of talks, tutorials and activities, providing engaging content to developers of all skill levels.\",\"url\":\"https:\\\/\\\/t.co\\\/Q2tTPI9DqB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Q2tTPI9DqB\",\"expanded_url\":\"http:\\\/\\\/PySer.org\",\"display_url\":\"PySer.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":135,\"friends_count\":133,\"listed_count\":0,\"created_at\":\"Thu May 10 12:13:24 +0000 2018\",\"favourites_count\":51,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":73,\"lang\":null,\"status\":{\"created_at\":\"Fri Oct 09 15:23:50 +0000 2020\",\"id\":1314587381719236609,\"id_str\":\"1314587381719236609\",\"text\":\"RT @TildaCenter: See you tomorrow!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TildaCenter\",\"name\":\"Tilda\",\"id\":3121324354,\"id_str\":\"3121324354\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Oct 09 15:22:23 +0000 2020\",\"id\":1314587017725071361,\"id_str\":\"1314587017725071361\",\"text\":\"See you tomorrow! https:\\\/\\\/t.co\\\/d8U3xNzqaV\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/d8U3xNzqaV\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/meka_floss\\\/status\\\/1314586718646013953\",\"display_url\":\"twitter.com\\\/meka_floss\\\/sta\\u2026\",\"indices\":[18,41]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1314586718646013953,\"quoted_status_id_str\":\"1314586718646013953\",\"retweet_count\":4,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":true,\"quoted_status_id\":1314586718646013953,\"quoted_status_id_str\":\"1314586718646013953\",\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/994553469137768448\\\/moYQHNxi_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/994553469137768448\\\/moYQHNxi_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/994550974311215105\\\/1532692403\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":516899279,\"id_str\":\"516899279\",\"name\":\"Fernando M\\u00e9ndez\",\"screen_name\":\"NineCenturies\",\"location\":\"Paris, France\",\"description\":\"CTO at Weekendesk\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":46,\"friends_count\":122,\"listed_count\":1,\"created_at\":\"Tue Mar 06 21:16:00 +0000 2012\",\"favourites_count\":61,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":54,\"lang\":null,\"status\":{\"created_at\":\"Mon Jun 22 19:58:34 +0000 2020\",\"id\":1275156243095654400,\"id_str\":\"1275156243095654400\",\"text\":\"@A_Al_ADL There seems to be a dns resolution issue. In particular it doesn't seem to work from awsdns.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"A_Al_ADL\",\"name\":\"Ahmad Adel\",\"id\":247551709,\"id_str\":\"247551709\",\"indices\":[0,9]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1275150361595121670,\"in_reply_to_status_id_str\":\"1275150361595121670\",\"in_reply_to_user_id\":247551709,\"in_reply_to_user_id_str\":\"247551709\",\"in_reply_to_screen_name\":\"A_Al_ADL\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/sticky\\\/default_profile_images\\\/default_profile_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/sticky\\\/default_profile_images\\\/default_profile_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":true,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":259962307,\"id_str\":\"259962307\",\"name\":\"The Dark One\",\"screen_name\":\"Ahrimana\",\"location\":\"\",\"description\":\"Photographer | Feminist | #EduTech | #InfoSec | Freedom fighter | @TildaCenter Cofounder | @PythonSerbia organizing team | Libertati viam facere\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3068,\"friends_count\":3054,\"listed_count\":68,\"created_at\":\"Wed Mar 02 23:16:04 +0000 2011\",\"favourites_count\":43666,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":43306,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:26:39 +0000 2020\",\"id\":1336799448895287298,\"id_str\":\"1336799448895287298\",\"text\":\"@PhTx3 @bachi83 @vladimircicovic Ja mislim da nedostaje edukacija internet provajderima pre svega.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"PhTx3\",\"name\":\"Phoneutria nigriventer\",\"id\":73979481,\"id_str\":\"73979481\",\"indices\":[0,6]},{\"screen_name\":\"bachi83\",\"name\":\"Vladimir Vu\\u010di\\u0107evi\\u0107\",\"id\":342979035,\"id_str\":\"342979035\",\"indices\":[7,15]},{\"screen_name\":\"vladimircicovic\",\"name\":\"Vladimir \\\"ucio programiranje kod Vita\\\"\",\"id\":1238605316729769987,\"id_str\":\"1238605316729769987\",\"indices\":[16,32]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336794419144617986,\"in_reply_to_status_id_str\":\"1336794419144617986\",\"in_reply_to_user_id\":73979481,\"in_reply_to_user_id_str\":\"73979481\",\"in_reply_to_screen_name\":\"PhTx3\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/927970570041511937\\\/LYD7uSur_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/927970570041511937\\\/LYD7uSur_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/259962307\\\/1416408898\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":3121324354,\"id_str\":\"3121324354\",\"name\":\"Tilda\",\"screen_name\":\"TildaCenter\",\"location\":\"Novi Sad\",\"description\":\"Center for transfer of IT knowledge, development of Cloud technologies, connecting young experts in the region and collaboration with media and organizations\",\"url\":\"http:\\\/\\\/t.co\\\/vzxm6uSe7l\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/vzxm6uSe7l\",\"expanded_url\":\"http:\\\/\\\/tilda.center\",\"display_url\":\"tilda.center\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":741,\"friends_count\":593,\"listed_count\":20,\"created_at\":\"Fri Mar 27 13:13:34 +0000 2015\",\"favourites_count\":578,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1556,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:24:59 +0000 2020\",\"id\":1336768830224429059,\"id_str\":\"1336768830224429059\",\"text\":\"RT @meka_floss: \\\"#Serbia vs #Internet\\\" or what hackery you need to pull off to get IPv6 here! Also, having multiple versions of APU with di\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Serbia\",\"indices\":[17,24]},{\"text\":\"Internet\",\"indices\":[28,37]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"meka_floss\",\"name\":\"meka\",\"id\":919966028,\"id_str\":\"919966028\",\"indices\":[3,14]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:22:47 +0000 2020\",\"id\":1336768274244259840,\"id_str\":\"1336768274244259840\",\"text\":\"\\\"#Serbia vs #Internet\\\" or what hackery you need to pull off to get IPv6 here! Also, having multiple versions of APU\\u2026 https:\\\/\\\/t.co\\\/hOiulM82TH\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Serbia\",\"indices\":[1,8]},{\"text\":\"Internet\",\"indices\":[12,21]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hOiulM82TH\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336768274244259840\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/958390140812046336\\\/yuIJm8F6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/958390140812046336\\\/yuIJm8F6_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3121324354\\\/1478090491\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":185136519,\"id_str\":\"185136519\",\"name\":\"Shawn C\",\"screen_name\":\"citypw\",\"location\":\"Libre port\",\"description\":\"Free\\\/libre software\\\/fw\\\/hw enthusiast, neo-calvinist, rational anarchist, GPL-compliance supporter, infosec consultant, coder, Lord commander of HardenedLinux...\",\"url\":\"https:\\\/\\\/t.co\\\/T5Nk6MQ2U6\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T5Nk6MQ2U6\",\"expanded_url\":\"http:\\\/\\\/citypw.blogspot.com\",\"display_url\":\"citypw.blogspot.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":798,\"friends_count\":1131,\"listed_count\":184,\"created_at\":\"Tue Aug 31 09:30:23 +0000 2010\",\"favourites_count\":17949,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":14118,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 03:12:15 +0000 2020\",\"id\":1336146545146802177,\"id_str\":\"1336146545146802177\",\"text\":\"Congrats, Xeno. OSTv1 benefits a lot of ppl including myself. Thanks so much. Look forward to OSTv2! https:\\\/\\\/t.co\\\/JbIYECQCI2\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JbIYECQCI2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/xenokovah\\\/status\\\/1336054258140139521\",\"display_url\":\"twitter.com\\\/xenokovah\\\/stat\\u2026\",\"indices\":[101,124]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336054258140139521,\"quoted_status_id_str\":\"1336054258140139521\",\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1114427441\\\/vampire-eyes-sm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1114427441\\\/vampire-eyes-sm_normal.jpg\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":7077442,\"id_str\":\"7077442\",\"name\":\"Kevin F. \\ud83c\\uddff\\ud83c\\udde6\\ud83c\\udd94\\ud83d\\ude37\\ud83c\\udfe0\",\"screen_name\":\"4eek\",\"location\":\"Multilocation\",\"description\":\"Public Interest Technologist \\\/ Civic Hacker. age1a85mxz6r8p9l8tn6rsetukwdsh90gz0tczq854y6uw3s90tchcvsdeyquc\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":true,\"followers_count\":968,\"friends_count\":2033,\"listed_count\":54,\"created_at\":\"Mon Jun 25 22:12:31 +0000 2007\",\"favourites_count\":440,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1841,\"lang\":null,\"status\":{\"created_at\":\"Fri Aug 28 11:35:16 +0000 2020\",\"id\":1299309570951729157,\"id_str\":\"1299309570951729157\",\"text\":\"RT @NavalBot: \\\"The variation between engineering output is so high that the best engineers will always be underpaid, and driven towards fou\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NavalBot\",\"name\":\"Naval Ravikant Bot\",\"id\":1010077800441765888,\"id_str\":\"1010077800441765888\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Aug 27 20:00:34 +0000 2020\",\"id\":1299074345860575233,\"id_str\":\"1299074345860575233\",\"text\":\"\\\"The variation between engineering output is so high that the best engineers will always be underpaid, and driven t\\u2026 https:\\\/\\\/t.co\\\/PKKhr439tq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PKKhr439tq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1299074345860575233\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.fs.blog\\\/\\\" rel=\\\"nofollow\\\">Naval Ravikant Bot x<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":46,\"favorite_count\":514,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":46,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme7\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme7\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160478400072552449\\\/hYC9MzfC_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160478400072552449\\\/hYC9MzfC_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/7077442\\\/1521274911\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":58470740,\"id_str\":\"58470740\",\"name\":\"Jamie Coleman\",\"screen_name\":\"Jamie_Lee_C\",\"location\":\"Southampton, England\",\"description\":\"Software Dev\\\/Advocate team lead @IBM (@OpenLibertyIO and @MicroProfileIO), lover of animals, travelling, cars, space, technology and Java. My views are my own!\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1940,\"friends_count\":1134,\"listed_count\":11,\"created_at\":\"Mon Jul 20 13:18:33 +0000 2009\",\"favourites_count\":1837,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":657,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 11:29:25 +0000 2020\",\"id\":1334822108623478788,\"id_str\":\"1334822108623478788\",\"text\":\"RT @reza_rahman: Guidance to run WebSphere Liberty and Open Liberty on Azure Red Hat OpenShift, developed in collaboration with IBM, is now\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"reza_rahman\",\"name\":\"Reza Rahman\",\"id\":16145438,\"id_str\":\"16145438\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 20:30:54 +0000 2020\",\"id\":1334595990297440256,\"id_str\":\"1334595990297440256\",\"text\":\"Guidance to run WebSphere Liberty and Open Liberty on Azure Red Hat OpenShift, developed in collaboration with IBM,\\u2026 https:\\\/\\\/t.co\\\/Etx3UuUDUL\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Etx3UuUDUL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334595990297440256\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":30,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":9,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054715012529487872\\\/UN8SpuAN_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054715012529487872\\\/UN8SpuAN_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/58470740\\\/1574860395\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1165774596173221888,\"id_str\":\"1165774596173221888\",\"name\":\"LoveMeAloha\",\"screen_name\":\"LoveMeAloha\",\"location\":\"Honolulu, HI\",\"description\":\"We\\u2019re on a mission to spread #love all over the world! Follow us \\u27a1\\ufe0f @LoveMissionCo \\u2764\\ufe0f\",\"url\":\"https:\\\/\\\/t.co\\\/FjtbVmFfRD\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/FjtbVmFfRD\",\"expanded_url\":\"http:\\\/\\\/LoveMeAloha.com\",\"display_url\":\"LoveMeAloha.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":967,\"friends_count\":1639,\"listed_count\":2,\"created_at\":\"Sun Aug 25 23:55:10 +0000 2019\",\"favourites_count\":171,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":116,\"lang\":null,\"status\":{\"created_at\":\"Fri Jan 03 17:57:20 +0000 2020\",\"id\":1213157411420160000,\"id_str\":\"1213157411420160000\",\"text\":\"Who do you love? \\u2764\\ufe0f\\n\\ud83d\\udda4\\ud83e\\udd0e\\ud83d\\udc9c\\ud83d\\udc99\\ud83d\\udc9a\\u2764\\ufe0f\\ud83d\\udc9b\\ud83e\\udde1\\ud83e\\udd0d\\n\\u27a1\\ufe0f https:\\\/\\\/t.co\\\/IxHoOFQS3W https:\\\/\\\/t.co\\\/QEn4ZtO5wq\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IxHoOFQS3W\",\"expanded_url\":\"http:\\\/\\\/LoveMissionCo.com\",\"display_url\":\"LoveMissionCo.com\",\"indices\":[34,57]}],\"media\":[{\"id\":1213157407565611008,\"id_str\":\"1213157407565611008\",\"indices\":[58,81],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/ENYAPA6VAAA4tCQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/ENYAPA6VAAA4tCQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/QEn4ZtO5wq\",\"display_url\":\"pic.twitter.com\\\/QEn4ZtO5wq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/LoveMeAloha\\\/status\\\/1213157411420160000\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":845,\"h\":845,\"resize\":\"fit\"},\"medium\":{\"w\":845,\"h\":845,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1213157407565611008,\"id_str\":\"1213157407565611008\",\"indices\":[58,81],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/ENYAPA6VAAA4tCQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/ENYAPA6VAAA4tCQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/QEn4ZtO5wq\",\"display_url\":\"pic.twitter.com\\\/QEn4ZtO5wq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/LoveMeAloha\\\/status\\\/1213157411420160000\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":845,\"h\":845,\"resize\":\"fit\"},\"medium\":{\"w\":845,\"h\":845,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1175461756698648576\\\/-Y43IgdG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1175461756698648576\\\/-Y43IgdG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1165774596173221888\\\/1573107047\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":841754453581664259,\"id_str\":\"841754453581664259\",\"name\":\"Evowlve \\ud83e\\udd89\",\"screen_name\":\"evowlve\",\"location\":\"France\",\"description\":\"R\\u00e9seau de recrutement du digital - #IT #IOT #Webmarketing #GrowthHacking\",\"url\":\"https:\\\/\\\/t.co\\\/mmQWdyxh9Q\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/mmQWdyxh9Q\",\"expanded_url\":\"http:\\\/\\\/evowlve.co\",\"display_url\":\"evowlve.co\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1388,\"friends_count\":2204,\"listed_count\":11,\"created_at\":\"Tue Mar 14 20:54:35 +0000 2017\",\"favourites_count\":1070,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":61,\"lang\":null,\"status\":{\"created_at\":\"Thu Jul 25 08:55:00 +0000 2019\",\"id\":1154314093886607360,\"id_str\":\"1154314093886607360\",\"text\":\"Dans la s\\u00e9rie #LaFrancelefaitaussi : le cloud gaming \\ud83c\\udfaede @Shadow_France fasse \\u00e0 l'arriver de Google Stadia \\u27a1 https:\\\/\\\/t.co\\\/tA8Y2bMxFW\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"LaFrancelefaitaussi\",\"indices\":[14,34]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Shadow_France\",\"name\":\"Shadow France\",\"id\":747766766839947264,\"id_str\":\"747766766839947264\",\"indices\":[57,71]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/tA8Y2bMxFW\",\"expanded_url\":\"http:\\\/\\\/evow.lv\\\/I0W2To\",\"display_url\":\"evow.lv\\\/I0W2To\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"https:\\\/\\\/swello.com\\\/fr\\\/\\\" rel=\\\"nofollow\\\">Swello<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":14,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1009928211680169986\\\/yg23lKtw_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1009928211680169986\\\/yg23lKtw_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/841754453581664259\\\/1516800520\",\"profile_link_color\":\"111183\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1119531757949411328,\"id_str\":\"1119531757949411328\",\"name\":\"ExoAlpha\",\"screen_name\":\"ExoAlpha_\",\"location\":\"Paris, France\",\"description\":\"ExoAlpha is an #AssetManagement firm, specialized in #DigitalAssets trading.The strategies are only proposed in a managed account format. #Transparency\",\"url\":\"https:\\\/\\\/t.co\\\/ld9FdAdimu\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ld9FdAdimu\",\"expanded_url\":\"http:\\\/\\\/exoalpha.com\",\"display_url\":\"exoalpha.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":316,\"friends_count\":593,\"listed_count\":1,\"created_at\":\"Sat Apr 20 09:22:25 +0000 2019\",\"favourites_count\":80,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":71,\"lang\":null,\"status\":{\"created_at\":\"Mon Oct 26 09:35:55 +0000 2020\",\"id\":1320660419338510337,\"id_str\":\"1320660419338510337\",\"text\":\"With more than $300millions #trading volume in the last 6months, ExoAlpha\\u2019s CIO gave his thoughts on\\u2026 https:\\\/\\\/t.co\\\/ky3iGISssS\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"trading\",\"indices\":[28,36]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ky3iGISssS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1320660419338510337\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[102,125]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1320035069432573952,\"quoted_status_id_str\":\"1320035069432573952\",\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1122853581542109185\\\/UrPIcBD7_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1122853581542109185\\\/UrPIcBD7_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1119531757949411328\\\/1583836791\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1180028191232188416,\"id_str\":\"1180028191232188416\",\"name\":\"workye\",\"screen_name\":\"NetWorkye\",\"location\":\"\",\"description\":\"workye is where the world connects, hire, and work together. We help companies find, evaluate and hire remote teams, faster. Have a question? Send us a DM.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1123,\"friends_count\":1125,\"listed_count\":6,\"created_at\":\"Fri Oct 04 07:54:00 +0000 2019\",\"favourites_count\":169,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":61,\"lang\":null,\"status\":{\"created_at\":\"Fri Jul 10 12:57:03 +0000 2020\",\"id\":1281573146269814785,\"id_str\":\"1281573146269814785\",\"text\":\"I just published Remote Work &amp; Virtual Collaboration Is The New Normal. https:\\\/\\\/t.co\\\/uH3Otlz4va\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/uH3Otlz4va\",\"expanded_url\":\"https:\\\/\\\/link.medium.com\\\/ngSVEedHW7\",\"display_url\":\"link.medium.com\\\/ngSVEedHW7\",\"indices\":[76,99]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181103896523104256\\\/ySlQ63Lu_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181103896523104256\\\/ySlQ63Lu_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1180028191232188416\\\/1570263964\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1002272181139763200,\"id_str\":\"1002272181139763200\",\"name\":\"VaTeFaireDecrypter\",\"screen_name\":\"VDecrypter\",\"location\":\"France\",\"description\":\"\\ud83c\\uddeb\\ud83c\\uddf7Essaye de d\\u00e9crypter la #crypto et de cr\\u00e9er des outils pour l'analyser \\ud83d\\udcc8\",\"url\":\"https:\\\/\\\/t.co\\\/3ocNBZV3JP\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3ocNBZV3JP\",\"expanded_url\":\"http:\\\/\\\/vatefairedecrypter.com\\\/\",\"display_url\":\"vatefairedecrypter.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1337,\"friends_count\":2801,\"listed_count\":11,\"created_at\":\"Thu May 31 19:34:44 +0000 2018\",\"favourites_count\":82,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1236,\"lang\":null,\"status\":{\"created_at\":\"Fri Aug 28 23:52:23 +0000 2020\",\"id\":1299495071151206400,\"id_str\":\"1299495071151206400\",\"text\":\"@neuralink Why would someone want to be awake while your skull is being opened ?\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"neuralink\",\"name\":\"Neuralink\",\"id\":895332160130891776,\"id_str\":\"895332160130891776\",\"indices\":[0,10]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1299475984672944129,\"in_reply_to_status_id_str\":\"1299475984672944129\",\"in_reply_to_user_id\":895332160130891776,\"in_reply_to_user_id_str\":\"895332160130891776\",\"in_reply_to_screen_name\":\"neuralink\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1086768923922628608\\\/CROD5ycc_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1086768923922628608\\\/CROD5ycc_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1002272181139763200\\\/1537361254\",\"profile_link_color\":\"FAB81E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":5952302,\"id_str\":\"5952302\",\"name\":\"Jean M Russell\",\"screen_name\":\"NurtureGirl\",\"location\":\"Bloomington, IL\",\"description\":\"Thrivability. Author: https:\\\/\\\/t.co\\\/Q865kaL1tX\",\"url\":\"https:\\\/\\\/t.co\\\/7Brv3WY3iQ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7Brv3WY3iQ\",\"expanded_url\":\"http:\\\/\\\/jeanmrussell.com\",\"display_url\":\"jeanmrussell.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Q865kaL1tX\",\"expanded_url\":\"http:\\\/\\\/triarchypress.net\\\/jean-russell.html\",\"display_url\":\"triarchypress.net\\\/jean-russell.h\\u2026\",\"indices\":[22,45]}]}},\"protected\":false,\"followers_count\":5088,\"friends_count\":2042,\"listed_count\":529,\"created_at\":\"Fri May 11 06:39:13 +0000 2007\",\"favourites_count\":21229,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":19754,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:29:51 +0000 2020\",\"id\":1336754952811778051,\"id_str\":\"1336754952811778051\",\"text\":\"@tomazgreco @Strange This is so epically uniformed. I feel sad because I think of you @tomazgreco as a smart man.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"tomazgreco\",\"name\":\"Thomas H Greco Jr\",\"id\":111477513,\"id_str\":\"111477513\",\"indices\":[0,11]},{\"screen_name\":\"Strange\",\"name\":\"Strange\",\"id\":839476126644858880,\"id_str\":\"839476126644858880\",\"indices\":[12,20]},{\"screen_name\":\"tomazgreco\",\"name\":\"Thomas H Greco Jr\",\"id\":111477513,\"id_str\":\"111477513\",\"indices\":[86,97]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336489096110243840,\"in_reply_to_status_id_str\":\"1336489096110243840\",\"in_reply_to_user_id\":111477513,\"in_reply_to_user_id_str\":\"111477513\",\"in_reply_to_screen_name\":\"tomazgreco\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1210251156238282754\\\/4-48yYdh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1210251156238282754\\\/4-48yYdh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/5952302\\\/1577381518\",\"profile_link_color\":\"FA743E\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"DAECF4\",\"profile_text_color\":\"663B12\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1161259135863808001,\"id_str\":\"1161259135863808001\",\"name\":\"Unchain Immo\",\"screen_name\":\"UnchainImmo\",\"location\":\"France\",\"description\":\"@UnchainImmo, la salle de vente en ligne con\\u00e7ue pour que vous puissiez vendre ou acheter votre bien immobilier en toute s\\u00e9r\\u00e9nit\\u00e9 !\",\"url\":\"https:\\\/\\\/t.co\\\/gYQrmy2lKn\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/gYQrmy2lKn\",\"expanded_url\":\"https:\\\/\\\/www.unchainimmo.com\\\/\",\"display_url\":\"unchainimmo.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":450,\"friends_count\":752,\"listed_count\":4,\"created_at\":\"Tue Aug 13 12:52:07 +0000 2019\",\"favourites_count\":96,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":77,\"lang\":null,\"status\":{\"created_at\":\"Sun Aug 16 07:53:13 +0000 2020\",\"id\":1294905038452776960,\"id_str\":\"1294905038452776960\",\"text\":\"@25_M_Proprios #Unchain Immo utilise depuis toujours le protocole de signature AR24 avec authentification totalement s\\u00e9curis\\u00e9e.\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Unchain\",\"indices\":[15,23]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"25_M_Proprios\",\"name\":\"25 Millions de Propri\\u00e9taires\",\"id\":974286742508441600,\"id_str\":\"974286742508441600\",\"indices\":[0,14]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1294896527995854848,\"in_reply_to_status_id_str\":\"1294896527995854848\",\"in_reply_to_user_id\":974286742508441600,\"in_reply_to_user_id_str\":\"974286742508441600\",\"in_reply_to_screen_name\":\"25_M_Proprios\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161259846123044865\\\/VYcDBaLm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1161259846123044865\\\/VYcDBaLm_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1161259135863808001\\\/1574420260\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1149598234655858690,\"id_str\":\"1149598234655858690\",\"name\":\"Paris P2P\",\"screen_name\":\"ParisP2P\",\"location\":\"Paris, France\",\"description\":\"Parisian community interested in #P2P and #Cryptography technologies\",\"url\":\"https:\\\/\\\/t.co\\\/VPY9QZ6hyR\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VPY9QZ6hyR\",\"expanded_url\":\"https:\\\/\\\/p2p.paris\",\"display_url\":\"p2p.paris\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":498,\"friends_count\":553,\"listed_count\":9,\"created_at\":\"Fri Jul 12 08:35:52 +0000 2019\",\"favourites_count\":270,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":397,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 01 06:57:58 +0000 2020\",\"id\":1333666632615530496,\"id_str\":\"1333666632615530496\",\"text\":\"RT @revolunet: \\u26a1\\ufe0f IPFS de A \\u00e0 Y\\n\\nC'est Mercredi \\u00e0 19h, en ligne sur le discord de @ParisP2P \\n\\nD\\u00e9centralisation, p2p, Filecoin and more\\n\\nhtt\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"revolunet\",\"name\":\"Julien - revolunet\",\"id\":198444783,\"id_str\":\"198444783\",\"indices\":[3,13]},{\"screen_name\":\"ParisP2P\",\"name\":\"Paris P2P\",\"id\":1149598234655858690,\"id_str\":\"1149598234655858690\",\"indices\":[82,91]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Nov 30 21:42:01 +0000 2020\",\"id\":1333526726090043399,\"id_str\":\"1333526726090043399\",\"text\":\"\\u26a1\\ufe0f IPFS de A \\u00e0 Y\\n\\nC'est Mercredi \\u00e0 19h, en ligne sur le discord de @ParisP2P \\n\\nD\\u00e9centralisation, p2p, Filecoin and\\u2026 https:\\\/\\\/t.co\\\/IR7M2AOkY7\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ParisP2P\",\"name\":\"Paris P2P\",\"id\":1149598234655858690,\"id_str\":\"1149598234655858690\",\"indices\":[67,76]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IR7M2AOkY7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1333526726090043399\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1153282632920309760\\\/81DQmN0B_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1153282632920309760\\\/81DQmN0B_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1149598234655858690\\\/1563809749\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1205456587852275712,\"id_str\":\"1205456587852275712\",\"name\":\"Martine Giot\",\"screen_name\":\"MartineGiot\",\"location\":\"Lille, France\",\"description\":\"sinc\\u00e8re respectueuse j'aime bien la nature le sport les voyages ballades entre amoureux les restaurants la plage le cin\\u00e9ma Messenger : Lorrainemartine100\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":78,\"friends_count\":1040,\"listed_count\":0,\"created_at\":\"Fri Dec 13 11:57:11 +0000 2019\",\"favourites_count\":251,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":52,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 27 10:38:11 +0000 2019\",\"id\":1210510176895348738,\"id_str\":\"1210510176895348738\",\"text\":\"Bonjour et Bon vendredi \\u00e0 tous \\u2764\\ufe0f\\u2764\\ufe0f\\ud83d\\ude0d\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1209237541108506626\\\/PBvdJ2h9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1209237541108506626\\\/PBvdJ2h9_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1205456587852275712\\\/1577139672\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":60937066,\"id_str\":\"60937066\",\"name\":\"Heath Robertson\",\"screen_name\":\"HeathDRobertson\",\"location\":\"Jackson, Wyoming\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":94,\"friends_count\":452,\"listed_count\":7,\"created_at\":\"Tue Jul 28 15:45:23 +0000 2009\",\"favourites_count\":260,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":400,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:49:41 +0000 2020\",\"id\":1336759946549989376,\"id_str\":\"1336759946549989376\",\"text\":\"@TetonBlocks https:\\\/\\\/t.co\\\/QduZBINXgJ\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TetonBlocks\",\"name\":\"TetonBlocks\",\"id\":1333473397506916359,\"id_str\":\"1333473397506916359\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/QduZBINXgJ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/RealVision\\\/status\\\/1336445565551452165\",\"display_url\":\"twitter.com\\\/RealVision\\\/sta\\u2026\",\"indices\":[13,36]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":1333473397506916359,\"in_reply_to_user_id_str\":\"1333473397506916359\",\"in_reply_to_screen_name\":\"TetonBlocks\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336445565551452165,\"quoted_status_id_str\":\"1336445565551452165\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"709397\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1324792210538160129\\\/FhhIE9bH_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1324792210538160129\\\/FhhIE9bH_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/60937066\\\/1413377238\",\"profile_link_color\":\"FF3300\",\"profile_sidebar_border_color\":\"86A4A6\",\"profile_sidebar_fill_color\":\"A0C5C7\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":1463227411,\"id_str\":\"1463227411\",\"name\":\"turn\",\"screen_name\":\"VincentTommasi\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":36,\"friends_count\":300,\"listed_count\":0,\"created_at\":\"Mon May 27 21:44:19 +0000 2013\",\"favourites_count\":179,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":73,\"lang\":null,\"status\":{\"created_at\":\"Sun May 17 15:22:35 +0000 2020\",\"id\":1262040826860965888,\"id_str\":\"1262040826860965888\",\"text\":\"RT @JulienChieze: #CONCOURS \\ud83c\\udf81\\nJ\\u2019ai le plaisir de pouvoir vous offrir un Coffret Collector #XenobladeChronicles Definitive Edition \\u2728\\n\\nPour p\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"CONCOURS\",\"indices\":[18,27]},{\"text\":\"XenobladeChronicles\",\"indices\":[90,110]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"JulienChieze\",\"name\":\"Julien Chi\\u00e8ze\",\"id\":253296586,\"id_str\":\"253296586\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri May 15 06:11:13 +0000 2020\",\"id\":1261177296393773057,\"id_str\":\"1261177296393773057\",\"text\":\"#CONCOURS \\ud83c\\udf81\\nJ\\u2019ai le plaisir de pouvoir vous offrir un Coffret Collector #XenobladeChronicles Definitive Edition \\u2728\\u2026 https:\\\/\\\/t.co\\\/i5bbRFlV4l\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"CONCOURS\",\"indices\":[0,9]},{\"text\":\"XenobladeChronicles\",\"indices\":[72,92]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/i5bbRFlV4l\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1261177296393773057\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[115,138]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3578,\"favorite_count\":2053,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":3578,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973640511163719680\\\/f1ug-buP_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973640511163719680\\\/f1ug-buP_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1067074033433366534,\"id_str\":\"1067074033433366534\",\"name\":\"Daniel Kr\\u00fcger\",\"screen_name\":\"dnlkrgr\",\"location\":\"\",\"description\":\"+ Haskell\\n+ Prolog\\n+ nix package manager\\n+ NixOS\\n+ LineageOS\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":544,\"friends_count\":527,\"listed_count\":7,\"created_at\":\"Mon Nov 26 15:14:09 +0000 2018\",\"favourites_count\":604,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":783,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 10:07:21 +0000 2020\",\"id\":1334076680357482496,\"id_str\":\"1334076680357482496\",\"text\":\"hey all, as part of my thesis on writing a tool for reducing Haskell programs I am looking for additional test case\\u2026 https:\\\/\\\/t.co\\\/UfF0dKSvHu\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UfF0dKSvHu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334076680357482496\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311966011319635968\\\/5l_J_T6F_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1311966011319635968\\\/5l_J_T6F_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1067074033433366534\\\/1567976532\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":746077302505766912,\"id_str\":\"746077302505766912\",\"name\":\"AlexInvest 555 172\",\"screen_name\":\"ThornInvest\",\"location\":\"http:\\\/\\\/www.iastratv.com\",\"description\":\"I would be considered a Very Early Stage Investor with several huge successes on record. My latest investment began at inception to our current valuation today.\",\"url\":\"https:\\\/\\\/t.co\\\/TClmg7FrkM\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TClmg7FrkM\",\"expanded_url\":\"http:\\\/\\\/www.iastralive.com\",\"display_url\":\"iastralive.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1573,\"friends_count\":3521,\"listed_count\":7,\"created_at\":\"Thu Jun 23 20:27:45 +0000 2016\",\"favourites_count\":2372,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":16030,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:21:13 +0000 2020\",\"id\":1336798078465093632,\"id_str\":\"1336798078465093632\",\"text\":\"Johnny Mnemonic \\nhttps:\\\/\\\/t.co\\\/KZtypa5v2G\\n#cryptomovies\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"cryptomovies\",\"indices\":[41,54]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KZtypa5v2G\",\"expanded_url\":\"http:\\\/\\\/www.iastratv.com\\\/videos\\\/137\\\/johnny-mnemonic\\\/\",\"display_url\":\"iastratv.com\\\/videos\\\/137\\\/joh\\u2026\",\"indices\":[17,40]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.socialjukebox.com\\\" rel=\\\"nofollow\\\">The Social Jukebox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1022603065202016258\\\/wUcKMdpK_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1022603065202016258\\\/wUcKMdpK_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/746077302505766912\\\/1532443187\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":728535794755895296,\"id_str\":\"728535794755895296\",\"name\":\"TekTorch\",\"screen_name\":\"TekTorch\",\"location\":\"Sydney, New South Wales\",\"description\":\"Nimble Engineers, Finding Insights. Helping businesses predict the future - greatly improving business impact through state-of-the-art AI and ML\",\"url\":\"https:\\\/\\\/t.co\\\/i6Qjioy04X\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/i6Qjioy04X\",\"expanded_url\":\"https:\\\/\\\/www.tektorch.ai\",\"display_url\":\"tektorch.ai\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":718,\"friends_count\":2817,\"listed_count\":2,\"created_at\":\"Fri May 06 10:44:03 +0000 2016\",\"favourites_count\":4987,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":21,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 23 06:56:27 +0000 2019\",\"id\":1209004825200873473,\"id_str\":\"1209004825200873473\",\"text\":\"Check out my latest article: How Robotic Process Automation Can Benefit Enterprises of All Sizes https:\\\/\\\/t.co\\\/CbTtFMyAf8 via @LinkedIn\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LinkedIn\",\"name\":\"LinkedIn\",\"id\":13058772,\"id_str\":\"13058772\",\"indices\":[125,134]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CbTtFMyAf8\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/pulse\\\/how-robotic-process-automation-can-benefit-all-sizes-nikhil-pal-singh\",\"display_url\":\"linkedin.com\\\/pulse\\\/how-robo\\u2026\",\"indices\":[97,120]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web Client<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1178594740872155137\\\/EHyGV9nw_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1178594740872155137\\\/EHyGV9nw_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/728535794755895296\\\/1569833859\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1103763399341531136,\"id_str\":\"1103763399341531136\",\"name\":\"\\u039b Data Science Ryan\",\"screen_name\":\"DataScienceRyan\",\"location\":\"\",\"description\":\"This is Ryan Allred's #DataScience specific account. I'm a Data Science instructor @LambdaSchool  - \\u039b \\ud83c\\udfeb\",\"url\":\"https:\\\/\\\/t.co\\\/vt9UjM7EoZ\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vt9UjM7EoZ\",\"expanded_url\":\"https:\\\/\\\/ryanallred.ai\",\"display_url\":\"ryanallred.ai\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2196,\"friends_count\":4790,\"listed_count\":13,\"created_at\":\"Thu Mar 07 21:04:36 +0000 2019\",\"favourites_count\":828,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":137,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 05 05:42:54 +0000 2020\",\"id\":1324225660039106566,\"id_str\":\"1324225660039106566\",\"text\":\"RT @BettinaForget: Data visualization insights:\\nLand doesn't vote. People do.\\n#USElection2020 https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"USElection2020\",\"indices\":[78,93]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"BettinaForget\",\"name\":\"Bettina Forget\",\"id\":21027587,\"id_str\":\"21027587\",\"indices\":[3,17]}],\"urls\":[],\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"source_status_id\":1324139878666391555,\"source_status_id_str\":\"1324139878666391555\",\"source_user_id\":21027587,\"source_user_id_str\":\"21027587\"}]},\"extended_entities\":{\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"source_status_id\":1324139878666391555,\"source_status_id_str\":\"1324139878666391555\",\"source_user_id\":21027587,\"source_user_id_str\":\"21027587\",\"video_info\":{\"aspect_ratio\":[100,63],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmBJ-68XYAAmLnP.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Nov 05 00:02:03 +0000 2020\",\"id\":1324139878666391555,\"id_str\":\"1324139878666391555\",\"text\":\"Data visualization insights:\\nLand doesn't vote. People do.\\n#USElection2020 https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"USElection2020\",\"indices\":[59,74]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[75,98],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1324139635770089472,\"id_str\":\"1324139635770089472\",\"indices\":[75,98],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/tweet_video_thumb\\\/EmBJ-68XYAAmLnP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/MJWKPftOsx\",\"display_url\":\"pic.twitter.com\\\/MJWKPftOsx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BettinaForget\\\/status\\\/1324139878666391555\\\/photo\\\/1\",\"type\":\"animated_gif\",\"sizes\":{\"small\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":600,\"h\":378,\"resize\":\"fit\"},\"large\":{\"w\":600,\"h\":378,\"resize\":\"fit\"}},\"video_info\":{\"aspect_ratio\":[100,63],\"variants\":[{\"bitrate\":0,\"content_type\":\"video\\\/mp4\",\"url\":\"https:\\\/\\\/video.twimg.com\\\/tweet_video\\\/EmBJ-68XYAAmLnP.mp4\"}]}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":85387,\"favorite_count\":264492,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":85387,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103763527553052672\\\/r7a7Fhrn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1103763527553052672\\\/r7a7Fhrn_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2153211904,\"id_str\":\"2153211904\",\"name\":\"Gordon Hutchison\",\"screen_name\":\"gordhut\",\"location\":\"England (originally Scotland)\",\"description\":\"Tweets on emerging enterprise software\\\/design, Vert.x, Quarkus etc. Principle engineer @IBM WebSphere. I own\\\/code bits of reactive Java, OpenLiberty \\u2764\\ufe0fand JEE.\",\"url\":\"https:\\\/\\\/t.co\\\/nazrgFl4K3\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nazrgFl4K3\",\"expanded_url\":\"https:\\\/\\\/gordon.blogspot.com\\\/\",\"display_url\":\"gordon.blogspot.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2165,\"friends_count\":726,\"listed_count\":15,\"created_at\":\"Fri Oct 25 20:21:49 +0000 2013\",\"favourites_count\":861,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1553,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:08:07 +0000 2020\",\"id\":1336689088242589698,\"id_str\":\"1336689088242589698\",\"text\":\"@jponge @vertx_project @michelkraemer See https:\\\/\\\/t.co\\\/v1QrC9GJF8 !\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jponge\",\"name\":\"Julien Ponge\",\"id\":16067953,\"id_str\":\"16067953\",\"indices\":[0,7]},{\"screen_name\":\"vertx_project\",\"name\":\"Eclipse Vert.x\",\"id\":743197625755762688,\"id_str\":\"743197625755762688\",\"indices\":[8,22]},{\"screen_name\":\"michelkraemer\",\"name\":\"Michel Kr\\u00e4mer\",\"id\":320303182,\"id_str\":\"320303182\",\"indices\":[23,37]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/v1QrC9GJF8\",\"expanded_url\":\"https:\\\/\\\/vertx.io\\\/\",\"display_url\":\"vertx.io\",\"indices\":[42,65]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336656727484354567,\"in_reply_to_status_id_str\":\"1336656727484354567\",\"in_reply_to_user_id\":16067953,\"in_reply_to_user_id_str\":\"16067953\",\"in_reply_to_screen_name\":\"jponge\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110468003609669632\\\/7dABdX1n_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110468003609669632\\\/7dABdX1n_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2153211904\\\/1554479384\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":6308712,\"id_str\":\"6308712\",\"name\":\"Nicolas Hoizey\",\"screen_name\":\"nhoizey\",\"location\":\"Paris, France\",\"description\":\"Co-founder & Innovation Director @CleverAge, front end expert (#RWD, #WebPerf, #PWA), photographer \\u2014 Mastodon: @nhoizey@mamot.fr\",\"url\":\"https:\\\/\\\/t.co\\\/WwjGyG4946\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WwjGyG4946\",\"expanded_url\":\"https:\\\/\\\/nicolas-hoizey.com\",\"display_url\":\"nicolas-hoizey.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2733,\"friends_count\":438,\"listed_count\":346,\"created_at\":\"Fri May 25 09:43:59 +0000 2007\",\"favourites_count\":19977,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":109394,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:03:19 +0000 2020\",\"id\":1336793576328531970,\"id_str\":\"1336793576328531970\",\"text\":\"@rick_viscomi I was supposed to be a reviewer for the media chapter, and I did nothing, I\\u2019m so sorry. \\ud83d\\ude15\\n\\nI won\\u2019t en\\u2026 https:\\\/\\\/t.co\\\/rx8SmSEalr\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"rick_viscomi\",\"name\":\"Rick Viscomi\",\"id\":89405591,\"id_str\":\"89405591\",\"indices\":[0,13]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/rx8SmSEalr\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336793576328531970\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/tapbots.com\\\/tweetbot\\\" rel=\\\"nofollow\\\">Tweetbot for i\\u039fS<\\\/a>\",\"in_reply_to_status_id\":1336718249388625921,\"in_reply_to_status_id_str\":\"1336718249388625921\",\"in_reply_to_user_id\":89405591,\"in_reply_to_user_id_str\":\"89405591\",\"in_reply_to_screen_name\":\"rick_viscomi\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"2B2117\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1069581733010579457\\\/Q9uytRm2_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1069581733010579457\\\/Q9uytRm2_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/6308712\\\/1571051010\",\"profile_link_color\":\"663399\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"FFA58C\",\"profile_text_color\":\"D68C89\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1180674958374002688,\"id_str\":\"1180674958374002688\",\"name\":\"BARK\",\"screen_name\":\"welcomebark\",\"location\":\"Tokyo\",\"description\":\"Global #startup event in #Tokyo. Usually exploring world's entrepreneur stories\\ud83d\\udc40 sometimes promoting #BARKATION\",\"url\":\"https:\\\/\\\/t.co\\\/6uEHca9Ew7\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6uEHca9Ew7\",\"expanded_url\":\"https:\\\/\\\/joinbark.org\\\/\",\"display_url\":\"joinbark.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":955,\"friends_count\":4810,\"listed_count\":4,\"created_at\":\"Sun Oct 06 02:43:55 +0000 2019\",\"favourites_count\":3185,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":45,\"lang\":null,\"status\":{\"created_at\":\"Tue Jun 30 11:39:45 +0000 2020\",\"id\":1277929816658866176,\"id_str\":\"1277929816658866176\",\"text\":\"RT @forstartups: \\u3010\\u30e1\\u30c7\\u30a3\\u30a2\\u63b2\\u8f09\\u3011\\u30c7\\u30b6\\u30a4\\u30f3\\u30d3\\u30b8\\u30cd\\u30b9\\u30de\\u30ac\\u30b8\\u30f3\\\"designing\\\"\\u3055\\u3093\\u306b\\u53d6\\u6750\\u3044\\u305f\\u3060\\u304d\\u3001SLUSH TOKYO\\u304b\\u3089 BARK\\uff08 @welcomebark \\uff09 \\u30d6\\u30e9\\u30f3\\u30c9\\u304c\\u751f\\u307e\\u308c\\u305f\\u8ecc\\u8de1\\u306b\\u3064\\u3044\\u3066\\u8a9e\\u3063\\u305f\\u3001\\u5f53\\u793eExperience Designer\\u77f3\\u6a4b\\u5b97\\u89aa\\u306e\\u30a4\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"forstartups\",\"name\":\"for Startups, Inc. - \\u30d5\\u30a9\\u30fc\\u30b9\\u30bf\\u30fc\\u30c8\\u30a2\\u30c3\\u30d7\\u30b9\\u682a\\u5f0f\\u4f1a\\u793e\",\"id\":952848788946735104,\"id_str\":\"952848788946735104\",\"indices\":[3,15]},{\"screen_name\":\"welcomebark\",\"name\":\"BARK\",\"id\":1180674958374002688,\"id_str\":\"1180674958374002688\",\"indices\":[78,90]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Jun 30 09:57:57 +0000 2020\",\"id\":1277904194804969474,\"id_str\":\"1277904194804969474\",\"text\":\"\\u3010\\u30e1\\u30c7\\u30a3\\u30a2\\u63b2\\u8f09\\u3011\\u30c7\\u30b6\\u30a4\\u30f3\\u30d3\\u30b8\\u30cd\\u30b9\\u30de\\u30ac\\u30b8\\u30f3\\\"designing\\\"\\u3055\\u3093\\u306b\\u53d6\\u6750\\u3044\\u305f\\u3060\\u304d\\u3001SLUSH TOKYO\\u304b\\u3089 BARK\\uff08 @welcomebark \\uff09 \\u30d6\\u30e9\\u30f3\\u30c9\\u304c\\u751f\\u307e\\u308c\\u305f\\u8ecc\\u8de1\\u306b\\u3064\\u3044\\u3066\\u8a9e\\u3063\\u305f\\u3001\\u5f53\\u793eExperience Designe\\u2026 https:\\\/\\\/t.co\\\/LaIj8kKTKe\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"welcomebark\",\"name\":\"BARK\",\"id\":1180674958374002688,\"id_str\":\"1180674958374002688\",\"indices\":[61,73]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LaIj8kKTKe\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1277904194804969474\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"ja\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"ja\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1187907036245180417\\\/MJG3CxcL_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1187907036245180417\\\/MJG3CxcL_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1180674958374002688\\\/1578645696\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2230474874,\"id_str\":\"2230474874\",\"name\":\"Pablo Godinez\",\"screen_name\":\"zay0n\",\"location\":\"Paris, France\",\"description\":\"PHP Developer at @evaneos_tech  Mastodon : https:\\\/\\\/t.co\\\/L66QWSSzED\\nCo-organizer of @afup_paris meetup\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/L66QWSSzED\",\"expanded_url\":\"http:\\\/\\\/mamot.fr\\\/@zayon\",\"display_url\":\"mamot.fr\\\/@zayon\",\"indices\":[43,66]}]}},\"protected\":false,\"followers_count\":103,\"friends_count\":205,\"listed_count\":3,\"created_at\":\"Wed Dec 04 20:51:04 +0000 2013\",\"favourites_count\":40,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":407,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 28 16:19:09 +0000 2020\",\"id\":1332720698024980482,\"id_str\":\"1332720698024980482\",\"text\":\"@jpetazzo then it's the AUR package maintainers that decide the defaults. It's strange because I'm sure my Spotify\\u2026 https:\\\/\\\/t.co\\\/UivddWtIr9\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jpetazzo\",\"name\":\"J\\u00e9r\\u00f4me Petazzoni\",\"id\":17757889,\"id_str\":\"17757889\",\"indices\":[0,9]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UivddWtIr9\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332720698024980482\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/github.com\\\/TwidereProject\\\" rel=\\\"nofollow\\\">Twidere for Android<\\\/a>\",\"in_reply_to_status_id\":1332696619549134849,\"in_reply_to_status_id_str\":\"1332696619549134849\",\"in_reply_to_user_id\":17757889,\"in_reply_to_user_id_str\":\"17757889\",\"in_reply_to_screen_name\":\"jpetazzo\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1056266994742378496\\\/ldoNTl9q_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1056266994742378496\\\/ldoNTl9q_normal.jpg\",\"profile_link_color\":\"8FA876\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1139934185777483777,\"id_str\":\"1139934185777483777\",\"name\":\"Le Snack Kigali\",\"screen_name\":\"lesnackigali\",\"location\":\"Kigali, Rwanda\",\"description\":\"Selection of award-winning artisan cheeses.\",\"url\":\"https:\\\/\\\/t.co\\\/EaE9IyI9rI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EaE9IyI9rI\",\"expanded_url\":\"http:\\\/\\\/lesnackigali.com\\\/\",\"display_url\":\"lesnackigali.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":688,\"friends_count\":603,\"listed_count\":0,\"created_at\":\"Sat Jun 15 16:34:23 +0000 2019\",\"favourites_count\":82,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":25,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 18 21:28:22 +0000 2019\",\"id\":1196540675891847170,\"id_str\":\"1196540675891847170\",\"text\":\"Everybody say cheeeeeeeeeese (and bon app\\u00e9tit :)\\n#kigali #rwanda #rwot #my250 #artisancheese #roule #bleu #paneer\\u2026 https:\\\/\\\/t.co\\\/wFrfhMe11A\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"kigali\",\"indices\":[49,56]},{\"text\":\"rwanda\",\"indices\":[57,64]},{\"text\":\"rwot\",\"indices\":[65,70]},{\"text\":\"my250\",\"indices\":[71,77]},{\"text\":\"artisancheese\",\"indices\":[78,92]},{\"text\":\"roule\",\"indices\":[93,99]},{\"text\":\"bleu\",\"indices\":[100,105]},{\"text\":\"paneer\",\"indices\":[106,113]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wFrfhMe11A\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1196540675891847170\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[115,138]}]},\"source\":\"<a href=\\\"https:\\\/\\\/smarterqueue.com\\\" rel=\\\"nofollow\\\">SmarterQueue<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"ht\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139934588158054402\\\/K2bybeqF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139934588158054402\\\/K2bybeqF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1139934185777483777\\\/1569416974\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1184893804593274881,\"id_str\":\"1184893804593274881\",\"name\":\"Vivienne Lebrun\",\"screen_name\":\"LebrunMalaury\",\"location\":\"\",\"description\":\"Je suis une fille cool, sympa un peu timide qui cherche \\u00e0 faire de nouvelles connaissances et esp\\u00e8re trouver une relation totalement s\\u00e9rieuse .snap vivi_lebrun6\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":563,\"friends_count\":1176,\"listed_count\":0,\"created_at\":\"Thu Oct 17 18:08:23 +0000 2019\",\"favourites_count\":4,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 14 17:22:24 +0000 2019\",\"id\":1205900859315564545,\"id_str\":\"1205900859315564545\",\"text\":\"\\ud83d\\ude07 https:\\\/\\\/t.co\\\/m0YRD4Y2i6\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1205900840457965571,\"id_str\":\"1205900840457965571\",\"indices\":[2,25],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/ELw4bN3XkAMmUAN.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/ELw4bN3XkAMmUAN.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/m0YRD4Y2i6\",\"display_url\":\"pic.twitter.com\\\/m0YRD4Y2i6\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/LebrunMalaury\\\/status\\\/1205900859315564545\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":550,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":640,\"h\":791,\"resize\":\"fit\"},\"medium\":{\"w\":640,\"h\":791,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1205900840457965571,\"id_str\":\"1205900840457965571\",\"indices\":[2,25],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/ELw4bN3XkAMmUAN.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/ELw4bN3XkAMmUAN.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/m0YRD4Y2i6\",\"display_url\":\"pic.twitter.com\\\/m0YRD4Y2i6\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/LebrunMalaury\\\/status\\\/1205900859315564545\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":550,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":640,\"h\":791,\"resize\":\"fit\"},\"medium\":{\"w\":640,\"h\":791,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":8,\"favorite_count\":49,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1198171953342885890\\\/CZAuGtj3_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1198171953342885890\\\/CZAuGtj3_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1184893804593274881\\\/1575028708\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2907799831,\"id_str\":\"2907799831\",\"name\":\"Singh\",\"screen_name\":\"jitendras3109\",\"location\":\"Marine Lines, Mumbai\",\"description\":\"SDE @Jio\\ud83c\\udf31\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":159,\"friends_count\":2382,\"listed_count\":0,\"created_at\":\"Sun Nov 23 05:15:52 +0000 2014\",\"favourites_count\":2929,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":419,\"lang\":null,\"status\":{\"created_at\":\"Wed Apr 08 08:40:09 +0000 2020\",\"id\":1247806426094788608,\"id_str\":\"1247806426094788608\",\"text\":\"RT @pluralsight: To make #FreeApril even better, we're giving away the ultimate #StayHomeSkillUp prize pack! \\n\\n-&gt; Retweet for the chance to\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"FreeApril\",\"indices\":[25,35]},{\"text\":\"StayHomeSkillUp\",\"indices\":[80,96]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"pluralsight\",\"name\":\"Pluralsight\",\"id\":19253334,\"id_str\":\"19253334\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Apr 06 14:23:21 +0000 2020\",\"id\":1247168019823882243,\"id_str\":\"1247168019823882243\",\"text\":\"To make #FreeApril even better, we're giving away the ultimate #StayHomeSkillUp prize pack! \\n\\n-&gt; Retweet for the ch\\u2026 https:\\\/\\\/t.co\\\/8x6cO6fAO5\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"FreeApril\",\"indices\":[8,18]},{\"text\":\"StayHomeSkillUp\",\"indices\":[63,79]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/8x6cO6fAO5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1247168019823882243\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[120,143]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":9405,\"favorite_count\":5469,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":9405,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1167934233047752704\\\/r_YFkjCT_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1167934233047752704\\\/r_YFkjCT_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2907799831\\\/1554006425\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":856530578925129728,\"id_str\":\"856530578925129728\",\"name\":\"Conscious Evolution\",\"screen_name\":\"EvoConscious\",\"location\":\"England, United Kingdom\",\"description\":\"\\\"Original, insightful and uplifting, Conscious Evolution Podcast is essential listening for anyone searching for a more meaningful life.\\\"\\n - Scott Barry Kaufman\",\"url\":\"https:\\\/\\\/t.co\\\/UNr4SPKM8B\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UNr4SPKM8B\",\"expanded_url\":\"http:\\\/\\\/consciousevolution.co.uk\",\"display_url\":\"consciousevolution.co.uk\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3450,\"friends_count\":4030,\"listed_count\":34,\"created_at\":\"Mon Apr 24 15:29:38 +0000 2017\",\"favourites_count\":1273,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3488,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:58:00 +0000 2020\",\"id\":1336686539946905600,\"id_str\":\"1336686539946905600\",\"text\":\"\\u201cPerhaps we had to eschew all grand narratives in order to rediscover them. Perhaps we had to distance ourselves fr\\u2026 https:\\\/\\\/t.co\\\/jc3FQ6XZt6\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jc3FQ6XZt6\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336686539946905600\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243145640294711296\\\/rj3oLvET_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243145640294711296\\\/rj3oLvET_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/856530578925129728\\\/1585223778\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":154553113,\"id_str\":\"154553113\",\"name\":\"Kevin Phillips\",\"screen_name\":\"kdotphil\",\"location\":\"Chicago, IL\",\"description\":\"Artisanal, sustainable JavaScript.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":121,\"friends_count\":616,\"listed_count\":4,\"created_at\":\"Fri Jun 11 15:08:29 +0000 2010\",\"favourites_count\":244,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":184,\"lang\":null,\"status\":{\"created_at\":\"Fri Nov 27 20:52:47 +0000 2020\",\"id\":1332427171978207232,\"id_str\":\"1332427171978207232\",\"text\":\"@Cherif_b @mattchewone The Pact docs are good. Martin Fowler also has some articles like https:\\\/\\\/t.co\\\/HduPpFtCd8\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Cherif_b\",\"name\":\"Cherif BOUCHELAGHEM\",\"id\":31084556,\"id_str\":\"31084556\",\"indices\":[0,9]},{\"screen_name\":\"mattchewone\",\"name\":\"Matt Chaffe\",\"id\":176539790,\"id_str\":\"176539790\",\"indices\":[10,22]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/HduPpFtCd8\",\"expanded_url\":\"https:\\\/\\\/martinfowler.com\\\/articles\\\/consumerDrivenContracts.html#Consumer-drivenContracts\",\"display_url\":\"martinfowler.com\\\/articles\\\/consu\\u2026\",\"indices\":[89,112]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1332393574902718467,\"in_reply_to_status_id_str\":\"1332393574902718467\",\"in_reply_to_user_id\":31084556,\"in_reply_to_user_id_str\":\"31084556\",\"in_reply_to_screen_name\":\"Cherif_b\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/608421736493797376\\\/dhpWxodk_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/608421736493797376\\\/dhpWxodk_normal.jpg\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":221692112,\"id_str\":\"221692112\",\"name\":\"Synolia\",\"screen_name\":\"synolia\",\"location\":\"Lyon, Paris, Bordeaux, Grand-O\",\"description\":\"Agence #ecommerce #CRM #BI - Expert Conseil - #Magento #Sylius #Prestashop #OroCommerce #OroCRM #SugarCRM #Akeneo #Zendesk  #Qlik #TableauSoftware #mondaydotcom\",\"url\":\"https:\\\/\\\/t.co\\\/CFqjrCrIHA\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CFqjrCrIHA\",\"expanded_url\":\"https:\\\/\\\/www.synolia.com\",\"display_url\":\"synolia.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1934,\"friends_count\":1145,\"listed_count\":171,\"created_at\":\"Wed Dec 01 10:26:11 +0000 2010\",\"favourites_count\":962,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":3133,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:51:08 +0000 2020\",\"id\":1336715010022793218,\"id_str\":\"1336715010022793218\",\"text\":\"Tu sais compter 2 par 2 et lacer tes chaussures ? Tu es fait pour ce poste ! Et en plus, tu as une exp\\u00e9rience en ta\\u2026 https:\\\/\\\/t.co\\\/63u8S5JuaA\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/63u8S5JuaA\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336715010022793218\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.oktopost.com\\\" rel=\\\"nofollow\\\">Oktopost<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ABB8C2\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/824194284106743808\\\/DdLOOPYr_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/824194284106743808\\\/DdLOOPYr_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/221692112\\\/1589370525\",\"profile_link_color\":\"009999\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3229342807,\"id_str\":\"3229342807\",\"name\":\"David Franklin, USN\",\"screen_name\":\"dsfranklin_atx\",\"location\":\"Austin, TX\",\"description\":\"Founder & CEO @knowRX @Vets2Cloud #SDVOSB #Mindfulness @PledgeOne @weareosd\",\"url\":\"https:\\\/\\\/t.co\\\/6QiEtkb3Tw\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6QiEtkb3Tw\",\"expanded_url\":\"http:\\\/\\\/knowrx.mobi\",\"display_url\":\"knowrx.mobi\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":17631,\"friends_count\":15081,\"listed_count\":293,\"created_at\":\"Fri May 29 01:57:19 +0000 2015\",\"favourites_count\":453,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":14426,\"lang\":null,\"status\":{\"created_at\":\"Sun Nov 29 01:39:51 +0000 2020\",\"id\":1332861800379977730,\"id_str\":\"1332861800379977730\",\"text\":\"I currently have #COVID\\u30fc19 tested pos with active ongoing symptoms. Thursday tested neg, classified as upper resp i\\u2026 https:\\\/\\\/t.co\\\/NhiVMNYogR\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"COVID\\u30fc19\",\"indices\":[17,26]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NhiVMNYogR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332861800379977730\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"e0060cda70f5f341\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/e0060cda70f5f341.json\",\"place_type\":\"admin\",\"name\":\"Texas\",\"full_name\":\"Texas, USA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-106.645646,25.837092],[-93.508131,25.837092],[-93.508131,36.500695],[-106.645646,36.500695]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1147490863746093056\\\/SIXxKkRn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1147490863746093056\\\/SIXxKkRn_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3229342807\\\/1583546009\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":76081052,\"id_str\":\"76081052\",\"name\":\"Patrick Domingues\",\"screen_name\":\"The_PatrickD\",\"location\":\"Florida\",\"description\":\"I am a IT Professional who is a #ITManager and #HIPAA, #HealthcareIT, #ITIL, #SixSigmaGreen #infosec Certified.\",\"url\":\"https:\\\/\\\/t.co\\\/LX7VuexU0V\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LX7VuexU0V\",\"expanded_url\":\"https:\\\/\\\/patrickdomingues.com\",\"display_url\":\"patrickdomingues.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":6095,\"friends_count\":6215,\"listed_count\":22,\"created_at\":\"Mon Sep 21 17:12:46 +0000 2009\",\"favourites_count\":2331,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5944,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:38:33 +0000 2020\",\"id\":1336696743983976457,\"id_str\":\"1336696743983976457\",\"text\":\"This is quite alarming for one why is Microsoft allowing its domain to be spoofed is beyond me. #cybersecurity\\u2026 https:\\\/\\\/t.co\\\/lgxQjUs3nD\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"cybersecurity\",\"indices\":[96,110]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lgxQjUs3nD\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336696743983976457\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[112,135]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1052004659630620672\\\/jvLxbwG6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1052004659630620672\\\/jvLxbwG6_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/76081052\\\/1539334101\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1123185845257695232,\"id_str\":\"1123185845257695232\",\"name\":\"CoBox Coop \\ud83c\\udf24\\ufe0f\",\"screen_name\":\"CoBoxCoop\",\"location\":\"cypherspace\",\"description\":\"building a ((\\ud83d\\udd2c peer-to-peer)) cooperative cloud \\ud83c\\udf25\\ufe0f a magma collective project \\u2697\\ufe0f funded by @LedgerEu \\ud83d\\udd17 building on @dat_project \\ud83d\\udc1d info@cobox.cloud \\u2709\",\"url\":\"https:\\\/\\\/t.co\\\/Qig41HeB9X\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Qig41HeB9X\",\"expanded_url\":\"https:\\\/\\\/cobox.cloud\",\"display_url\":\"cobox.cloud\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":467,\"friends_count\":508,\"listed_count\":16,\"created_at\":\"Tue Apr 30 11:22:28 +0000 2019\",\"favourites_count\":404,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":292,\"lang\":null,\"status\":{\"created_at\":\"Mon Oct 05 01:05:43 +0000 2020\",\"id\":1312921878420361217,\"id_str\":\"1312921878420361217\",\"text\":\"RT @NGIForward: Data trusts, data commons, internet sovereignty... Fascinating discussion on operationalising future models for the data ec\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NGIForward\",\"name\":\"NGI Policy Lab\",\"id\":1101799811169378305,\"id_str\":\"1101799811169378305\",\"indices\":[3,14]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Sep 28 09:51:39 +0000 2020\",\"id\":1310517520042950656,\"id_str\":\"1310517520042950656\",\"text\":\"Data trusts, data commons, internet sovereignty... Fascinating discussion on operationalising future models for the\\u2026 https:\\\/\\\/t.co\\\/JvyPgTpWCg\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JvyPgTpWCg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1310517520042950656\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":7,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":7,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1225563018450341890\\\/PcOnE-7O_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1225563018450341890\\\/PcOnE-7O_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1123185845257695232\\\/1559008720\",\"profile_link_color\":\"F58EA8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15761045,\"id_str\":\"15761045\",\"name\":\"Babyloan\",\"screen_name\":\"babyloan\",\"location\":\"Paris, France\",\"description\":\"Les petits pr\\u00eats font les grandes histoires ! Rejoignez la 1\\u00e8 communaut\\u00e9 europ\\u00e9enne de pr\\u00eateurs solidaires https:\\\/\\\/t.co\\\/GxQmoK4RXY #Crowdfunding #ESS #Change\",\"url\":\"http:\\\/\\\/t.co\\\/7plFZKHRQN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/7plFZKHRQN\",\"expanded_url\":\"http:\\\/\\\/www.babyloan.org\",\"display_url\":\"babyloan.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GxQmoK4RXY\",\"expanded_url\":\"http:\\\/\\\/Babyloan.org\",\"display_url\":\"Babyloan.org\",\"indices\":[107,130]}]}},\"protected\":false,\"followers_count\":6274,\"friends_count\":2995,\"listed_count\":393,\"created_at\":\"Thu Aug 07 08:07:57 +0000 2008\",\"favourites_count\":2127,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":4065,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 25 10:41:10 +0000 2020\",\"id\":1331548476681940992,\"id_str\":\"1331548476681940992\",\"text\":\"\\ud83d\\ude80l'#investissement \\u00e0 impact social, pour un monde plus juste ! rdv sur https:\\\/\\\/t.co\\\/Fxf5LVyRIx https:\\\/\\\/t.co\\\/H4jdThEnwt\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"investissement\",\"indices\":[3,18]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Fxf5LVyRIx\",\"expanded_url\":\"http:\\\/\\\/www.babyloan-impact.org\",\"display_url\":\"babyloan-impact.org\",\"indices\":[71,94]},{\"url\":\"https:\\\/\\\/t.co\\\/H4jdThEnwt\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BabyloanImpact\\\/status\\\/1331161867402797058\",\"display_url\":\"twitter.com\\\/BabyloanImpact\\u2026\",\"indices\":[95,118]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1331161867402797058,\"quoted_status_id_str\":\"1331161867402797058\",\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"BADFCD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme12\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113009255223906304\\\/5bJadm4r_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1113009255223906304\\\/5bJadm4r_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15761045\\\/1528978007\",\"profile_link_color\":\"89C9FA\",\"profile_sidebar_border_color\":\"F2E195\",\"profile_sidebar_fill_color\":\"FF974C\",\"profile_text_color\":\"0E349C\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":27305263,\"id_str\":\"27305263\",\"name\":\"Gordon Martin\",\"screen_name\":\"HappyNaught\",\"location\":\"Glasgow\",\"description\":\"Open source hippie, mentor at @codeyourfuture Glasgow. Interested in peer to peer technologies like scuttlebutt (a social network: https:\\\/\\\/t.co\\\/m7bLSWqe0W)\",\"url\":\"https:\\\/\\\/t.co\\\/WG5ryF1T86\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WG5ryF1T86\",\"expanded_url\":\"http:\\\/\\\/www.github.com\\\/happy0\",\"display_url\":\"github.com\\\/happy0\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/m7bLSWqe0W\",\"expanded_url\":\"http:\\\/\\\/scuttlebutt.nz\",\"display_url\":\"scuttlebutt.nz\",\"indices\":[131,154]}]}},\"protected\":false,\"followers_count\":419,\"friends_count\":2130,\"listed_count\":11,\"created_at\":\"Sat Mar 28 20:48:32 +0000 2009\",\"favourites_count\":53893,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":3991,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 21:39:22 +0000 2020\",\"id\":1336425159658450944,\"id_str\":\"1336425159658450944\",\"text\":\"RT @Toidfish: Omg . This is such a lovely review of #presenttense . Thank you so much dear friend and fellow artist @Fenris_Music . Who's d\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"presenttense\",\"indices\":[52,65]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Toidfish\",\"name\":\"Becci Wallace\",\"id\":1299824908432822273,\"id_str\":\"1299824908432822273\",\"indices\":[3,12]},{\"screen_name\":\"Fenris_Music\",\"name\":\"Fenris\",\"id\":1330602135227133955,\"id_str\":\"1330602135227133955\",\"indices\":[116,129]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 12:08:14 +0000 2020\",\"id\":1336281431270633473,\"id_str\":\"1336281431270633473\",\"text\":\"Omg . This is such a lovely review of #presenttense . Thank you so much dear friend and fellow artist @Fenris_Music\\u2026 https:\\\/\\\/t.co\\\/6HQvLRcnM2\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"presenttense\",\"indices\":[38,51]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Fenris_Music\",\"name\":\"Fenris\",\"id\":1330602135227133955,\"id_str\":\"1330602135227133955\",\"indices\":[102,115]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6HQvLRcnM2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336281431270633473\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":16,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/874020196746395648\\\/Tzd3ePG6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/874020196746395648\\\/Tzd3ePG6_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2200824096,\"id_str\":\"2200824096\",\"name\":\"Rounak Datta\",\"screen_name\":\"rounakdatta12\",\"location\":\"Bengaluru, India\",\"description\":\"Strong opinions, weakly held \\ud83d\\ude42\",\"url\":\"https:\\\/\\\/t.co\\\/D0IPN6EiV8\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/D0IPN6EiV8\",\"expanded_url\":\"https:\\\/\\\/rounakdatta.github.io\",\"display_url\":\"rounakdatta.github.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":213,\"friends_count\":1769,\"listed_count\":1,\"created_at\":\"Mon Nov 18 07:15:25 +0000 2013\",\"favourites_count\":6241,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":211,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 18:05:13 +0000 2020\",\"id\":1334196940150456320,\"id_str\":\"1334196940150456320\",\"text\":\"RT @sh_reya: Spotify Wrapped tells me I\\u2019ve spent 91,242 minutes listening to music in 2020. This is 63.4 days. I guess this is what happens\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sh_reya\",\"name\":\"Shreya Shankar\",\"id\":2286218053,\"id_str\":\"2286218053\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 02 16:06:42 +0000 2020\",\"id\":1334167115993993216,\"id_str\":\"1334167115993993216\",\"text\":\"Spotify Wrapped tells me I\\u2019ve spent 91,242 minutes listening to music in 2020. This is 63.4 days. I guess this is w\\u2026 https:\\\/\\\/t.co\\\/LPeqynWs6o\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LPeqynWs6o\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334167115993993216\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":200,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1199365331384320000\\\/MxL30u9Y_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1199365331384320000\\\/MxL30u9Y_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2200824096\\\/1502711935\",\"profile_link_color\":\"4A913C\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17985670,\"id_str\":\"17985670\",\"name\":\"Cheddar\",\"screen_name\":\"get_cheddar\",\"location\":\"Bloomington, IN\",\"description\":\"Subscription and usage-based billing. Cheddar's modern approach to billing gets you up and running in as little as one day.\",\"url\":\"https:\\\/\\\/t.co\\\/oCpI0kFi1j\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/oCpI0kFi1j\",\"expanded_url\":\"https:\\\/\\\/www.getcheddar.com\\\/\",\"display_url\":\"getcheddar.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2737,\"friends_count\":4255,\"listed_count\":86,\"created_at\":\"Tue Dec 09 06:08:25 +0000 2008\",\"favourites_count\":1275,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1152,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:54:27 +0000 2020\",\"id\":1336685648074387462,\"id_str\":\"1336685648074387462\",\"text\":\"RT @thephillyvoice: Comcast will introduce usage-based billing structure beginning next year, with overage fees for those who exceed the th\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thephillyvoice\",\"name\":\"PhillyVoice\",\"id\":2557592940,\"id_str\":\"2557592940\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Nov 29 05:14:00 +0000 2020\",\"id\":1332915696129503234,\"id_str\":\"1332915696129503234\",\"text\":\"Comcast will introduce usage-based billing structure beginning next year, with overage fees for those who exceed th\\u2026 https:\\\/\\\/t.co\\\/wMO2yqbzMm\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wMO2yqbzMm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1332915696129503234\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.socialflow.com\\\" rel=\\\"nofollow\\\">SocialFlow<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"414141\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1004855682317733889\\\/L2xBeyIf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1004855682317733889\\\/L2xBeyIf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17985670\\\/1528220610\",\"profile_link_color\":\"7EA230\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"D0EBDF\",\"profile_text_color\":\"507F6C\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":987547056,\"id_str\":\"987547056\",\"name\":\"Pahpang\",\"screen_name\":\"CptPahpang\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":23,\"friends_count\":259,\"listed_count\":6,\"created_at\":\"Mon Dec 03 22:31:45 +0000 2012\",\"favourites_count\":666,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":940,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 16:11:43 +0000 2020\",\"id\":1334893153372020742,\"id_str\":\"1334893153372020742\",\"text\":\"RT @LeBondyBlog: \\\"C\\u2019est la manifestation la plus claire et visible de l\\u2019islamophobie d\\u2019\\u00c9tat.\\\" Le CCIF a annonc\\u00e9 vouloir contester sa dissol\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LeBondyBlog\",\"name\":\"Le Bondy Blog\",\"id\":112451555,\"id_str\":\"112451555\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 14:10:19 +0000 2020\",\"id\":1334862603626172419,\"id_str\":\"1334862603626172419\",\"text\":\"\\\"C\\u2019est la manifestation la plus claire et visible de l\\u2019islamophobie d\\u2019\\u00c9tat.\\\" Le CCIF a annonc\\u00e9 vouloir contester sa\\u2026 https:\\\/\\\/t.co\\\/hOABwhx8xq\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hOABwhx8xq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334862603626172419\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":169,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1236712800480890880\\\/53GamKQb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1236712800480890880\\\/53GamKQb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/987547056\\\/1583738214\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1181120881260744704,\"id_str\":\"1181120881260744704\",\"name\":\"Anthony Fifty\",\"screen_name\":\"AnthonyFifty\",\"location\":\"\",\"description\":\"Je ne sais pas coder, mais j'adore parler avec ceux et celles qui savent le faire !\\nCr\\u00e9ateur d'envies pro chez Fifty Talents\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":11,\"friends_count\":221,\"listed_count\":0,\"created_at\":\"Mon Oct 07 08:15:47 +0000 2019\",\"favourites_count\":30,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4,\"lang\":null,\"status\":{\"created_at\":\"Wed Mar 04 15:10:18 +0000 2020\",\"id\":1235221034846085120,\"id_str\":\"1235221034846085120\",\"text\":\"RT @__yannickw__: I wrote an article about optimizing response time of your Machine Learning API. Feedback is welcome!\\n\\nhttps:\\\/\\\/t.co\\\/LexDib\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"__yannickw__\",\"name\":\"Yannick Wolff\",\"id\":953577267715821568,\"id_str\":\"953577267715821568\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Jan 13 16:05:32 +0000 2020\",\"id\":1216753153225494531,\"id_str\":\"1216753153225494531\",\"text\":\"I wrote an article about optimizing response time of your Machine Learning API. Feedback is welcome!\\n\\nhttps:\\\/\\\/t.co\\\/LexDibXh6V\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LexDibXh6V\",\"expanded_url\":\"https:\\\/\\\/www.sicara.ai\\\/blog\\\/optimize-response-time-api\",\"display_url\":\"sicara.ai\\\/blog\\\/optimize-\\u2026\",\"indices\":[102,125]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":27,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181120961325785088\\\/qsErvk1t_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181120961325785088\\\/qsErvk1t_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1093047524426838016,\"id_str\":\"1093047524426838016\",\"name\":\"Milaka\",\"screen_name\":\"__MILaka__\",\"location\":\"USH(humanity)\",\"description\":\"programmer,#philosophy and #psychoanalysis geek\\nUndoubtedly,every one is a special and unique galaxy .who is my next galaxy?\\n\\n#Sociopath #love\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1097,\"friends_count\":1174,\"listed_count\":1,\"created_at\":\"Wed Feb 06 07:23:32 +0000 2019\",\"favourites_count\":15,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":23,\"lang\":null,\"status\":{\"created_at\":\"Mon Jun 08 17:38:50 +0000 2020\",\"id\":1270047649203466240,\"id_str\":\"1270047649203466240\",\"text\":\"@AliMoeini72 \\u0627\\u0632 \\u0644\\u062d\\u0627\\u0638 \\u0637\\u0628 \\u0633\\u0646\\u062a\\u06cc \\u060c\\u0627\\u0632 \\u0639\\u0648\\u0627\\u0645\\u0644 \\u0645\\u0647\\u0645 \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0628\\u06cc\\u0634 \\u0641\\u0639\\u0627\\u0644\\u06cc \\u06a9\\u0628\\u062f \\u0647\\u0633\\u062a\\u0634\\u060c\\u067e\\u0633 \\u062f\\u0631 \\u0627\\u0628\\u062a\\u062f\\u0627 \\u06a9\\u0628\\u062f \\u0628\\u0627\\u06cc\\u062f \\u067e\\u0627\\u06a9\\u0633\\u0627\\u0632\\u06cc \\u0634\\u062f\\u0647 \\u0648\\u0627\\u0632 \\u0627\\u0645\\u0648\\u0631\\u06cc \\u0645\\u062b\\u0644\\u2026 https:\\\/\\\/t.co\\\/qpUDefaQIu\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AliMoeini72\",\"name\":\"Ali Moeini\",\"id\":1177532887199092736,\"id_str\":\"1177532887199092736\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qpUDefaQIu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1270047649203466240\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1269963916525830146,\"in_reply_to_status_id_str\":\"1269963916525830146\",\"in_reply_to_user_id\":1177532887199092736,\"in_reply_to_user_id_str\":\"1177532887199092736\",\"in_reply_to_screen_name\":\"AliMoeini72\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"fa\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247106415065362432\\\/2zZgBBjf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1247106415065362432\\\/2zZgBBjf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1093047524426838016\\\/1569172472\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":833572604,\"id_str\":\"833572604\",\"name\":\"Ahmed Zaghrat\",\"screen_name\":\"ZaghratAhmed\",\"location\":\"Berlin, Germany\",\"description\":\"Full-Stack Web Developer\\n#symfony #php #docker #Angular\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":20,\"friends_count\":224,\"listed_count\":0,\"created_at\":\"Wed Sep 19 15:30:01 +0000 2012\",\"favourites_count\":57,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":23,\"lang\":null,\"status\":{\"created_at\":\"Fri Feb 28 06:27:40 +0000 2020\",\"id\":1233277569790771200,\"id_str\":\"1233277569790771200\",\"text\":\"RT @benawad: &gt; how do you choose certain library over others that can do the same things\\n\\nI look at the getting started code for each + the\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"benawad\",\"name\":\"Ben Awad\",\"id\":840626569743912960,\"id_str\":\"840626569743912960\",\"indices\":[3,11]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Feb 27 19:58:15 +0000 2020\",\"id\":1233119171946389505,\"id_str\":\"1233119171946389505\",\"text\":\"&gt; how do you choose certain library over others that can do the same things\\n\\nI look at the getting started code for\\u2026 https:\\\/\\\/t.co\\\/GqtP8JW5Zg\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GqtP8JW5Zg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1233119171946389505\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[120,143]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":49,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1232393442216546305\\\/OhC7tEZu_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1232393442216546305\\\/OhC7tEZu_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/833572604\\\/1572431563\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":991786479503454213,\"id_str\":\"991786479503454213\",\"name\":\"Nayego Open Team Chat\",\"screen_name\":\"GetNayego\",\"location\":\"Paris, France\",\"description\":\"Open network, instant communication and collaboration, for the extended enterprises and modern communities. Collaborate faster, communicate better.\",\"url\":\"https:\\\/\\\/t.co\\\/KnaN6NREHv\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KnaN6NREHv\",\"expanded_url\":\"https:\\\/\\\/www.nayego.net\\\/\",\"display_url\":\"nayego.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2629,\"friends_count\":2555,\"listed_count\":14,\"created_at\":\"Wed May 02 21:08:18 +0000 2018\",\"favourites_count\":3327,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":727,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:14:13 +0000 2020\",\"id\":1336690621550039041,\"id_str\":\"1336690621550039041\",\"text\":\"RT @Arawa_fr: L'Allemagne, la France, l'Espagne et dix autres pays de l'UE ont uni leurs forces pour investir dans les processeurs et les t\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Arawa_fr\",\"name\":\"Arawa\",\"id\":707230147334819840,\"id_str\":\"707230147334819840\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 15:12:50 +0000 2020\",\"id\":1336690274475663361,\"id_str\":\"1336690274475663361\",\"text\":\"L'Allemagne, la France, l'Espagne et dix autres pays de l'UE ont uni leurs forces pour investir dans les processeur\\u2026 https:\\\/\\\/t.co\\\/29JAAUZOee\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/29JAAUZOee\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336690274475663361\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1015343700111646720\\\/eHoGzfez_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1015343700111646720\\\/eHoGzfez_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/991786479503454213\\\/1530919340\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":8157452,\"id_str\":\"8157452\",\"name\":\"Bill M Moore\",\"screen_name\":\"BillMoore20\",\"location\":\"Pearland, TX USA\",\"description\":\"Using #Twitter to build your #homebiz? This exact training will get YOU free leads daily\\u2026PM me on FB for details.\",\"url\":\"https:\\\/\\\/t.co\\\/v8XXfyXGr1\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/v8XXfyXGr1\",\"expanded_url\":\"http:\\\/\\\/www.facebook.com\\\/BillMMooreTips\",\"display_url\":\"facebook.com\\\/BillMMooreTips\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":116198,\"friends_count\":115309,\"listed_count\":1525,\"created_at\":\"Mon Aug 13 12:08:29 +0000 2007\",\"favourites_count\":177793,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":306316,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:35:15 +0000 2020\",\"id\":1336801612401139712,\"id_str\":\"1336801612401139712\",\"text\":\"If we did not sometimes taste of adversity, prosperity would not be so welcome. #dailymotivation https:\\\/\\\/t.co\\\/5MXSLR1Zph\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"dailymotivation\",\"indices\":[80,96]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1336801610899591168,\"id_str\":\"1336801610899591168\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo1F-4DXEAAoidR.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo1F-4DXEAAoidR.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5MXSLR1Zph\",\"display_url\":\"pic.twitter.com\\\/5MXSLR1Zph\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BillMoore20\\\/status\\\/1336801612401139712\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":495,\"h\":315,\"resize\":\"fit\"},\"medium\":{\"w\":495,\"h\":315,\"resize\":\"fit\"},\"small\":{\"w\":495,\"h\":315,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336801610899591168,\"id_str\":\"1336801610899591168\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo1F-4DXEAAoidR.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo1F-4DXEAAoidR.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/5MXSLR1Zph\",\"display_url\":\"pic.twitter.com\\\/5MXSLR1Zph\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BillMoore20\\\/status\\\/1336801612401139712\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":495,\"h\":315,\"resize\":\"fit\"},\"medium\":{\"w\":495,\"h\":315,\"resize\":\"fit\"},\"small\":{\"w\":495,\"h\":315,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.socialjukebox.com\\\" rel=\\\"nofollow\\\">The Social Jukebox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"9AE4E8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1212484611051327489\\\/1Wn0yOBg_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1212484611051327489\\\/1Wn0yOBg_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/8157452\\\/1447861470\",\"profile_link_color\":\"0000FF\",\"profile_sidebar_border_color\":\"87BC44\",\"profile_sidebar_fill_color\":\"E0FF92\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":811866242667646977,\"id_str\":\"811866242667646977\",\"name\":\"Paquet Judicael - Myagile Partner (coach agile)\",\"screen_name\":\"myagilepartner\",\"location\":\"Singapore\",\"description\":\"Agile coach - Agile transforms our life and I hope to be craftsman of this change :) #agile #scrum #agilecoach #agilecoaching #scrummaster #productowner\",\"url\":\"https:\\\/\\\/t.co\\\/HpFgN2aFdH\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/HpFgN2aFdH\",\"expanded_url\":\"https:\\\/\\\/blog.myagilepartner.fr\",\"display_url\":\"blog.myagilepartner.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2810,\"friends_count\":4849,\"listed_count\":38,\"created_at\":\"Thu Dec 22 09:29:30 +0000 2016\",\"favourites_count\":1889,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2725,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 11:56:13 +0000 2020\",\"id\":1336278405629833217,\"id_str\":\"1336278405629833217\",\"text\":\"Scrum Guide 2020 - Les r\\u00f4les scrum changent - Commence a 13h ce mardi, je vous attends :) On pourra en parler\\u2026 https:\\\/\\\/t.co\\\/NjtxiycgVE\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NjtxiycgVE\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336278405629833217\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[111,134]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"15cc31ea028d7048\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/15cc31ea028d7048.json\",\"place_type\":\"city\",\"name\":\"Montigny-l\\u00e8s-Cormeilles\",\"full_name\":\"Montigny-l\\u00e8s-Cormeilles, France\",\"country_code\":\"FR\",\"country\":\"France\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[2.174114,48.9792151],[2.2133019,48.9792151],[2.2133019,49.0076642],[2.174114,49.0076642]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1151449762001932289\\\/C-CdTpwq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1151449762001932289\\\/C-CdTpwq_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/811866242667646977\\\/1563361902\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1190524762298224641,\"id_str\":\"1190524762298224641\",\"name\":\"Notre Plan\\u00e8te le vaut bien\",\"screen_name\":\"NotreVaut\",\"location\":\"Paris\",\"description\":\"Vous \\u00eates pr\\u00e9occup\\u00e9(e) par l\\u2019avenir de notre plan\\u00e8te ? Vous trouvez difficile de savoir comment vous informer et agir au mieux? \\n#climat #environnement #plan\\u00e8te\",\"url\":\"https:\\\/\\\/t.co\\\/79TjQ1PPa7\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/79TjQ1PPa7\",\"expanded_url\":\"http:\\\/\\\/notreplanetelevautbien.fr\\\/\",\"display_url\":\"notreplanetelevautbien.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1659,\"friends_count\":1521,\"listed_count\":6,\"created_at\":\"Sat Nov 02 07:03:39 +0000 2019\",\"favourites_count\":2291,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1818,\"lang\":null,\"status\":{\"created_at\":\"Mon Oct 12 07:23:05 +0000 2020\",\"id\":1315553562869587968,\"id_str\":\"1315553562869587968\",\"text\":\"RT @cdion: \\u00ab\\u00a0La pand\\u00e9mie de Covid-19 ne saurait \\u00eatre \\u00ab une excuse \\u00bb pour reporter les objectifs de r\\u00e9duction des \\u00e9missions de CO2 fix\\u00e9s par\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"cdion\",\"name\":\"Cyril Dion\",\"id\":30232889,\"id_str\":\"30232889\",\"indices\":[3,9]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Oct 11 10:26:13 +0000 2020\",\"id\":1315237260804067328,\"id_str\":\"1315237260804067328\",\"text\":\"\\u00ab\\u00a0La pand\\u00e9mie de Covid-19 ne saurait \\u00eatre \\u00ab une excuse \\u00bb pour reporter les objectifs de r\\u00e9duction des \\u00e9missions de\\u2026 https:\\\/\\\/t.co\\\/CR5Yf3CyeL\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CR5Yf3CyeL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1315237260804067328\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":92,\"favorite_count\":306,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":92,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1241963283940327424\\\/tcn9Q_cR_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1241963283940327424\\\/tcn9Q_cR_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1190524762298224641\\\/1572682188\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2630948292,\"id_str\":\"2630948292\",\"name\":\"Privacy Professionals Briefly\",\"screen_name\":\"PrivacyPro_b\",\"location\":\"Internet\",\"description\":\"A Privacy Professionals community with less noise & more highlights on @briefly_tldr. Follow for an invite to join our open beta!\",\"url\":\"https:\\\/\\\/t.co\\\/T96wc2BJo3\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T96wc2BJo3\",\"expanded_url\":\"https:\\\/\\\/briefly.co\\\/anchor\\\/Privacy_professionals\",\"display_url\":\"briefly.co\\\/anchor\\\/Privacy\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":8209,\"friends_count\":8923,\"listed_count\":225,\"created_at\":\"Sat Jul 12 21:14:48 +0000 2014\",\"favourites_count\":38581,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":34210,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:58:56 +0000 2020\",\"id\":1336792473822105600,\"id_str\":\"1336792473822105600\",\"text\":\"Privacy group files complaint against five online test-proctoring s... (The Verge)\\n\\nThe Electronic Privacy Informat\\u2026 https:\\\/\\\/t.co\\\/wAAiFrqvk5\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wAAiFrqvk5\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336792473822105600\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/plow.io\\\/anchor\\\/privacy_professionals\\\" rel=\\\"nofollow\\\">Privacy Professionals PLOW<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263268308616466433\\\/2bSRKXad_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1263268308616466433\\\/2bSRKXad_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2630948292\\\/1405201428\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":16229867,\"id_str\":\"16229867\",\"name\":\"\\u00c9tienne Garbugli (New \\ud83d\\udcd8 \\ud83d\\udc49 Solving Product)\",\"screen_name\":\"egarbugli\",\"location\":\"Nomadic\",\"description\":\"Entrepreneur | Author of https:\\\/\\\/t.co\\\/3hSP8rDsx9 & https:\\\/\\\/t.co\\\/gjgSoOSe89 | Get the first 6 chapters free \\ud83d\\udc49 https:\\\/\\\/t.co\\\/ZhqysyShS7\\n#b2b #innovation #saas #startups\",\"url\":\"https:\\\/\\\/t.co\\\/GN3iz33FaI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GN3iz33FaI\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/egarbugli\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/egarbugli\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3hSP8rDsx9\",\"expanded_url\":\"http:\\\/\\\/LeanB2Bbook.com\",\"display_url\":\"LeanB2Bbook.com\",\"indices\":[25,48]},{\"url\":\"https:\\\/\\\/t.co\\\/gjgSoOSe89\",\"expanded_url\":\"http:\\\/\\\/SolvingProduct.com\",\"display_url\":\"SolvingProduct.com\",\"indices\":[51,74]},{\"url\":\"https:\\\/\\\/t.co\\\/ZhqysyShS7\",\"expanded_url\":\"http:\\\/\\\/leanb2bbook.com\\\/free-sampler\",\"display_url\":\"leanb2bbook.com\\\/free-sampler\",\"indices\":[109,132]}]}},\"protected\":false,\"followers_count\":12513,\"friends_count\":11404,\"listed_count\":402,\"created_at\":\"Wed Sep 10 23:08:49 +0000 2008\",\"favourites_count\":4038,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":13587,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:45:01 +0000 2020\",\"id\":1336773869097594881,\"id_str\":\"1336773869097594881\",\"text\":\"To make progress and reach product-market fit, it's important to understand user expectations. In this guide, I exp\\u2026 https:\\\/\\\/t.co\\\/AeH8e5WmvB\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AeH8e5WmvB\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336773869097594881\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"43494E\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/747655708699725825\\\/xTdTcoIz_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/747655708699725825\\\/xTdTcoIz_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/16229867\\\/1596082883\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1168780015653335041,\"id_str\":\"1168780015653335041\",\"name\":\"DocSearch \\ud83d\\udcd6\\ud83d\\udd0e\",\"screen_name\":\"docsearch_\",\"location\":\"\",\"description\":\"The best search experience for docs, integrates in minutes, for free. #docsearch #dev #ux #dx\\nPowered by @Algolia.\",\"url\":\"https:\\\/\\\/t.co\\\/hcDw76QqK4\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hcDw76QqK4\",\"expanded_url\":\"https:\\\/\\\/community.algolia.com\\\/docsearch\\\/\",\"display_url\":\"community.algolia.com\\\/docsearch\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":162,\"friends_count\":413,\"listed_count\":2,\"created_at\":\"Tue Sep 03 06:57:49 +0000 2019\",\"favourites_count\":258,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":72,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:03:36 +0000 2020\",\"id\":1336793646256054273,\"id_str\":\"1336793646256054273\",\"text\":\"Great series! https:\\\/\\\/t.co\\\/dk7uJSH2a2\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/dk7uJSH2a2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/fbopensource\\\/status\\\/1333513237543829504\",\"display_url\":\"twitter.com\\\/fbopensource\\\/s\\u2026\",\"indices\":[14,37]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1333513237543829504,\"quoted_status_id_str\":\"1333513237543829504\",\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1168787961644756992\\\/LagdQXmZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1168787961644756992\\\/LagdQXmZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1168780015653335041\\\/1580467328\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":31084556,\"id_str\":\"31084556\",\"name\":\"Cherif BOUCHELAGHEM\",\"screen_name\":\"Cherif_b\",\"location\":\"Algeria\",\"description\":\"Software Engineer - Domain-Driven Design practitioner and @donejs core team member\\nhttps:\\\/\\\/t.co\\\/TpoiZLArfn\",\"url\":\"https:\\\/\\\/t.co\\\/6fjiP2F1AC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6fjiP2F1AC\",\"expanded_url\":\"http:\\\/\\\/cherifbouchelaghem.com\\\/\",\"display_url\":\"cherifbouchelaghem.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TpoiZLArfn\",\"expanded_url\":\"http:\\\/\\\/github.com\\\/cherifGsoul\\\/\",\"display_url\":\"github.com\\\/cherifGsoul\\\/\",\"indices\":[83,106]}]}},\"protected\":false,\"followers_count\":1286,\"friends_count\":2565,\"listed_count\":81,\"created_at\":\"Tue Apr 14 08:27:01 +0000 2009\",\"favourites_count\":9322,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5541,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 20:47:02 +0000 2020\",\"id\":1336411992106659845,\"id_str\":\"1336411992106659845\",\"text\":\"What a scandal!\\n#no_to_racism\\n\\nhttps:\\\/\\\/t.co\\\/iuJsr27yxv\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"no_to_racism\",\"indices\":[16,29]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iuJsr27yxv\",\"expanded_url\":\"https:\\\/\\\/www.eurosport.com\\\/football\\\/champions-league\\\/2020-2021\\\/players-walk-off-at-psg-amid-allegations-of-racism-towards-basaksehir-member-of-staff_sto8024687\\\/story.shtml\",\"display_url\":\"eurosport.com\\\/football\\\/champ\\u2026\",\"indices\":[31,54]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"8AB7C2\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme17\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme17\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1240680309194141704\\\/RUII3Zia_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1240680309194141704\\\/RUII3Zia_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/31084556\\\/1584893716\",\"profile_link_color\":\"16A085\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":818465693754650624,\"id_str\":\"818465693754650624\",\"name\":\"AlphaSOC\",\"screen_name\":\"alphasoc\",\"location\":\"San Francisco, CA\",\"description\":\"Our analytics engine processes network telemetry to uncover infected hosts, lateral movement, and emerging threats.\",\"url\":\"https:\\\/\\\/t.co\\\/2A2io72aFM\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2A2io72aFM\",\"expanded_url\":\"https:\\\/\\\/alphasoc.com\",\"display_url\":\"alphasoc.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1788,\"friends_count\":982,\"listed_count\":35,\"created_at\":\"Mon Jan 09 14:33:22 +0000 2017\",\"favourites_count\":15,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":230,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 18 12:12:51 +0000 2020\",\"id\":1329034835151753217,\"id_str\":\"1329034835151753217\",\"text\":\"We've published a live feed containing all known #Ryuk ransomware C2 and dropper domains. Correlate the feed with y\\u2026 https:\\\/\\\/t.co\\\/ieUfi5NDE2\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Ryuk\",\"indices\":[49,54]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ieUfi5NDE2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1329034835151753217\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1015918164494909440\\\/m4c47qTm_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1015918164494909440\\\/m4c47qTm_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/818465693754650624\\\/1530137978\",\"profile_link_color\":\"32A9E1\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":203242921,\"id_str\":\"203242921\",\"name\":\"Ana Trajkovska\",\"screen_name\":\"AnaTrajkovska_\",\"location\":\"Munich, Bavaria\",\"description\":\"Backend Engineer @vercel\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":849,\"friends_count\":536,\"listed_count\":7,\"created_at\":\"Fri Oct 15 21:11:39 +0000 2010\",\"favourites_count\":3260,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":196,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 16:33:59 +0000 2020\",\"id\":1336348308328083456,\"id_str\":\"1336348308328083456\",\"text\":\"RT @rauchg: https:\\\/\\\/t.co\\\/3NjLwqM8uU is now powered by #nextjs \\ud83d\\udd2e https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"nextjs\",\"indices\":[54,61]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"rauchg\",\"name\":\"Guillermo Rauch\",\"id\":15540222,\"id_str\":\"15540222\",\"indices\":[3,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU\",\"expanded_url\":\"http:\\\/\\\/Oracle.com\",\"display_url\":\"Oracle.com\",\"indices\":[12,35]}],\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[64,87],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}},\"source_status_id\":1336348180342951937,\"source_status_id_str\":\"1336348180342951937\",\"source_user_id\":15540222,\"source_user_id_str\":\"15540222\"}]},\"extended_entities\":{\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[64,87],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}},\"source_status_id\":1336348180342951937,\"source_status_id_str\":\"1336348180342951937\",\"source_user_id\":15540222,\"source_user_id_str\":\"15540222\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 16:33:28 +0000 2020\",\"id\":1336348180342951937,\"id_str\":\"1336348180342951937\",\"text\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU is now powered by #nextjs \\ud83d\\udd2e https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"nextjs\",\"indices\":[42,49]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3NjLwqM8uU\",\"expanded_url\":\"http:\\\/\\\/Oracle.com\",\"display_url\":\"Oracle.com\",\"indices\":[0,23]}],\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[52,75],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336348176979095553,\"id_str\":\"1336348176979095553\",\"indices\":[52,75],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoupljEUcAEgJ6s.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/aD5xKhmlEP\",\"display_url\":\"pic.twitter.com\\\/aD5xKhmlEP\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/rauchg\\\/status\\\/1336348180342951937\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1431,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":475,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":838,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":{\"id\":\"840f120ae56c1da7\",\"url\":\"https:\\\/\\\/api.twitter.com\\\/1.1\\\/geo\\\/id\\\/840f120ae56c1da7.json\",\"place_type\":\"city\",\"name\":\"Napa\",\"full_name\":\"Napa, CA\",\"country_code\":\"US\",\"country\":\"Etats-Unis\",\"contained_within\":[],\"bounding_box\":{\"type\":\"Polygon\",\"coordinates\":[[[-122.358011,38.243267],[-122.254517,38.243267],[-122.254517,38.350876],[-122.358011,38.350876]]]},\"attributes\":{}},\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":833,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":37,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1250818357055696896\\\/gBNi87ab_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1250818357055696896\\\/gBNi87ab_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/203242921\\\/1573164603\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":18539631,\"id_str\":\"18539631\",\"name\":\"Martin Zwilling\",\"screen_name\":\"StartupPro\",\"location\":\"Prescott, AZ\",\"description\":\"Veteran startup mentor, executive, blogger, author, tech professional, professor, and investor. Published on Forbes, Entrepreneur, Inc, Huffington Post, etc.\",\"url\":\"http:\\\/\\\/t.co\\\/UECStTOGC2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/UECStTOGC2\",\"expanded_url\":\"http:\\\/\\\/blog.startupprofessionals.com\",\"display_url\":\"blog.startupprofessionals.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1010097,\"friends_count\":980868,\"listed_count\":10467,\"created_at\":\"Thu Jan 01 23:51:19 +0000 2009\",\"favourites_count\":4,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":15685,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:13:26 +0000 2020\",\"id\":1336675326596771840,\"id_str\":\"1336675326596771840\",\"text\":\"Adopt A Decision Process That Works For The Long Term https:\\\/\\\/t.co\\\/6nYikHEWcZ . The discipline most often reserved\\u2026 https:\\\/\\\/t.co\\\/9yO9znwrON\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6nYikHEWcZ\",\"expanded_url\":\"https:\\\/\\\/blog.startupprofessionals.com\\\/2020\\\/12\\\/adopt-decision-process-that-works-for.html\",\"display_url\":\"blog.startupprofessionals.com\\\/2020\\\/12\\\/adopt-\\u2026\",\"indices\":[54,77]},{\"url\":\"https:\\\/\\\/t.co\\\/9yO9znwrON\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336675326596771840\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"B9E2FE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme4\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/771430411427717121\\\/o0e41_S1_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/771430411427717121\\\/o0e41_S1_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/18539631\\\/1354292645\",\"profile_link_color\":\"2D0AE6\",\"profile_sidebar_border_color\":\"2D0AE6\",\"profile_sidebar_fill_color\":\"B9E2FE\",\"profile_text_color\":\"3C3940\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14151850,\"id_str\":\"14151850\",\"name\":\"Kitson Kelly\",\"screen_name\":\"kitsonk\",\"location\":\"Melbourne, Australia\",\"description\":\"Working full time on @deno_land.  Opinions are totally my own.\\n\\npronouns: he\\\/him\",\"url\":\"https:\\\/\\\/t.co\\\/ubKcip4U4U\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ubKcip4U4U\",\"expanded_url\":\"https:\\\/\\\/kitsonkelly.com\",\"display_url\":\"kitsonkelly.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1060,\"friends_count\":396,\"listed_count\":62,\"created_at\":\"Sat Mar 15 08:16:29 +0000 2008\",\"favourites_count\":4802,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":3813,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 03:27:31 +0000 2020\",\"id\":1336512773954576388,\"id_str\":\"1336512773954576388\",\"text\":\"@NeoNacho When I moved to Australia and noticed they marked the rubbish bins\\\/garbage as \\\"general waste\\\"... https:\\\/\\\/t.co\\\/4sdVl2Licq\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NeoNacho\",\"name\":\"clang -H -o -H -o -H -o\",\"id\":10341052,\"id_str\":\"10341052\",\"indices\":[0,9]}],\"urls\":[],\"media\":[{\"id\":1336512734888742912,\"id_str\":\"1336512734888742912\",\"indices\":[107,130],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eow_QFDUUAAvMEC.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eow_QFDUUAAvMEC.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/4sdVl2Licq\",\"display_url\":\"pic.twitter.com\\\/4sdVl2Licq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kitsonk\\\/status\\\/1336512773954576388\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":400,\"h\":400,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":400,\"resize\":\"fit\"},\"large\":{\"w\":400,\"h\":400,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336512734888742912,\"id_str\":\"1336512734888742912\",\"indices\":[107,130],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eow_QFDUUAAvMEC.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eow_QFDUUAAvMEC.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/4sdVl2Licq\",\"display_url\":\"pic.twitter.com\\\/4sdVl2Licq\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kitsonk\\\/status\\\/1336512773954576388\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":400,\"h\":400,\"resize\":\"fit\"},\"small\":{\"w\":400,\"h\":400,\"resize\":\"fit\"},\"large\":{\"w\":400,\"h\":400,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336503554492665856,\"in_reply_to_status_id_str\":\"1336503554492665856\",\"in_reply_to_user_id\":10341052,\"in_reply_to_user_id_str\":\"10341052\",\"in_reply_to_screen_name\":\"NeoNacho\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1111479887305408514\\\/SNvs7Fgn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1111479887305408514\\\/SNvs7Fgn_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14151850\\\/1355693474\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1190237756393439233,\"id_str\":\"1190237756393439233\",\"name\":\"Laura\",\"screen_name\":\"Laura15478888\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":462,\"friends_count\":4200,\"listed_count\":1,\"created_at\":\"Fri Nov 01 12:02:59 +0000 2019\",\"favourites_count\":3,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":6,\"lang\":null,\"status\":{\"created_at\":\"Mon Jan 06 18:18:33 +0000 2020\",\"id\":1214249911958614016,\"id_str\":\"1214249911958614016\",\"text\":\"@fguegueniat Tu peux me contacter en priv\\u00e9 ??\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"fguegueniat\",\"name\":\"Franck Gu\\u00e9gu\\u00e9niat PhD\",\"id\":562899143,\"id_str\":\"562899143\",\"indices\":[0,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1214249746791092225,\"in_reply_to_status_id_str\":\"1214249746791092225\",\"in_reply_to_user_id\":562899143,\"in_reply_to_user_id_str\":\"562899143\",\"in_reply_to_screen_name\":\"fguegueniat\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1190237929622458374\\\/BFQHVd6V_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1190237929622458374\\\/BFQHVd6V_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":23303819,\"id_str\":\"23303819\",\"name\":\"GV Amos\",\"screen_name\":\"gamos\",\"location\":\"Decentraland\",\"description\":\"New World Programs Help Desk @Limio_Net. Seeking the fresh snow.#startup #AI #IA #VA #dapps #blockchain #smartcontracts #AR #VR #MR #decentralized #DAO\",\"url\":\"https:\\\/\\\/t.co\\\/NbDWyrOnGX\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NbDWyrOnGX\",\"expanded_url\":\"https:\\\/\\\/www.limio.io\\\/\",\"display_url\":\"limio.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2279,\"friends_count\":2984,\"listed_count\":116,\"created_at\":\"Sun Mar 08 12:30:47 +0000 2009\",\"favourites_count\":77311,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3048,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 10:09:27 +0000 2020\",\"id\":1335889150176763904,\"id_str\":\"1335889150176763904\",\"text\":\"RT @_KarenHao: If you're wondering what Google was so terrified of @timnitGebru publishing, I got a copy of the paper. Here's my best summa\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"_KarenHao\",\"name\":\"Karen Hao\",\"id\":4922450361,\"id_str\":\"4922450361\",\"indices\":[3,13]},{\"screen_name\":\"timnitGebru\",\"name\":\"Timnit Gebru\",\"id\":359831209,\"id_str\":\"359831209\",\"indices\":[67,79]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Dec 05 02:56:47 +0000 2020\",\"id\":1335055489168797697,\"id_str\":\"1335055489168797697\",\"text\":\"If you're wondering what Google was so terrified of @timnitGebru publishing, I got a copy of the paper. Here's my b\\u2026 https:\\\/\\\/t.co\\\/Zdy7c7nUvw\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"timnitGebru\",\"name\":\"Timnit Gebru\",\"id\":359831209,\"id_str\":\"359831209\",\"indices\":[52,64]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Zdy7c7nUvw\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335055489168797697\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2976,\"favorite_count\":6179,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2976,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"CED2D4\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/832905117447774208\\\/RXI4NM2e_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/832905117447774208\\\/RXI4NM2e_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/23303819\\\/1519523276\",\"profile_link_color\":\"C70512\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"EFF0F0\",\"profile_text_color\":\"777069\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3322771191,\"id_str\":\"3322771191\",\"name\":\"Jamstack Jessy\",\"screen_name\":\"ljayham\",\"location\":\"Remote \",\"description\":\"Always learning, always evolving, forever curious | Sometimes found in Kubernetes clusters, other times I get creative | \\u2764 Rust & JS | reader, writer, send \\ud83c\\udf69\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1379,\"friends_count\":1330,\"listed_count\":6,\"created_at\":\"Sat Jun 13 11:01:31 +0000 2015\",\"favourites_count\":45913,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5502,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 18:19:03 +0000 2020\",\"id\":1336737135399997441,\"id_str\":\"1336737135399997441\",\"text\":\"RT @_joemag_: You should go ahead and build micro services. Or a monolith. Or anything else in between that makes sense. I just wouldn\\u2019t ta\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"_joemag_\",\"name\":\"Joe Magerramov\",\"id\":1091828269412839424,\"id_str\":\"1091828269412839424\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 17:04:21 +0000 2020\",\"id\":1336355951964667904,\"id_str\":\"1336355951964667904\",\"text\":\"You should go ahead and build micro services. Or a monolith. Or anything else in between that makes sense. I just w\\u2026 https:\\\/\\\/t.co\\\/Pm42aWbbdA\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Pm42aWbbdA\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336355951964667904\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":85,\"favorite_count\":703,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":85,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325577728469454849\\\/CWh_dxTJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325577728469454849\\\/CWh_dxTJ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3322771191\\\/1604877315\",\"profile_link_color\":\"336699\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":30662381,\"id_str\":\"30662381\",\"name\":\"Ulterior \\ud83c\\udfd4\\ufe0f\",\"screen_name\":\"boleroo\",\"location\":\"Macedonia\",\"description\":\"Music, knowledge and programming\",\"url\":\"https:\\\/\\\/t.co\\\/0JBXDJXfLI\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0JBXDJXfLI\",\"expanded_url\":\"http:\\\/\\\/www.soundcloud.com\\\/ulterior\",\"display_url\":\"soundcloud.com\\\/ulterior\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":881,\"friends_count\":2156,\"listed_count\":92,\"created_at\":\"Sun Apr 12 15:05:14 +0000 2009\",\"favourites_count\":44750,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":26732,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:29:23 +0000 2020\",\"id\":1336709537668198404,\"id_str\":\"1336709537668198404\",\"text\":\"Think of Leonardo Di Caprio and co. https:\\\/\\\/t.co\\\/TdMqvANlBE\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TdMqvANlBE\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/TalebWisdom\\\/status\\\/1336584709040709632\",\"display_url\":\"twitter.com\\\/TalebWisdom\\\/st\\u2026\",\"indices\":[36,59]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336584709040709632,\"quoted_status_id_str\":\"1336584709040709632\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"A0AFB0\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/984733560547528704\\\/7QGkP6hr_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/984733560547528704\\\/7QGkP6hr_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/30662381\\\/1527760695\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDFFCC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17366048,\"id_str\":\"17366048\",\"name\":\"Amunategui - ViralML.com\",\"screen_name\":\"amunategui\",\"location\":\"Barcelona, Spain\",\"description\":\"Stay safe out there! No DMs\\n\\nAuthor of Monetizing ML, Python Web Work & The Little Book of Fundamental Indicators | https:\\\/\\\/t.co\\\/jqhBo3iMj2 | https:\\\/\\\/t.co\\\/S1vua3IlP2\",\"url\":\"https:\\\/\\\/t.co\\\/S1vua3IlP2\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/S1vua3IlP2\",\"expanded_url\":\"http:\\\/\\\/ViralML.com\",\"display_url\":\"ViralML.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jqhBo3iMj2\",\"expanded_url\":\"http:\\\/\\\/FastML.io\",\"display_url\":\"FastML.io\",\"indices\":[116,139]},{\"url\":\"https:\\\/\\\/t.co\\\/S1vua3IlP2\",\"expanded_url\":\"http:\\\/\\\/ViralML.com\",\"display_url\":\"ViralML.com\",\"indices\":[142,165]}]}},\"protected\":false,\"followers_count\":12571,\"friends_count\":13474,\"listed_count\":58,\"created_at\":\"Thu Nov 13 14:48:01 +0000 2008\",\"favourites_count\":7205,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":11067,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:34:26 +0000 2020\",\"id\":1336786305880109073,\"id_str\":\"1336786305880109073\",\"text\":\"RT @resolutemex: All I see is a higher low. https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"resolutemex\",\"name\":\"resolute\",\"id\":167721319,\"id_str\":\"167721319\",\"indices\":[3,15]}],\"urls\":[],\"media\":[{\"id\":1336784366832377857,\"id_str\":\"1336784366832377857\",\"indices\":[44,67],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"url\":\"https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"display_url\":\"pic.twitter.com\\\/L0Tkne74zX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/resolutemex\\\/status\\\/1336784442376024068\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":2048,\"h\":1510,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":885,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":501,\"resize\":\"fit\"}},\"source_status_id\":1336784442376024068,\"source_status_id_str\":\"1336784442376024068\",\"source_user_id\":167721319,\"source_user_id_str\":\"167721319\"}]},\"extended_entities\":{\"media\":[{\"id\":1336784366832377857,\"id_str\":\"1336784366832377857\",\"indices\":[44,67],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"url\":\"https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"display_url\":\"pic.twitter.com\\\/L0Tkne74zX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/resolutemex\\\/status\\\/1336784442376024068\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":2048,\"h\":1510,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":885,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":501,\"resize\":\"fit\"}},\"source_status_id\":1336784442376024068,\"source_status_id_str\":\"1336784442376024068\",\"source_user_id\":167721319,\"source_user_id_str\":\"167721319\"}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 21:27:01 +0000 2020\",\"id\":1336784442376024068,\"id_str\":\"1336784442376024068\",\"text\":\"All I see is a higher low. https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1336784366832377857,\"id_str\":\"1336784366832377857\",\"indices\":[27,50],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"url\":\"https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"display_url\":\"pic.twitter.com\\\/L0Tkne74zX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/resolutemex\\\/status\\\/1336784442376024068\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":2048,\"h\":1510,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":885,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":501,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336784366832377857,\"id_str\":\"1336784366832377857\",\"indices\":[27,50],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eo02TI5W4AEawRv.png\",\"url\":\"https:\\\/\\\/t.co\\\/L0Tkne74zX\",\"display_url\":\"pic.twitter.com\\\/L0Tkne74zX\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/resolutemex\\\/status\\\/1336784442376024068\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":2048,\"h\":1510,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":885,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":501,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":52,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1211590718181060609\\\/TuRRSsqd_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1211590718181060609\\\/TuRRSsqd_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17366048\\\/1582531253\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":783740016715522048,\"id_str\":\"783740016715522048\",\"name\":\"VCF Schweiz\",\"screen_name\":\"VCFe_CH\",\"location\":\"Zurich, Switzerland\",\"description\":\"Vintage Computer Festival Z\\u00fcrich\",\"url\":\"https:\\\/\\\/t.co\\\/iFicKEf8lX\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iFicKEf8lX\",\"expanded_url\":\"http:\\\/\\\/www.vintagecomputerfestival.ch\",\"display_url\":\"vintagecomputerfestival.ch\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1975,\"friends_count\":4814,\"listed_count\":20,\"created_at\":\"Wed Oct 05 18:45:56 +0000 2016\",\"favourites_count\":26,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":360,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 02 09:17:12 +0000 2020\",\"id\":1323192424215257089,\"id_str\":\"1323192424215257089\",\"text\":\"#SwissDigitaldays - Ab und zu lohnt sich auch ein Blick zur\\u00fcck in die Vergangenheit der Digitalisierung. Die aktuel\\u2026 https:\\\/\\\/t.co\\\/DQQxPxuFwi\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"SwissDigitaldays\",\"indices\":[0,17]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DQQxPxuFwi\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1323192424215257089\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":7,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"de\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1313090210494906368\\\/KK2ZRzU8_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1313090210494906368\\\/KK2ZRzU8_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/783740016715522048\\\/1601900734\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":12403132,\"id_str\":\"12403132\",\"name\":\"pollianicus\",\"screen_name\":\"pollianicus\",\"location\":\"Edinburgh, Scotland\",\"description\":\"Based in Scotland. Raising spectral kids. Tweets about knitting and cats.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":true,\"followers_count\":919,\"friends_count\":988,\"listed_count\":59,\"created_at\":\"Fri Jan 18 15:10:40 +0000 2008\",\"favourites_count\":17412,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":44635,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FAF6CF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme8\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme8\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1074765200811790336\\\/cG0_5MwR_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1074765200811790336\\\/cG0_5MwR_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/12403132\\\/1559783011\",\"profile_link_color\":\"469A84\",\"profile_sidebar_border_color\":\"30091E\",\"profile_sidebar_fill_color\":\"605158\",\"profile_text_color\":\"C5C7B0\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3189061,\"id_str\":\"3189061\",\"name\":\"Jonathan N, FutureWE\",\"screen_name\":\"jnxyz\",\"location\":\"Brisbane, Australia\",\"description\":\"We can B ready 4 any future | Me = Creative Problem Solving \\ud83d\\udcf8\\ud83c\\udf05 @STEMPunksau FutureWE FirstOnMars\\ud83d\\ude80#Edtech #Futures #STEAM #SpaceEd \\uf8ffADE HundrED AR VR CoSpaces\",\"url\":\"https:\\\/\\\/t.co\\\/ZR4oJTZEEx\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZR4oJTZEEx\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/future_survey\",\"display_url\":\"bit.ly\\\/future_survey\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":13119,\"friends_count\":9921,\"listed_count\":628,\"created_at\":\"Mon Apr 02 07:11:04 +0000 2007\",\"favourites_count\":32835,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":27681,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:17:01 +0000 2020\",\"id\":1336766826034778113,\"id_str\":\"1336766826034778113\",\"text\":\"RT @hardmaru: \\u201cFor the last forty years we have programmed computers; for the next forty years we will train them.\\u201d\\n\\nChris Bishop on \\u201cThe R\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"hardmaru\",\"name\":\"hardmaru\",\"id\":2895499182,\"id_str\":\"2895499182\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 13:56:57 +0000 2020\",\"id\":1336671177335427073,\"id_str\":\"1336671177335427073\",\"text\":\"\\u201cFor the last forty years we have programmed computers; for the next forty years we will train them.\\u201d\\n\\nChris Bishop\\u2026 https:\\\/\\\/t.co\\\/rQjO8NCs6T\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/rQjO8NCs6T\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336671177335427073\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":497,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":83,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054455855532322816\\\/VXbc2fkh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1054455855532322816\\\/VXbc2fkh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3189061\\\/1532261919\",\"profile_link_color\":\"0000FF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"E0FF92\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":695659054182612994,\"id_str\":\"695659054182612994\",\"name\":\"numerik-ea\",\"screen_name\":\"numerik_ea\",\"location\":\"Paris, France\",\"description\":\"Numerik-ea Agence digitale solidaire agr\\u00e9\\u00e9e Entreprise Adapt\\u00e9e #EA #Handicap #Web\",\"url\":\"https:\\\/\\\/t.co\\\/91FlQ56msK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/91FlQ56msK\",\"expanded_url\":\"https:\\\/\\\/www.numerik-ea.fr\\\/\",\"display_url\":\"numerik-ea.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":309,\"friends_count\":449,\"listed_count\":4,\"created_at\":\"Fri Feb 05 17:23:38 +0000 2016\",\"favourites_count\":1050,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":571,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 11:00:28 +0000 2020\",\"id\":1335901987129466881,\"id_str\":\"1335901987129466881\",\"text\":\"Le salon HandiHA c'est jusqu'au 15 d\\u00e9cembre. Il est encore temps de nous rejoindre sur notre stand en ligne :\\u2026 https:\\\/\\\/t.co\\\/OXDqM4F06M\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OXDqM4F06M\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335901987129466881\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[111,134]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/951822090960887808\\\/h-dqYd1L_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/951822090960887808\\\/h-dqYd1L_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/695659054182612994\\\/1515767032\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2746879862,\"id_str\":\"2746879862\",\"name\":\"Anne Masson\",\"screen_name\":\"AnneMassonBusso\",\"location\":\"Bretagne \\\/ Paris\",\"description\":\"#ExecCoach, praticienne narrative & facilitatrice #El\\u00e9mentHumain\\u00ae, je twitte #Leadership #Agile #WillSchutz #TransfoNum #EquipeLib\\u00e9r\\u00e9e et... #MaPetiteChanson\",\"url\":\"https:\\\/\\\/t.co\\\/wmNsJ9NM7F\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/wmNsJ9NM7F\",\"expanded_url\":\"http:\\\/\\\/www.intellisensia.fr\",\"display_url\":\"intellisensia.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3057,\"friends_count\":3508,\"listed_count\":77,\"created_at\":\"Tue Aug 19 22:00:13 +0000 2014\",\"favourites_count\":2583,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1289,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 19:49:54 +0000 2020\",\"id\":1334585671638528000,\"id_str\":\"1334585671638528000\",\"text\":\"Encore une belle journ\\u00e9e d'animation cette semaine pour la Fondation d'entreprise KPMG France aupr\\u00e8s des \\u00e9l\\u00e8ves du\\u2026 https:\\\/\\\/t.co\\\/ipi5ZPrCwE\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ipi5ZPrCwE\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334585671638528000\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.linkedin.com\\\/\\\" rel=\\\"nofollow\\\">LinkedIn<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243899250062307334\\\/7kF-LsVe_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1243899250062307334\\\/7kF-LsVe_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2746879862\\\/1593944494\",\"profile_link_color\":\"3B94D9\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2405095140,\"id_str\":\"2405095140\",\"name\":\"ehab elia\",\"screen_name\":\"ehab_elia\",\"location\":\"Paris, France\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/Z7vjeLHgiN\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Z7vjeLHgiN\",\"expanded_url\":\"http:\\\/\\\/ouishare.net\",\"display_url\":\"ouishare.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":403,\"friends_count\":377,\"listed_count\":36,\"created_at\":\"Sat Mar 22 22:00:18 +0000 2014\",\"favourites_count\":1396,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":805,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 10:35:31 +0000 2020\",\"id\":1336620485057130503,\"id_str\":\"1336620485057130503\",\"text\":\"@Tanamiranga Et c'est bas\\u00e9 sur quoi \\\"ce genre de mesure d\\u00e9vie?\\\" Et pourquoi l'image de la p\\u00eache au gros quand ils u\\u2026 https:\\\/\\\/t.co\\\/KxHgMAzaZO\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Tanamiranga\",\"name\":\"Tanamasoandro\",\"id\":49389978,\"id_str\":\"49389978\",\"indices\":[0,12]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KxHgMAzaZO\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336620485057130503\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336609210830827526,\"in_reply_to_status_id_str\":\"1336609210830827526\",\"in_reply_to_user_id\":49389978,\"in_reply_to_user_id_str\":\"49389978\",\"in_reply_to_screen_name\":\"Tanamiranga\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1305425469152595971\\\/oeJPyj9l_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1305425469152595971\\\/oeJPyj9l_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2405095140\\\/1424361238\",\"profile_link_color\":\"4A913C\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1110176147990556674,\"id_str\":\"1110176147990556674\",\"name\":\"Hermetika VR\",\"screen_name\":\"HermetikaVR\",\"location\":\"\",\"description\":\"Climb! Don\\u2019t drown! Hermetika VR is an frantic vertical endless VR game designed exclusively for the Oculus Quest by @BenthamRs\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":67,\"friends_count\":74,\"listed_count\":2,\"created_at\":\"Mon Mar 25 13:46:34 +0000 2019\",\"favourites_count\":12,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":89,\"lang\":null,\"status\":{\"created_at\":\"Thu Jun 18 17:07:00 +0000 2020\",\"id\":1273663515685945348,\"id_str\":\"1273663515685945348\",\"text\":\"RT @Telohtrab: The goddess of @HermetikaVR is getting an overhaul \\ud83d\\udc57 #gamedev #gameart https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"gamedev\",\"indices\":[68,76]},{\"text\":\"gameart\",\"indices\":[77,85]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Telohtrab\",\"name\":\"benjamin bartholet\",\"id\":211464882,\"id_str\":\"211464882\",\"indices\":[3,13]},{\"screen_name\":\"HermetikaVR\",\"name\":\"Hermetika VR\",\"id\":1110176147990556674,\"id_str\":\"1110176147990556674\",\"indices\":[30,42]}],\"urls\":[],\"media\":[{\"id\":1273662820241100801,\"id_str\":\"1273662820241100801\",\"indices\":[86,109],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":468,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"},\"large\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"}},\"source_status_id\":1273662826268237826,\"source_status_id_str\":\"1273662826268237826\",\"source_user_id\":211464882,\"source_user_id_str\":\"211464882\"}]},\"extended_entities\":{\"media\":[{\"id\":1273662820241100801,\"id_str\":\"1273662820241100801\",\"indices\":[86,109],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":468,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"},\"large\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"}},\"source_status_id\":1273662826268237826,\"source_status_id_str\":\"1273662826268237826\",\"source_user_id\":211464882,\"source_user_id_str\":\"211464882\"},{\"id\":1273662822438842369,\"id_str\":\"1273662822438842369\",\"indices\":[86,109],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1lr8WsAEhdNP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1lr8WsAEhdNP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"medium\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"small\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}},\"source_status_id\":1273662826268237826,\"source_status_id_str\":\"1273662826268237826\",\"source_user_id\":211464882,\"source_user_id_str\":\"211464882\"}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Jun 18 17:04:15 +0000 2020\",\"id\":1273662826268237826,\"id_str\":\"1273662826268237826\",\"text\":\"The goddess of @HermetikaVR is getting an overhaul \\ud83d\\udc57 #gamedev #gameart https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"gamedev\",\"indices\":[53,61]},{\"text\":\"gameart\",\"indices\":[62,70]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"HermetikaVR\",\"name\":\"Hermetika VR\",\"id\":1110176147990556674,\"id_str\":\"1110176147990556674\",\"indices\":[15,27]}],\"urls\":[],\"media\":[{\"id\":1273662820241100801,\"id_str\":\"1273662820241100801\",\"indices\":[71,94],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":468,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"},\"large\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1273662820241100801,\"id_str\":\"1273662820241100801\",\"indices\":[71,94],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1ljwX0AEmHcl.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":468,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"},\"large\":{\"w\":1005,\"h\":692,\"resize\":\"fit\"}}},{\"id\":1273662822438842369,\"id_str\":\"1273662822438842369\",\"indices\":[71,94],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1lr8WsAEhdNP.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eaz1lr8WsAEhdNP.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/vNGHyG8h0U\",\"display_url\":\"pic.twitter.com\\\/vNGHyG8h0U\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/Telohtrab\\\/status\\\/1273662826268237826\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"medium\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"small\":{\"w\":523,\"h\":678,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":3,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229112007191924737\\\/EiNI2vfc_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1229112007191924737\\\/EiNI2vfc_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1110176147990556674\\\/1581871526\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1110110064684265472,\"id_str\":\"1110110064684265472\",\"name\":\"Bentham Realities\",\"screen_name\":\"BenthamRs\",\"location\":\"\",\"description\":\"Bentham Realities \\u2014 Reality Design Studio, est. 2019, currently creating @hermetikavr\",\"url\":\"https:\\\/\\\/t.co\\\/pjArF47wJr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pjArF47wJr\",\"expanded_url\":\"http:\\\/\\\/benth.am\",\"display_url\":\"benth.am\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":44,\"friends_count\":43,\"listed_count\":3,\"created_at\":\"Mon Mar 25 09:23:59 +0000 2019\",\"favourites_count\":0,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":34,\"lang\":null,\"status\":{\"created_at\":\"Fri Nov 06 19:07:58 +0000 2020\",\"id\":1324790647186984965,\"id_str\":\"1324790647186984965\",\"text\":\"RT @juliendorra: Splitting triangles! This algo exploration by @jonathanperret for our coming @BenthamRs game makes for a nice generative a\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"juliendorra\",\"name\":\"Julien Dorra\",\"id\":14600138,\"id_str\":\"14600138\",\"indices\":[3,15]},{\"screen_name\":\"jonathanperret\",\"name\":\"Jonathan Perret\",\"id\":14113352,\"id_str\":\"14113352\",\"indices\":[63,78]},{\"screen_name\":\"BenthamRs\",\"name\":\"Bentham Realities\",\"id\":1110110064684265472,\"id_str\":\"1110110064684265472\",\"indices\":[94,104]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Nov 03 08:06:37 +0000 2020\",\"id\":1323537048742039552,\"id_str\":\"1323537048742039552\",\"text\":\"Splitting triangles! This algo exploration by @jonathanperret for our coming @BenthamRs game makes for a nice gener\\u2026 https:\\\/\\\/t.co\\\/Ke6YhRzzoU\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jonathanperret\",\"name\":\"Jonathan Perret\",\"id\":14113352,\"id_str\":\"14113352\",\"indices\":[46,61]},{\"screen_name\":\"BenthamRs\",\"name\":\"Bentham Realities\",\"id\":1110110064684265472,\"id_str\":\"1110110064684265472\",\"indices\":[77,87]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Ke6YhRzzoU\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1323537048742039552\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110557103813525504\\\/TjhK_5We_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1110557103813525504\\\/TjhK_5We_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1110110064684265472\\\/1553612423\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1438131,\"id_str\":\"1438131\",\"name\":\"Shane Witbeck\",\"screen_name\":\"digitalsanctum\",\"location\":\"Portland, OR\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":186,\"friends_count\":1794,\"listed_count\":15,\"created_at\":\"Sun Mar 18 20:05:29 +0000 2007\",\"favourites_count\":199,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1085,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 06:16:27 +0000 2020\",\"id\":1335830511177007104,\"id_str\":\"1335830511177007104\",\"text\":\"RT @jpbrammer: Rudy Giuliani is Icarus if Icarus had started out on fire\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jpbrammer\",\"name\":\"JP\",\"id\":74087670,\"id_str\":\"74087670\",\"indices\":[3,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/tapbots.com\\\/tweetbot\\\" rel=\\\"nofollow\\\">Tweetbot for i\\u039fS<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 05:55:45 +0000 2020\",\"id\":1335825302405210113,\"id_str\":\"1335825302405210113\",\"text\":\"Rudy Giuliani is Icarus if Icarus had started out on fire\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":450,\"favorite_count\":5912,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":450,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"022330\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1154179437249716225\\\/1dcjjWv4_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1154179437249716225\\\/1dcjjWv4_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1438131\\\/1423880331\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"A8C7F7\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14357188,\"id_str\":\"14357188\",\"name\":\"BASILECOM\",\"screen_name\":\"basilecom\",\"location\":\"New Rochelle, NY\",\"description\":\"Web, App and Game Development Studio. Founded by @philipjbasile.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":8430,\"friends_count\":2586,\"listed_count\":50,\"created_at\":\"Fri Apr 11 01:30:08 +0000 2008\",\"favourites_count\":40,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":356,\"lang\":null,\"status\":{\"created_at\":\"Thu Oct 22 21:59:15 +0000 2020\",\"id\":1319397933889052673,\"id_str\":\"1319397933889052673\",\"text\":\"@R3aperLegendary Me\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"R3aperLegendary\",\"name\":\"LegendaryReaper\",\"id\":1245934318200827911,\"id_str\":\"1245934318200827911\",\"indices\":[0,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1319360593988636673,\"in_reply_to_status_id_str\":\"1319360593988636673\",\"in_reply_to_user_id\":1245934318200827911,\"in_reply_to_user_id_str\":\"1245934318200827911\",\"in_reply_to_screen_name\":\"R3aperLegendary\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme16\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1138091718610444288\\\/dJNP5MBI_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1138091718610444288\\\/dJNP5MBI_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14357188\\\/1560177153\",\"profile_link_color\":\"000000\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":897529447,\"id_str\":\"897529447\",\"name\":\"Joel Wurtz\",\"screen_name\":\"JoelWurtz\",\"location\":\"Paris\",\"description\":\"Mouton \\u00e0 5 pattes @ https:\\\/\\\/t.co\\\/XS50VD4Dia\",\"url\":\"https:\\\/\\\/t.co\\\/XS50VD4Dia\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XS50VD4Dia\",\"expanded_url\":\"http:\\\/\\\/redirection.io\",\"display_url\":\"redirection.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XS50VD4Dia\",\"expanded_url\":\"http:\\\/\\\/redirection.io\",\"display_url\":\"redirection.io\",\"indices\":[20,43]}]}},\"protected\":false,\"followers_count\":539,\"friends_count\":259,\"listed_count\":28,\"created_at\":\"Mon Oct 22 12:58:18 +0000 2012\",\"favourites_count\":240,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":871,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 09:54:19 +0000 2020\",\"id\":1330087135467147264,\"id_str\":\"1330087135467147264\",\"text\":\"@pockystar Et en terme de DX \\u00e7a a rien \\u00e0 envie a n'importe quel framework web, y a du Middleware des annotations po\\u2026 https:\\\/\\\/t.co\\\/LQg1hMStpe\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"pockystar\",\"name\":\"Alexandre \\u2764\\ufe0f\\ud83d\\udcbb\\ud83e\\ude85\",\"id\":5891532,\"id_str\":\"5891532\",\"indices\":[0,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LQg1hMStpe\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1330087135467147264\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1330080944913571842,\"in_reply_to_status_id_str\":\"1330080944913571842\",\"in_reply_to_user_id\":5891532,\"in_reply_to_user_id_str\":\"5891532\",\"in_reply_to_screen_name\":\"pockystar\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1001441389220122624\\\/2Keo2Mqt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1001441389220122624\\\/2Keo2Mqt_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":6507302,\"id_str\":\"6507302\",\"name\":\"Jeremy P. Hayes\",\"screen_name\":\"fabulosity\",\"location\":\"Boston, MA\",\"description\":\"DevOps evangelist and engineer @liatrio (he\\\/him)\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":382,\"friends_count\":616,\"listed_count\":9,\"created_at\":\"Fri Jun 01 18:40:51 +0000 2007\",\"favourites_count\":1014,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1667,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 04 20:36:56 +0000 2020\",\"id\":1324088261531389952,\"id_str\":\"1324088261531389952\",\"text\":\"Super excited to launch a new single job description at @liatrio as part of our continuing efforts to make sure\\u2026 https:\\\/\\\/t.co\\\/Y4VAd9c9xl\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"liatrio\",\"name\":\"Liatrio\",\"id\":1968118730,\"id_str\":\"1968118730\",\"indices\":[56,64]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Y4VAd9c9xl\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1324088261531389952\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[113,136]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1324084773506211842,\"quoted_status_id_str\":\"1324084773506211842\",\"retweet_count\":0,\"favorite_count\":8,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1610586999\\\/5642664122471585858_normal\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1610586999\\\/5642664122471585858_normal\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/6507302\\\/1572435386\",\"profile_link_color\":\"1F98C7\",\"profile_sidebar_border_color\":\"C6E2EE\",\"profile_sidebar_fill_color\":\"DAECF4\",\"profile_text_color\":\"663B12\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2345936820,\"id_str\":\"2345936820\",\"name\":\"Sarah Fabulous\",\"screen_name\":\"fabius_sarah\",\"location\":\"\",\"description\":\"Systems Engineer at @lexisnexisrisk #devops \\u26bd\\ufe0f\\ud83e\\udd53\\ud83c\\udf55\\ud83c\\udf69\\ud83d\\udc31\\nPassionate about community service and giving back. Opinions are my own\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":310,\"friends_count\":1009,\"listed_count\":3,\"created_at\":\"Sun Feb 16 00:30:32 +0000 2014\",\"favourites_count\":904,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1057,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 16:58:08 +0000 2020\",\"id\":1330193792859828228,\"id_str\":\"1330193792859828228\",\"text\":\"RT @LexisNexisRisk: To learn more about how you can help @MissingKids through https:\\\/\\\/t.co\\\/atZoE1MZFc, watch this video which features miss\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LexisNexisRisk\",\"name\":\"LexisNexis Risk\",\"id\":44485531,\"id_str\":\"44485531\",\"indices\":[3,18]},{\"screen_name\":\"MissingKids\",\"name\":\"NCMEC\",\"id\":728673283,\"id_str\":\"728673283\",\"indices\":[57,69]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/atZoE1MZFc\",\"expanded_url\":\"https:\\\/\\\/ms.spr.ly\\\/6019pHw0H\",\"display_url\":\"ms.spr.ly\\\/6019pHw0H\",\"indices\":[78,101]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Nov 20 22:00:01 +0000 2020\",\"id\":1329907373872476160,\"id_str\":\"1329907373872476160\",\"text\":\"To learn more about how you can help @MissingKids through https:\\\/\\\/t.co\\\/atZoE1MZFc, watch this video which features\\u2026 https:\\\/\\\/t.co\\\/Q1pN5oZrv8\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"MissingKids\",\"name\":\"NCMEC\",\"id\":728673283,\"id_str\":\"728673283\",\"indices\":[37,49]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/atZoE1MZFc\",\"expanded_url\":\"https:\\\/\\\/ms.spr.ly\\\/6019pHw0H\",\"display_url\":\"ms.spr.ly\\\/6019pHw0H\",\"indices\":[58,81]},{\"url\":\"https:\\\/\\\/t.co\\\/Q1pN5oZrv8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1329907373872476160\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/prod1.sprinklr.com\\\" rel=\\\"nofollow\\\">Sprinklr Publishing<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":21,\"favorite_count\":33,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":21,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1170138749642166273\\\/8sP72Mvw_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1170138749642166273\\\/8sP72Mvw_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2345936820\\\/1567817792\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17763613,\"id_str\":\"17763613\",\"name\":\"Zak Greant\",\"screen_name\":\"zakgreant\",\"location\":\"Basel, Switzerland\",\"description\":\"Cook. Hack. Electronic frontierist. Jack of all trades. VP Marketing ActiveState. \\\/h(e|im)|the[ym]\\\/ Tweets my own.\",\"url\":\"https:\\\/\\\/t.co\\\/JATHb6Ritl\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JATHb6Ritl\",\"expanded_url\":\"http:\\\/\\\/zak.greant.com\",\"display_url\":\"zak.greant.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":857,\"friends_count\":829,\"listed_count\":70,\"created_at\":\"Sun Nov 30 21:45:56 +0000 2008\",\"favourites_count\":777,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1981,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 14:30:03 +0000 2020\",\"id\":1334505179840991234,\"id_str\":\"1334505179840991234\",\"text\":\"Depending on how you feel about regular expressions, this is an elegant weapon from a more civilised age and\\\/or the\\u2026 https:\\\/\\\/t.co\\\/lLhUoIYgwB\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lLhUoIYgwB\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334505179840991234\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F4EECD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1204451265788424196\\\/2jk3mbAl_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1204451265788424196\\\/2jk3mbAl_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17763613\\\/1575998586\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"D3D2CF\",\"profile_sidebar_fill_color\":\"E3E2DE\",\"profile_text_color\":\"634047\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":11473722,\"id_str\":\"11473722\",\"name\":\"Will Worth\",\"screen_name\":\"WillWorth\",\"location\":\"Alicante, Spain\",\"description\":\"Hi \\ud83d\\udc4b I try to share useful, important or encouraging information.  Aiming to be a good ancestor.\",\"url\":\"https:\\\/\\\/t.co\\\/VbsgPnKbAW\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VbsgPnKbAW\",\"expanded_url\":\"https:\\\/\\\/www.willworth.net\",\"display_url\":\"willworth.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1379,\"friends_count\":3883,\"listed_count\":26,\"created_at\":\"Mon Dec 24 09:28:40 +0000 2007\",\"favourites_count\":91386,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":22274,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:03:17 +0000 2020\",\"id\":1336778469154369538,\"id_str\":\"1336778469154369538\",\"text\":\"RT @BadAstronomer: I've heard we're at T-5m (3:04 CST) for liftoff of the SpaceX Starship #SN8. Watch live here:\\n\\nhttps:\\\/\\\/t.co\\\/Iz3Rj1FSB7\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"SN8\",\"indices\":[90,94]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"BadAstronomer\",\"name\":\"Phil Plait\",\"id\":4620451,\"id_str\":\"4620451\",\"indices\":[3,17]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Iz3Rj1FSB7\",\"expanded_url\":\"https:\\\/\\\/www.youtube.com\\\/watch?v=D8bZkTjEnXw&feature=emb_title\",\"display_url\":\"youtube.com\\\/watch?v=D8bZkT\\u2026\",\"indices\":[114,137]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:59:36 +0000 2020\",\"id\":1336777539797331969,\"id_str\":\"1336777539797331969\",\"text\":\"I've heard we're at T-5m (3:04 CST) for liftoff of the SpaceX Starship #SN8. Watch live here:\\u2026 https:\\\/\\\/t.co\\\/EsPW3k1iTR\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"SN8\",\"indices\":[71,75]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/EsPW3k1iTR\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336777539797331969\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[95,118]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":16,\"favorite_count\":95,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":16,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1044526487620276224\\\/gr2bJpdI_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1044526487620276224\\\/gr2bJpdI_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/11473722\\\/1555150483\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":82094164,\"id_str\":\"82094164\",\"name\":\"Ralf Kern\",\"screen_name\":\"kernra\",\"location\":\"Germany\",\"description\":\"Retail Executive #SAP. #husband, #father, #entrepreneur and curious mind. #Omnichannel #Retail #HappyCustomers #AR #VR #S4HANA. Views are my own.\",\"url\":\"https:\\\/\\\/t.co\\\/SH8nmms90p\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SH8nmms90p\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/ralfkern\",\"display_url\":\"linkedin.com\\\/in\\\/ralfkern\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":27005,\"friends_count\":27985,\"listed_count\":171,\"created_at\":\"Tue Oct 13 13:29:41 +0000 2009\",\"favourites_count\":1212,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":13743,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:39:03 +0000 2020\",\"id\":1336681772470292480,\"id_str\":\"1336681772470292480\",\"text\":\"Partnerschaft mit UNICEF: digitale F\\u00e4higkeiten https:\\\/\\\/t.co\\\/iHPFyG2ugt https:\\\/\\\/t.co\\\/ny3YyZzmr2\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iHPFyG2ugt\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/33Zl15T\",\"display_url\":\"bit.ly\\\/33Zl15T\",\"indices\":[47,70]}],\"media\":[{\"id\":1336681770448637952,\"id_str\":\"1336681770448637952\",\"indices\":[71,94],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EozY_PlU0AA07zQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EozY_PlU0AA07zQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ny3YyZzmr2\",\"display_url\":\"pic.twitter.com\\\/ny3YyZzmr2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kernra\\\/status\\\/1336681772470292480\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":640,\"h\":427,\"resize\":\"fit\"},\"medium\":{\"w\":640,\"h\":427,\"resize\":\"fit\"},\"large\":{\"w\":640,\"h\":427,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336681770448637952,\"id_str\":\"1336681770448637952\",\"indices\":[71,94],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EozY_PlU0AA07zQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EozY_PlU0AA07zQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ny3YyZzmr2\",\"display_url\":\"pic.twitter.com\\\/ny3YyZzmr2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kernra\\\/status\\\/1336681772470292480\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":640,\"h\":427,\"resize\":\"fit\"},\"medium\":{\"w\":640,\"h\":427,\"resize\":\"fit\"},\"large\":{\"w\":640,\"h\":427,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/dynamicsignal.com\\\/\\\" rel=\\\"nofollow\\\">Dynamic Signal<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"de\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/928769017426382848\\\/FKRzRxCV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/928769017426382848\\\/FKRzRxCV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/82094164\\\/1510263480\",\"profile_link_color\":\"00ADB3\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1094238997637988352,\"id_str\":\"1094238997637988352\",\"name\":\"DevBreak\",\"screen_name\":\"DevBreak20\",\"location\":\"Bouville, France\",\"description\":\"The European tech conference & festival fusion, bringing tech professionals together! \\nJoin us in 2021, 17th-18th June \\ud83d\\uddd3\",\"url\":\"https:\\\/\\\/t.co\\\/Be9dCntcQr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Be9dCntcQr\",\"expanded_url\":\"http:\\\/\\\/www.devbreak.io\",\"display_url\":\"devbreak.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":365,\"friends_count\":658,\"listed_count\":12,\"created_at\":\"Sat Feb 09 14:18:01 +0000 2019\",\"favourites_count\":343,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":307,\"lang\":null,\"status\":{\"created_at\":\"Fri Apr 03 11:52:17 +0000 2020\",\"id\":1246042835641606145,\"id_str\":\"1246042835641606145\",\"text\":\"\\ud83d\\udce3DevBreak Announcement\\ud83d\\udce3 https:\\\/\\\/t.co\\\/ifiq1tLqhJ\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1246042034185486336,\"id_str\":\"1246042034185486336\",\"indices\":[24,47],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EUrUoNbUwAAppqK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EUrUoNbUwAAppqK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ifiq1tLqhJ\",\"display_url\":\"pic.twitter.com\\\/ifiq1tLqhJ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DevBreak20\\\/status\\\/1246042835641606145\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":356,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1072,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":628,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1246042034185486336,\"id_str\":\"1246042034185486336\",\"indices\":[24,47],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EUrUoNbUwAAppqK.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EUrUoNbUwAAppqK.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/ifiq1tLqhJ\",\"display_url\":\"pic.twitter.com\\\/ifiq1tLqhJ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/DevBreak20\\\/status\\\/1246042835641606145\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":356,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1072,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":628,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1094973261774024704\\\/rNe8t6Vq_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1094973261774024704\\\/rNe8t6Vq_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1094238997637988352\\\/1585915252\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4062739997,\"id_str\":\"4062739997\",\"name\":\"Jo\\u00eblle Durieux\",\"screen_name\":\"Joelledurieux\",\"location\":\"Paris, Ile-de-France\",\"description\":\"Ex DG P\\u00f4le de comp\\u00e9titivit\\u00e9 mondial @financeinnov | Influenceur #Fintech #Diversite | ex DG @HSBC_FR #Assurance #Banque #Technologies #Innovation #Biarritz\",\"url\":\"https:\\\/\\\/t.co\\\/XWBTBKDCik\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/XWBTBKDCik\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/jo\\u00eblle-durieux-09309830\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/jo\\u00eblle-duri\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":18234,\"friends_count\":2666,\"listed_count\":228,\"created_at\":\"Wed Oct 28 19:35:36 +0000 2015\",\"favourites_count\":3429,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4132,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 17:21:12 +0000 2020\",\"id\":1335635416003866624,\"id_str\":\"1335635416003866624\",\"text\":\"RT @LeconnecteurBTZ: \\ud83e\\udd1d Startups, freelance, ind\\u00e9pendants, digital nomades, entrepreneurs, t\\u00e9l\\u00e9travailleurs, TPE-PME-PMI, grandes entreprise\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"LeconnecteurBTZ\",\"name\":\"Le Connecteur\",\"id\":1262263131759357959,\"id_str\":\"1262263131759357959\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Nov 24 10:50:03 +0000 2020\",\"id\":1331188325403815938,\"id_str\":\"1331188325403815938\",\"text\":\"\\ud83e\\udd1d Startups, freelance, ind\\u00e9pendants, digital nomades, entrepreneurs, t\\u00e9l\\u00e9travailleurs, TPE-PME-PMI, grandes entrepr\\u2026 https:\\\/\\\/t.co\\\/4jdwkEFNws\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4jdwkEFNws\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1331188325403815938\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite Inc.<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":12,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1307945157224955919\\\/zGN_kcWp_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1307945157224955919\\\/zGN_kcWp_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4062739997\\\/1590181556\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":796476467739848705,\"id_str\":\"796476467739848705\",\"name\":\"Georgette\",\"screen_name\":\"georgette_libre\",\"location\":\"Paris, France\",\"description\":\"exploratrice du monde libre \\\/  tr\\u00e9sors du domaine public et des licences libres \\\/ une s\\u00e9lection de la biblioth\\u00e8que Georges Brassens, Paris 14e \\\/ #bib2paris\",\"url\":\"https:\\\/\\\/t.co\\\/GPUHgwuIKm\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GPUHgwuIKm\",\"expanded_url\":\"https:\\\/\\\/lestrouvaillesdegeorgette.wordpress.com\\\/\",\"display_url\":\"\\u2026strouvaillesdegeorgette.wordpress.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":379,\"friends_count\":526,\"listed_count\":12,\"created_at\":\"Wed Nov 09 22:16:02 +0000 2016\",\"favourites_count\":2478,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1324,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 25 17:11:15 +0000 2019\",\"id\":1209884321093423106,\"id_str\":\"1209884321093423106\",\"text\":\"Georgette fait une petite pause, pour une dur\\u00e9e ind\\u00e9termin\\u00e9e.\\ud83d\\ude34En attendant, tr\\u00e8s belles f\\u00eates de fin d'ann\\u00e9e, et qu\\u2026 https:\\\/\\\/t.co\\\/OzsOSUE0YF\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OzsOSUE0YF\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1209884321093423106\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":6,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804076934581940224\\\/LyH2F-Hh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/804076934581940224\\\/LyH2F-Hh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/796476467739848705\\\/1489393184\",\"profile_link_color\":\"E81C4F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4453209101,\"id_str\":\"4453209101\",\"name\":\"Hello Finance\",\"screen_name\":\"HelloFinanceMag\",\"location\":\"Paris, France\",\"description\":\"Le fil twitter de l'innovation financi\\u00e8re par @financeinnov . #Fintech, #Insurtech, #Blockchain avec des experts!\",\"url\":\"https:\\\/\\\/t.co\\\/MlWzoOHFP6\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/MlWzoOHFP6\",\"expanded_url\":\"https:\\\/\\\/finance-innovation.org\\\/\",\"display_url\":\"finance-innovation.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":8050,\"friends_count\":2243,\"listed_count\":62,\"created_at\":\"Fri Dec 11 23:10:35 +0000 2015\",\"favourites_count\":204,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1509,\"lang\":null,\"status\":{\"created_at\":\"Thu Oct 01 15:06:44 +0000 2020\",\"id\":1311683978227838976,\"id_str\":\"1311683978227838976\",\"text\":\"RT @financeinnov: \\ud83d\\udc4f Un grand bravo \\u00e0 tous les finalistes !\\nRendez-vous \\u00e0 la prochaine \\u00e9dition de #InsurtechBiz pour encore plus d'innovatio\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"InsurtechBiz\",\"indices\":[97,110]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"financeinnov\",\"name\":\"Finance Innovation\",\"id\":363709030,\"id_str\":\"363709030\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Oct 01 14:52:08 +0000 2020\",\"id\":1311680303325478912,\"id_str\":\"1311680303325478912\",\"text\":\"\\ud83d\\udc4f Un grand bravo \\u00e0 tous les finalistes !\\nRendez-vous \\u00e0 la prochaine \\u00e9dition de #InsurtechBiz pour encore plus d'inn\\u2026 https:\\\/\\\/t.co\\\/qHGlYImwH2\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"InsurtechBiz\",\"indices\":[79,92]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qHGlYImwH2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1311680303325478912\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097950537348276224\\\/a1WxkFkj_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1097950537348276224\\\/a1WxkFkj_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":230413077,\"id_str\":\"230413077\",\"name\":\"Startup.info \\ud83c\\uddeb\\ud83c\\uddf7\",\"screen_name\":\"StartupInfoFr\",\"location\":\"Paris, France\",\"description\":\"Le Magazine collaboratif des #startups (Ex @bonjouridee).  #AppelsAProjets & #concours startups.  D\\u00e9j\\u00e0 12000 candidats de 58 pays. \\nVersion\\ud83c\\uddec\\ud83c\\udde7 @startupinfos\",\"url\":\"https:\\\/\\\/t.co\\\/7837ZKtfiK\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7837ZKtfiK\",\"expanded_url\":\"http:\\\/\\\/startup.info\\\/fr\",\"display_url\":\"startup.info\\\/fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":50960,\"friends_count\":7518,\"listed_count\":762,\"created_at\":\"Sat Dec 25 11:09:57 +0000 2010\",\"favourites_count\":5585,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":14780,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:27:55 +0000 2020\",\"id\":1336709170658226176,\"id_str\":\"1336709170658226176\",\"text\":\"RT @financeinnov: Notre Pr\\u00e9sident @bernardgainnier conclut cette belle journ\\u00e9e #FTCommunity Winter Edition.\\u2744\\ufe0f Merci \\u00e0 tous pour cette magni\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"FTCommunity\",\"indices\":[79,91]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"financeinnov\",\"name\":\"Finance Innovation\",\"id\":363709030,\"id_str\":\"363709030\",\"indices\":[3,16]},{\"screen_name\":\"bernardgainnier\",\"name\":\"Bernard Gainnier\",\"id\":120411678,\"id_str\":\"120411678\",\"indices\":[34,50]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 15:32:12 +0000 2020\",\"id\":1336695149406150656,\"id_str\":\"1336695149406150656\",\"text\":\"Notre Pr\\u00e9sident @bernardgainnier conclut cette belle journ\\u00e9e #FTCommunity Winter Edition.\\u2744\\ufe0f Merci \\u00e0 tous pour cette\\u2026 https:\\\/\\\/t.co\\\/UwwlyMzU5j\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"FTCommunity\",\"indices\":[61,73]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"bernardgainnier\",\"name\":\"Bernard Gainnier\",\"id\":120411678,\"id_str\":\"120411678\",\"indices\":[16,32]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UwwlyMzU5j\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336695149406150656\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/907599272534822912\\\/0QD6KnNw_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/907599272534822912\\\/0QD6KnNw_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/230413077\\\/1549837508\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":486053669,\"id_str\":\"486053669\",\"name\":\"Arturo Usc\\u00e1tegui\",\"screen_name\":\"ArturoUscategui\",\"location\":\"Paris, Ile-de-France\",\"description\":\"Lean-Agile Coach loves surfing on the waves of value creation & continuous improvement-innovation, helping clients in their Grand Cultural Transformations. \\ud83d\\ude00\\u2600\\ufe0f\",\"url\":\"https:\\\/\\\/t.co\\\/kUIRZc8f42\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kUIRZc8f42\",\"expanded_url\":\"http:\\\/\\\/www.colaboremos.fr\",\"display_url\":\"colaboremos.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":379,\"friends_count\":375,\"listed_count\":28,\"created_at\":\"Tue Feb 07 21:36:18 +0000 2012\",\"favourites_count\":444,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1238,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 12:49:40 +0000 2020\",\"id\":1334117531272015879,\"id_str\":\"1334117531272015879\",\"text\":\"Ohla! Plus de 600 000 personnes ont rejoint l'appel du Professeur Yunus pour faire du #Vaccin contre le #Covid un b\\u2026 https:\\\/\\\/t.co\\\/GgSLun1gtV\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Vaccin\",\"indices\":[86,93]},{\"text\":\"Covid\",\"indices\":[104,110]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GgSLun1gtV\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334117531272015879\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"B2DFDA\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/378800000143707554\\\/8f292e8259028ad5e7a66056d4dd84ba_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/378800000143707554\\\/8f292e8259028ad5e7a66056d4dd84ba_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/486053669\\\/1417690975\",\"profile_link_color\":\"93A644\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":492923476,\"id_str\":\"492923476\",\"name\":\"Daniel Slutsky\",\"screen_name\":\"daslu_\",\"location\":\"Ramat Gan\",\"description\":\"\\u2022 #clojure #DataScience @scicloj \\u2022 work @ https:\\\/\\\/t.co\\\/Euc4lNMe6u \\u2022 studying #yoga \\u2022 #leftist activism  \\u2022 #probability \\u2022 #statistics  \\u2022 #emacs\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Euc4lNMe6u\",\"expanded_url\":\"http:\\\/\\\/localize.city\",\"display_url\":\"localize.city\",\"indices\":[42,65]}]}},\"protected\":false,\"followers_count\":568,\"friends_count\":2139,\"listed_count\":14,\"created_at\":\"Wed Feb 15 08:17:02 +0000 2012\",\"favourites_count\":11670,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2614,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:24:29 +0000 2020\",\"id\":1336753605085433857,\"id_str\":\"1336753605085433857\",\"text\":\"RT @lioramihai: \\u05e6\\u05e4\\u05d5 \\u05d1 @AidaTuma \\u05de\\u05e7\\u05e8\\u05d9\\u05d0\\u05d4 \\u05e2\\u05d3\\u05d5\\u05ea \\u05e7\\u05e9\\u05d4 \\u05e9\\u05dc \\u05d0\\u05d9\\u05e9\\u05d4 \\u05e4\\u05dc\\u05e1\\u05d8\\u05d9\\u05e0\\u05d9\\u05ea \\u05e9\\u05d4\\u05e6\\u05d1\\u05d0 \\u05e4\\u05dc\\u05e9 \\u05dc\\u05d1\\u05d9\\u05ea\\u05d4.\\n\\u05d4\\u05e2\\u05d3\\u05d5\\u05ea \\u05e0\\u05d2\\u05d1\\u05ea\\u05d4 \\u05d1\\u05de\\u05e1\\u05d2\\u05e8\\u05ea \\u05d4\\u05db\\u05e0\\u05ea \\u05d3\\u05d5\\\"\\u05d7 '\\u05d7\\u05d9\\u05d9\\u05dd \\u05d7\\u05e9\\u05d5\\u05e4\\u05d9\\u05dd' \\u05d0\\u05d5\\u05d3\\u05d5\\u05ea \\u05e4\\u05dc\\u05d9\\u05e9\\u05d5\\u05ea \\u05dc\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"lioramihai\",\"name\":\"Lior Amihai\",\"id\":61319198,\"id_str\":\"61319198\",\"indices\":[3,14]},{\"screen_name\":\"AidaTuma\",\"name\":\"MK Aida Touma-Sliman\",\"id\":3023764651,\"id_str\":\"3023764651\",\"indices\":[22,31]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 19:11:46 +0000 2020\",\"id\":1336750403564802049,\"id_str\":\"1336750403564802049\",\"text\":\"\\u05e6\\u05e4\\u05d5 \\u05d1 @AidaTuma \\u05de\\u05e7\\u05e8\\u05d9\\u05d0\\u05d4 \\u05e2\\u05d3\\u05d5\\u05ea \\u05e7\\u05e9\\u05d4 \\u05e9\\u05dc \\u05d0\\u05d9\\u05e9\\u05d4 \\u05e4\\u05dc\\u05e1\\u05d8\\u05d9\\u05e0\\u05d9\\u05ea \\u05e9\\u05d4\\u05e6\\u05d1\\u05d0 \\u05e4\\u05dc\\u05e9 \\u05dc\\u05d1\\u05d9\\u05ea\\u05d4.\\n\\u05d4\\u05e2\\u05d3\\u05d5\\u05ea \\u05e0\\u05d2\\u05d1\\u05ea\\u05d4 \\u05d1\\u05de\\u05e1\\u05d2\\u05e8\\u05ea \\u05d4\\u05db\\u05e0\\u05ea \\u05d3\\u05d5\\\"\\u05d7 '\\u05d7\\u05d9\\u05d9\\u05dd \\u05d7\\u05e9\\u05d5\\u05e4\\u05d9\\u05dd' \\u05d0\\u05d5\\u05d3\\u05d5\\u05ea\\u2026 https:\\\/\\\/t.co\\\/6n5FWr4qT1\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AidaTuma\",\"name\":\"MK Aida Touma-Sliman\",\"id\":3023764651,\"id_str\":\"3023764651\",\"indices\":[6,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6n5FWr4qT1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336750403564802049\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":29,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"iw\"},\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"iw\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1318271793329786880\\\/Ta1u3AyO_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1318271793329786880\\\/Ta1u3AyO_normal.jpg\",\"profile_link_color\":\"331122\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1101078520866967552,\"id_str\":\"1101078520866967552\",\"name\":\"Scicloj\",\"screen_name\":\"scicloj\",\"location\":\"\",\"description\":\"A community of people creating high-quality #opensource solutions for #DataScience in #Clojure \\u2022https:\\\/\\\/t.co\\\/Wzgsq5w0PI \\u2022https:\\\/\\\/t.co\\\/KAY0DuQsgo \\u2022https:\\\/\\\/t.co\\\/0wMCGK0XzP\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Wzgsq5w0PI\",\"expanded_url\":\"http:\\\/\\\/github.com\\\/scicloj\",\"display_url\":\"github.com\\\/scicloj\",\"indices\":[96,119]},{\"url\":\"https:\\\/\\\/t.co\\\/KAY0DuQsgo\",\"expanded_url\":\"http:\\\/\\\/yt.vu\\\/+scicloj\",\"display_url\":\"yt.vu\\\/+scicloj\",\"indices\":[121,144]},{\"url\":\"https:\\\/\\\/t.co\\\/0wMCGK0XzP\",\"expanded_url\":\"https:\\\/\\\/scicloj.github.io\",\"display_url\":\"scicloj.github.io\",\"indices\":[146,169]}]}},\"protected\":false,\"followers_count\":849,\"friends_count\":1094,\"listed_count\":17,\"created_at\":\"Thu Feb 28 11:15:51 +0000 2019\",\"favourites_count\":420,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":603,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 20:43:32 +0000 2020\",\"id\":1336048720484458505,\"id_str\":\"1336048720484458505\",\"text\":\"RT @lambduhh: Recording of the SICM meetup last week with @sritchie and Colin Smith. No fancy edits just 2 hours of raw knowledge with my l\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"lambduhh\",\"name\":\"Jordan Miller\",\"id\":1311334612224933889,\"id_str\":\"1311334612224933889\",\"indices\":[3,12]},{\"screen_name\":\"sritchie\",\"name\":\"Sam Ritchie\",\"id\":14074371,\"id_str\":\"14074371\",\"indices\":[58,67]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 19:17:22 +0000 2020\",\"id\":1336027036574429185,\"id_str\":\"1336027036574429185\",\"text\":\"Recording of the SICM meetup last week with @sritchie and Colin Smith. No fancy edits just 2 hours of raw knowledge\\u2026 https:\\\/\\\/t.co\\\/dbMv075zqU\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sritchie\",\"name\":\"Sam Ritchie\",\"id\":14074371,\"id_str\":\"14074371\",\"indices\":[44,53]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/dbMv075zqU\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336027036574429185\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":12,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1101079345504964608\\\/dyyJV8JM_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1101079345504964608\\\/dyyJV8JM_normal.jpg\",\"profile_link_color\":\"666666\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":848913136673542145,\"id_str\":\"848913136673542145\",\"name\":\"Fei_Silver\",\"screen_name\":\"Fei_Silver\",\"location\":\"South West, England\",\"description\":\"Starting out my art career with @Redbubble! :)\\nCheck out my portfolio at\\nhttps:\\\/\\\/t.co\\\/vKmdzhqSqE\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vKmdzhqSqE\",\"expanded_url\":\"http:\\\/\\\/YueFei.redbubble.com\",\"display_url\":\"YueFei.redbubble.com\",\"indices\":[73,96]}]}},\"protected\":false,\"followers_count\":2377,\"friends_count\":1314,\"listed_count\":6,\"created_at\":\"Mon Apr 03 15:00:38 +0000 2017\",\"favourites_count\":132,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3104,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 02 17:42:33 +0000 2020\",\"id\":1323319598838616064,\"id_str\":\"1323319598838616064\",\"text\":\"3 of 5 stars to Chainsaw Man, Vol. 1 by Tatsuki Fujimoto https:\\\/\\\/t.co\\\/T6nWMLK2WU\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T6nWMLK2WU\",\"expanded_url\":\"https:\\\/\\\/goodreads.com\\\/review\\\/show\\\/3625642344\",\"display_url\":\"goodreads.com\\\/review\\\/show\\\/36\\u2026\",\"indices\":[57,80]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.goodreads.com\\\" rel=\\\"nofollow\\\">Goodreads<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1183720809199820800\\\/dqbXJjug_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1183720809199820800\\\/dqbXJjug_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/848913136673542145\\\/1558596945\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1166785633425092608,\"id_str\":\"1166785633425092608\",\"name\":\"Paragon\",\"screen_name\":\"useparagon\",\"location\":\"Los Angeles, CA\",\"description\":\"Build product integrations 10x faster. Stop manually integrating 3rd party APIs and start delivering the features your customers want, faster. YC W20.\",\"url\":\"https:\\\/\\\/t.co\\\/svqCiqKt0a\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/svqCiqKt0a\",\"expanded_url\":\"https:\\\/\\\/www.useparagon.com\",\"display_url\":\"useparagon.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2409,\"friends_count\":2107,\"listed_count\":59,\"created_at\":\"Wed Aug 28 18:52:46 +0000 2019\",\"favourites_count\":195,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":33,\"lang\":null,\"status\":{\"created_at\":\"Mon Oct 26 21:32:38 +0000 2020\",\"id\":1320840788931039234,\"id_str\":\"1320840788931039234\",\"text\":\"@hrrsnbbnt @felix12777 @morningjot Hey Harrison, thanks for the kind words! Please feel free to email us for early\\u2026 https:\\\/\\\/t.co\\\/zQKyOu8LmS\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"hrrsnbbnt\",\"name\":\"Harrison Broadbent\",\"id\":946177759482601472,\"id_str\":\"946177759482601472\",\"indices\":[0,10]},{\"screen_name\":\"felix12777\",\"name\":\"Felix Wong\",\"id\":1409934920,\"id_str\":\"1409934920\",\"indices\":[11,22]},{\"screen_name\":\"morningjot\",\"name\":\"MorningJot\",\"id\":1319871780429860865,\"id_str\":\"1319871780429860865\",\"indices\":[23,34]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/zQKyOu8LmS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1320840788931039234\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":1320626112599212033,\"in_reply_to_status_id_str\":\"1320626112599212033\",\"in_reply_to_user_id\":946177759482601472,\"in_reply_to_user_id_str\":\"946177759482601472\",\"in_reply_to_screen_name\":\"hrrsnbbnt\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181720986434981889\\\/bySLJ4ox_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1181720986434981889\\\/bySLJ4ox_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1166785633425092608\\\/1595900499\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":240607542,\"id_str\":\"240607542\",\"name\":\"\\u2728Jo\\u00ebl\",\"screen_name\":\"Jolg42\",\"location\":\"Berlin, Germany\",\"description\":\"TypeScript Developer @prisma \\u2022 Co-founded @Fontself \\ud83d\\ude03 \\u2022 Gong Fu Cha \\ud83d\\udc9a Oolong \\u2022 Vegan \\ud83c\\udf31\\ud83c\\udf0d\\ud83d\\udc1f\\ud83d\\udc13\\ud83d\\udc07\\ud83d\\udc16\\ud83d\\udc04 \\u2022 He\\\/They \\u2022 \\ud83c\\uddeb\\ud83c\\uddf7\\ud83c\\uddec\\ud83c\\udde7\",\"url\":\"https:\\\/\\\/t.co\\\/J8mSpS614N\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/J8mSpS614N\",\"expanded_url\":\"https:\\\/\\\/www.prisma.io\",\"display_url\":\"prisma.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1428,\"friends_count\":4733,\"listed_count\":120,\"created_at\":\"Thu Jan 20 09:25:10 +0000 2011\",\"favourites_count\":66974,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":6096,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:33:56 +0000 2020\",\"id\":1336771079956729858,\"id_str\":\"1336771079956729858\",\"text\":\"@ryanchenkie Next.js is getting too good it's hard not to use it \\ud83d\\ude01\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ryanchenkie\",\"name\":\"Ryan Chenkie\",\"id\":30654945,\"id_str\":\"30654945\",\"indices\":[0,12]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336765993079726083,\"in_reply_to_status_id_str\":\"1336765993079726083\",\"in_reply_to_user_id\":30654945,\"in_reply_to_user_id_str\":\"30654945\",\"in_reply_to_screen_name\":\"ryanchenkie\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"116B9C\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/968517002787614720\\\/II21KI-Y_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/968517002787614720\\\/II21KI-Y_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/240607542\\\/1578598218\",\"profile_link_color\":\"FF4237\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"99CC33\",\"profile_text_color\":\"3E4415\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":231445532,\"id_str\":\"231445532\",\"name\":\"Johan Bov\\u00e9\",\"screen_name\":\"johanbove\",\"location\":\"D\\u00fcsseldorf\",\"description\":\"Front-End Developer, Web Enthusiast, Biker, and constant learner. Builds web apps @DeloitteDigi_DE  and also on https:\\\/\\\/t.co\\\/xI213hMDVE\\nPronouns: he\\\/him\",\"url\":\"https:\\\/\\\/t.co\\\/55NZQGCNvf\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/55NZQGCNvf\",\"expanded_url\":\"https:\\\/\\\/social.johanbove.info\",\"display_url\":\"social.johanbove.info\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/xI213hMDVE\",\"expanded_url\":\"http:\\\/\\\/johanbove.info\",\"display_url\":\"johanbove.info\",\"indices\":[112,135]}]}},\"protected\":false,\"followers_count\":458,\"friends_count\":1818,\"listed_count\":46,\"created_at\":\"Tue Dec 28 15:01:38 +0000 2010\",\"favourites_count\":6831,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":5998,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 07:24:56 +0000 2020\",\"id\":1330049542239215618,\"id_str\":\"1330049542239215618\",\"text\":\"Starwars etiquette : When you meet someone who survived Alderaan, you don't ask them who they have lost. You ask th\\u2026 https:\\\/\\\/t.co\\\/P1tHkZQZr1\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/P1tHkZQZr1\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1330049542239215618\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/social.johanbove.info\\\" rel=\\\"nofollow\\\">social.johanbove.info<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"0E0D02\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1293993976819744768\\\/OXzFqfh6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1293993976819744768\\\/OXzFqfh6_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/231445532\\\/1546231818\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"0E0D02\",\"profile_text_color\":\"39BD91\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2162697578,\"id_str\":\"2162697578\",\"name\":\"David Clarke\",\"screen_name\":\"1DavidClarke\",\"location\":\"London, England\",\"description\":\"Who's Who in #CyberSecurity 2020. #DataProtection, #GDPR,In Minimum Time! #startups\\u26a1 Join 20,000 others  #GDPR  Linkedin Group   https:\\\/\\\/t.co\\\/lBR22wQmhH\\u2026\\u2026\\u23ec\",\"url\":\"https:\\\/\\\/t.co\\\/PIWjZsHxHM\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PIWjZsHxHM\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/1davidclarke\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/1davidclark\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lBR22wQmhH\",\"expanded_url\":\"http:\\\/\\\/linkedin.com\\\/groups\\\/1201767\",\"display_url\":\"linkedin.com\\\/groups\\\/1201767\",\"indices\":[129,152]}]}},\"protected\":false,\"followers_count\":96800,\"friends_count\":98220,\"listed_count\":2069,\"created_at\":\"Tue Oct 29 11:48:32 +0000 2013\",\"favourites_count\":5266,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":47558,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:31:05 +0000 2020\",\"id\":1336785463953252352,\"id_str\":\"1336785463953252352\",\"text\":\"RT @1DavidClarke: #AI will revolutionize #marketing and #sales. #IoT #machinelearning #ML #fintech MT @sbmeunier @DeepLearn007#AI will revo\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"AI\",\"indices\":[18,21]},{\"text\":\"marketing\",\"indices\":[41,51]},{\"text\":\"sales\",\"indices\":[56,62]},{\"text\":\"IoT\",\"indices\":[64,68]},{\"text\":\"machinelearning\",\"indices\":[69,85]},{\"text\":\"ML\",\"indices\":[86,89]},{\"text\":\"fintech\",\"indices\":[90,98]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"1DavidClarke\",\"name\":\"David Clarke\",\"id\":2162697578,\"id_str\":\"2162697578\",\"indices\":[3,16]},{\"screen_name\":\"sbmeunier\",\"name\":\"Sebastien Meunier\",\"id\":2975134426,\"id_str\":\"2975134426\",\"indices\":[102,112]},{\"screen_name\":\"DeepLearn007\",\"name\":\"AI\",\"id\":841437061,\"id_str\":\"841437061\",\"indices\":[113,126]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/smarterqueue.com\\\" rel=\\\"nofollow\\\">SmarterQueue<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Mar 03 20:45:49 +0000 2018\",\"id\":970037551858966528,\"id_str\":\"970037551858966528\",\"text\":\"#AI will revolutionize #marketing and #sales. #IoT #machinelearning #ML #fintech MT @sbmeunier @DeepLearn007#AI wil\\u2026 https:\\\/\\\/t.co\\\/6Iuwl1BOrA\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"AI\",\"indices\":[0,3]},{\"text\":\"marketing\",\"indices\":[23,33]},{\"text\":\"sales\",\"indices\":[38,44]},{\"text\":\"IoT\",\"indices\":[46,50]},{\"text\":\"machinelearning\",\"indices\":[51,67]},{\"text\":\"ML\",\"indices\":[68,71]},{\"text\":\"fintech\",\"indices\":[72,80]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"sbmeunier\",\"name\":\"Sebastien Meunier\",\"id\":2975134426,\"id_str\":\"2975134426\",\"indices\":[84,94]},{\"screen_name\":\"DeepLearn007\",\"name\":\"AI\",\"id\":841437061,\"id_str\":\"841437061\",\"indices\":[95,108]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6Iuwl1BOrA\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/970037551858966528\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/9\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/smarterqueue.com\\\" rel=\\\"nofollow\\\">SmarterQueue<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":70,\"favorite_count\":75,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":70,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1271909293181349889\\\/kR9lq8Rh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1271909293181349889\\\/kR9lq8Rh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2162697578\\\/1602346863\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2613554377,\"id_str\":\"2613554377\",\"name\":\"Bitrise\",\"screen_name\":\"bitrise\",\"location\":\"Budapest, London, Boston, SF\",\"description\":\"CI\\\/CD for mobile. Easy to use, endlessly customizable and scalable. 300+ integrations. Start building better apps, faster \\ud83d\\ude80\\n\\n\\ud83c\\uddef\\ud83c\\uddf5: @bitriseJ\\n\\ud83d\\udea8: @bitrisestatus\",\"url\":\"http:\\\/\\\/t.co\\\/ulPhsrEJbY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/ulPhsrEJbY\",\"expanded_url\":\"http:\\\/\\\/www.bitrise.io\\\/\",\"display_url\":\"bitrise.io\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":5594,\"friends_count\":2522,\"listed_count\":112,\"created_at\":\"Wed Jul 09 13:03:36 +0000 2014\",\"favourites_count\":5434,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":4584,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:30:46 +0000 2020\",\"id\":1336724984325173250,\"id_str\":\"1336724984325173250\",\"text\":\"@kyleve @JakeWharton We're pretty good at this \\ud83d\\udc4b Feel free to PM if you want to chat (even if it's about using some\\u2026 https:\\\/\\\/t.co\\\/19JZg04xWu\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kyleve\",\"name\":\"radical liberal kyle \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08\",\"id\":14680556,\"id_str\":\"14680556\",\"indices\":[0,7]},{\"screen_name\":\"JakeWharton\",\"name\":\"Jake Wharton\",\"id\":15221262,\"id_str\":\"15221262\",\"indices\":[8,20]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/19JZg04xWu\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336724984325173250\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336537854965501954,\"in_reply_to_status_id_str\":\"1336537854965501954\",\"in_reply_to_user_id\":14680556,\"in_reply_to_user_id_str\":\"14680556\",\"in_reply_to_screen_name\":\"kyleve\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1039432724120051712\\\/wFlFGsF3_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1039432724120051712\\\/wFlFGsF3_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2613554377\\\/1589452453\",\"profile_link_color\":\"760FC3\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3085052589,\"id_str\":\"3085052589\",\"name\":\"OpenIO\",\"screen_name\":\"openio\",\"location\":\"France, USA, Japan\",\"description\":\"Build hyper-scalable and high performance #ObjectStorage infrastructures that support S3.  #OpenSource #SoftwareDefinedStorage for #BigData & #AI.\",\"url\":\"https:\\\/\\\/t.co\\\/VAI04Bjy4A\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VAI04Bjy4A\",\"expanded_url\":\"https:\\\/\\\/www.openio.io\",\"display_url\":\"openio.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1797,\"friends_count\":639,\"listed_count\":109,\"created_at\":\"Tue Mar 10 23:03:16 +0000 2015\",\"favourites_count\":614,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1638,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 03 10:47:33 +0000 2020\",\"id\":1323577551130943489,\"id_str\":\"1323577551130943489\",\"text\":\"RT @cedricmourizard: Un gros focus sur GaiaX lors de la keynote d'ouverture de l'#EcosystemExperience par @OVHcloud ! Cela fait plaisir de\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"EcosystemExperience\",\"indices\":[81,101]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"cedricmourizard\",\"name\":\"C\\u00e9dric Mourizard\",\"id\":257643679,\"id_str\":\"257643679\",\"indices\":[3,19]},{\"screen_name\":\"OVHcloud\",\"name\":\"OVHcloud\",\"id\":317647291,\"id_str\":\"317647291\",\"indices\":[106,115]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Nov 03 09:24:54 +0000 2020\",\"id\":1323556749383782400,\"id_str\":\"1323556749383782400\",\"text\":\"Un gros focus sur GaiaX lors de la keynote d'ouverture de l'#EcosystemExperience par @OVHcloud ! Cela fait plaisir\\u2026 https:\\\/\\\/t.co\\\/yoN4Jl19A7\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"EcosystemExperience\",\"indices\":[60,80]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"OVHcloud\",\"name\":\"OVHcloud\",\"id\":317647291,\"id_str\":\"317647291\",\"indices\":[85,94]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yoN4Jl19A7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1323556749383782400\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1105172060320485376\\\/4hJxg-0G_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1105172060320485376\\\/4hJxg-0G_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3085052589\\\/1591629639\",\"profile_link_color\":\"FF1E1E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4818395709,\"id_str\":\"4818395709\",\"name\":\"Virginie de Galzain\",\"screen_name\":\"vdegalzain\",\"location\":\"Paris, France, Monde\",\"description\":\"Photographe, Journaliste, Responsable de projets 'Our lives begin to end the day we become silent about things that matter' MLK \\ud83d\\udd4a\\ufe0f\",\"url\":\"https:\\\/\\\/t.co\\\/pTpKz7PnHf\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pTpKz7PnHf\",\"expanded_url\":\"https:\\\/\\\/vdegalzainphoto.wordpress.com\",\"display_url\":\"vdegalzainphoto.wordpress.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":126,\"friends_count\":165,\"listed_count\":0,\"created_at\":\"Sat Jan 16 16:22:41 +0000 2016\",\"favourites_count\":649,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":518,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 21 08:33:40 +0000 2020\",\"id\":1330066838487699457,\"id_str\":\"1330066838487699457\",\"text\":\"RT @lemondefr: TRIBUNE | Nous n\\u2019accr\\u00e9diterons pas nos journalistes pour couvrir les manifestations https:\\\/\\\/t.co\\\/WfGF6Fmlwy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"lemondefr\",\"name\":\"Le Monde\",\"id\":24744541,\"id_str\":\"24744541\",\"indices\":[3,13]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WfGF6Fmlwy\",\"expanded_url\":\"https:\\\/\\\/www.lemonde.fr\\\/actualite-medias\\\/article\\\/2020\\\/11\\\/20\\\/nous-n-accrediterons-pas-nos-journalistes-pour-couvrir-les-manifestations_6060521_3236.html?utm_medium=Social&utm_source=Twitter#Echobox=1605878673\",\"display_url\":\"lemonde.fr\\\/actualite-medi\\u2026\",\"indices\":[99,122]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Nov 20 13:57:25 +0000 2020\",\"id\":1329785924385955842,\"id_str\":\"1329785924385955842\",\"text\":\"TRIBUNE | Nous n\\u2019accr\\u00e9diterons pas nos journalistes pour couvrir les manifestations https:\\\/\\\/t.co\\\/WfGF6Fmlwy\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WfGF6Fmlwy\",\"expanded_url\":\"https:\\\/\\\/www.lemonde.fr\\\/actualite-medias\\\/article\\\/2020\\\/11\\\/20\\\/nous-n-accrediterons-pas-nos-journalistes-pour-couvrir-les-manifestations_6060521_3236.html?utm_medium=Social&utm_source=Twitter#Echobox=1605878673\",\"display_url\":\"lemonde.fr\\\/actualite-medi\\u2026\",\"indices\":[84,107]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.echobox.com\\\" rel=\\\"nofollow\\\">Echobox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":116,\"favorite_count\":265,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":116,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/716547849547300865\\\/bPajt4zw_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/716547849547300865\\\/bPajt4zw_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4818395709\\\/1588152525\",\"profile_link_color\":\"E81C4F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1182729767109496833,\"id_str\":\"1182729767109496833\",\"name\":\"Elodie Cherup\",\"screen_name\":\"CherupElodie\",\"location\":\"\",\"description\":\"Joie de vie\\u2665\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":12,\"friends_count\":268,\"listed_count\":0,\"created_at\":\"Fri Oct 11 18:48:59 +0000 2019\",\"favourites_count\":1,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4,\"lang\":null,\"status\":{\"created_at\":\"Sun Oct 20 09:56:58 +0000 2019\",\"id\":1185857432175681536,\"id_str\":\"1185857432175681536\",\"text\":\"Cool\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1182731475973820416,\"in_reply_to_status_id_str\":\"1182731475973820416\",\"in_reply_to_user_id\":1182729767109496833,\"in_reply_to_user_id_str\":\"1182729767109496833\",\"in_reply_to_screen_name\":\"CherupElodie\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1182729889826381825\\\/XXeJfdcK_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1182729889826381825\\\/XXeJfdcK_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1082965457857142784,\"id_str\":\"1082965457857142784\",\"name\":\"Thomas Boys\",\"screen_name\":\"BoysThomas\",\"location\":\"\",\"description\":\"I find all those #maths things beautiful. \\nOpen sourcing topological machine learning at L2F and @giotto_ai\\n#opensource #datascience\\nEPFL, Lausanne Switzerland\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":275,\"friends_count\":904,\"listed_count\":3,\"created_at\":\"Wed Jan 09 11:41:00 +0000 2019\",\"favourites_count\":192,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":102,\"lang\":null,\"status\":{\"created_at\":\"Sat Jan 25 17:25:57 +0000 2020\",\"id\":1221122044089245696,\"id_str\":\"1221122044089245696\",\"text\":\"@jeremyphoward @HamelHusain @ProjectJupyter @github Looking forward to try this out!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"jeremyphoward\",\"name\":\"Jeremy Howard\",\"id\":175282603,\"id_str\":\"175282603\",\"indices\":[0,14]},{\"screen_name\":\"HamelHusain\",\"name\":\"Hamel Husain\",\"id\":825766640,\"id_str\":\"825766640\",\"indices\":[15,27]},{\"screen_name\":\"ProjectJupyter\",\"name\":\"Project Jupyter\",\"id\":2460368252,\"id_str\":\"2460368252\",\"indices\":[28,43]},{\"screen_name\":\"github\",\"name\":\"GitHub\",\"id\":13334762,\"id_str\":\"13334762\",\"indices\":[44,51]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1221085982876811264,\"in_reply_to_status_id_str\":\"1221085982876811264\",\"in_reply_to_user_id\":175282603,\"in_reply_to_user_id_str\":\"175282603\",\"in_reply_to_screen_name\":\"jeremyphoward\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179382090279862274\\\/nyyDJU8P_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1179382090279862274\\\/nyyDJU8P_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1082965457857142784\\\/1570367686\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1173553379144019969,\"id_str\":\"1173553379144019969\",\"name\":\"Kate Sweeney\",\"screen_name\":\"ElfSweeney\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":823,\"friends_count\":4233,\"listed_count\":0,\"created_at\":\"Mon Sep 16 11:05:48 +0000 2019\",\"favourites_count\":7,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7,\"lang\":null,\"status\":{\"created_at\":\"Sat Oct 03 05:18:09 +0000 2020\",\"id\":1312260630813069312,\"id_str\":\"1312260630813069312\",\"text\":\"RT @NzHentaii: #hentai #hentaicommunity @HentaiAngels @Carlos__Senpai1 @TokiRyu_United @Stoopendus3 @HentaiAdvisor @OppaiLov3r @Darling_Sam\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"hentai\",\"indices\":[15,22]},{\"text\":\"hentaicommunity\",\"indices\":[23,39]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NzHentaii\",\"name\":\"NzHentaii\\ud83d\\udd1e 5K\",\"id\":1074464431315316736,\"id_str\":\"1074464431315316736\",\"indices\":[3,13]},{\"screen_name\":\"HentaiAngels\",\"name\":\"Hentai Angels\",\"id\":2613843630,\"id_str\":\"2613843630\",\"indices\":[40,53]},{\"screen_name\":\"Carlos__Senpai1\",\"name\":\"\\ud83c\\udf84\\ud83c\\udf81Carlos-Senpai\\ud83c\\udf81\\ud83c\\udf84\",\"id\":4724573113,\"id_str\":\"4724573113\",\"indices\":[54,70]},{\"screen_name\":\"TokiRyu_United\",\"name\":\"\\u30a8\\u30ed\\u9b54\\u795e\\u738b\\u6027\\u5e1d(\\u8a89\\u308c\\u96bb\\u72fc\\u51a5\\u4eba\\uff09\\u3068\\u304d\\u308a\\u3085\\u30fc\\uff20\\u30e6\\u30ca\\u30a4\\u30c6\\u30c3\\u30c9\",\"id\":1206962444,\"id_str\":\"1206962444\",\"indices\":[71,86]},{\"screen_name\":\"Stoopendus3\",\"name\":\"\\ud83c\\udf84 Stoopy \\ud83c\\udf84\",\"id\":1026562244585422848,\"id_str\":\"1026562244585422848\",\"indices\":[87,99]},{\"screen_name\":\"HentaiAdvisor\",\"name\":\"LET'S F GOOOO \\ud83d\\udd1e 149K\",\"id\":782625087270719488,\"id_str\":\"782625087270719488\",\"indices\":[100,114]},{\"screen_name\":\"OppaiLov3r\",\"name\":\"Oppai Lover\",\"id\":1234045461037633536,\"id_str\":\"1234045461037633536\",\"indices\":[115,126]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Oct 03 05:08:09 +0000 2020\",\"id\":1312258114079645696,\"id_str\":\"1312258114079645696\",\"text\":\"#hentai #hentaicommunity @HentaiAngels @Carlos__Senpai1 @TokiRyu_United @Stoopendus3 @HentaiAdvisor @OppaiLov3r\\u2026 https:\\\/\\\/t.co\\\/PHR0jXQs1s\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"hentai\",\"indices\":[0,7]},{\"text\":\"hentaicommunity\",\"indices\":[8,24]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"HentaiAngels\",\"name\":\"Hentai Angels\",\"id\":2613843630,\"id_str\":\"2613843630\",\"indices\":[25,38]},{\"screen_name\":\"Carlos__Senpai1\",\"name\":\"\\ud83c\\udf84\\ud83c\\udf81Carlos-Senpai\\ud83c\\udf81\\ud83c\\udf84\",\"id\":4724573113,\"id_str\":\"4724573113\",\"indices\":[39,55]},{\"screen_name\":\"TokiRyu_United\",\"name\":\"\\u30a8\\u30ed\\u9b54\\u795e\\u738b\\u6027\\u5e1d(\\u8a89\\u308c\\u96bb\\u72fc\\u51a5\\u4eba\\uff09\\u3068\\u304d\\u308a\\u3085\\u30fc\\uff20\\u30e6\\u30ca\\u30a4\\u30c6\\u30c3\\u30c9\",\"id\":1206962444,\"id_str\":\"1206962444\",\"indices\":[56,71]},{\"screen_name\":\"Stoopendus3\",\"name\":\"\\ud83c\\udf84 Stoopy \\ud83c\\udf84\",\"id\":1026562244585422848,\"id_str\":\"1026562244585422848\",\"indices\":[72,84]},{\"screen_name\":\"HentaiAdvisor\",\"name\":\"LET'S F GOOOO \\ud83d\\udd1e 149K\",\"id\":782625087270719488,\"id_str\":\"782625087270719488\",\"indices\":[85,99]},{\"screen_name\":\"OppaiLov3r\",\"name\":\"Oppai Lover\",\"id\":1234045461037633536,\"id_str\":\"1234045461037633536\",\"indices\":[100,111]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PHR0jXQs1s\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1312258114079645696\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[113,136]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":16,\"favorite_count\":100,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"und\"},\"is_quote_status\":false,\"retweet_count\":16,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"und\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1177484897536991232\\\/3ix3Clfr_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1177484897536991232\\\/3ix3Clfr_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2315560538,\"id_str\":\"2315560538\",\"name\":\"WikiPME\",\"screen_name\":\"WikiPME\",\"location\":\"France\",\"description\":\"#WikiPME: la communaut\\u00e9 #num\\u00e9rique \\\/ #collaborative des #entrepreneurs de France. R\\u00e9f\\u00e9rencez gratuitement votre entreprise et trouvez du business\\\/des r\\u00e9ponses..\",\"url\":\"https:\\\/\\\/t.co\\\/3XxrQaezAS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3XxrQaezAS\",\"expanded_url\":\"http:\\\/\\\/www.wikipme.fr\\\/\",\"display_url\":\"wikipme.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7394,\"friends_count\":5148,\"listed_count\":461,\"created_at\":\"Tue Jan 28 14:11:16 +0000 2014\",\"favourites_count\":2770,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":5811,\"lang\":null,\"status\":{\"created_at\":\"Sat Apr 25 18:55:28 +0000 2020\",\"id\":1254121869785149441,\"id_str\":\"1254121869785149441\",\"text\":\"Our biggest fans this week: Advimotion_Fr, RahoufZang. Thank you! via https:\\\/\\\/t.co\\\/5ZUF5xB61a https:\\\/\\\/t.co\\\/y1VJLm57OS\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/5ZUF5xB61a\",\"expanded_url\":\"https:\\\/\\\/sumall.com\\\/thankyou?utm_source=twitter&utm_medium=publishing&utm_campaign=thank_you_tweet&utm_content=text_and_media&utm_term=5efc097547b3067163c25e0d\",\"display_url\":\"sumall.com\\\/thankyou?utm_s\\u2026\",\"indices\":[70,93]}],\"media\":[{\"id\":1254121867692191745,\"id_str\":\"1254121867692191745\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EWeJMazXsAEdWwA.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EWeJMazXsAEdWwA.png\",\"url\":\"https:\\\/\\\/t.co\\\/y1VJLm57OS\",\"display_url\":\"pic.twitter.com\\\/y1VJLm57OS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/WikiPME\\\/status\\\/1254121869785149441\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":756,\"h\":378,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":340,\"resize\":\"fit\"},\"medium\":{\"w\":756,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1254121867692191745,\"id_str\":\"1254121867692191745\",\"indices\":[94,117],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EWeJMazXsAEdWwA.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EWeJMazXsAEdWwA.png\",\"url\":\"https:\\\/\\\/t.co\\\/y1VJLm57OS\",\"display_url\":\"pic.twitter.com\\\/y1VJLm57OS\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/WikiPME\\\/status\\\/1254121869785149441\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":756,\"h\":378,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":340,\"resize\":\"fit\"},\"medium\":{\"w\":756,\"h\":378,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/sumall.com\\\/\\\" rel=\\\"nofollow\\\">SumAll<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1099984674150060032\\\/3kF6Ub3Y_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1099984674150060032\\\/3kF6Ub3Y_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2315560538\\\/1549900735\",\"profile_link_color\":\"E81C4F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1182064450863546369,\"id_str\":\"1182064450863546369\",\"name\":\"V\\u00e9ronique duchat\",\"screen_name\":\"Vroniqueduchat2\",\"location\":\"\",\"description\":\"Je suis v\\u00e9ronique je vie en France  dans la ville de Quimper je suis disponible  \\u00e0 tout le monde merci\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":23,\"friends_count\":538,\"listed_count\":0,\"created_at\":\"Wed Oct 09 22:45:18 +0000 2019\",\"favourites_count\":48,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3,\"lang\":null,\"status\":{\"created_at\":\"Thu Oct 10 07:01:21 +0000 2019\",\"id\":1182189359086362625,\"id_str\":\"1182189359086362625\",\"text\":\"Je suis disponible \\u00e0 tout le monde out discuter  je vous remercie\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1182188367561269248\\\/CBT8Ycne_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1182188367561269248\\\/CBT8Ycne_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":86322705,\"id_str\":\"86322705\",\"name\":\"Gordon McMahon\",\"screen_name\":\"gordonmcmahon\",\"location\":\"Scotland\",\"description\":\"Agile software engineer\",\"url\":\"http:\\\/\\\/t.co\\\/eoUdpBNKyi\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/eoUdpBNKyi\",\"expanded_url\":\"http:\\\/\\\/www.gordonmcmahon.com\",\"display_url\":\"gordonmcmahon.com\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":524,\"friends_count\":719,\"listed_count\":30,\"created_at\":\"Fri Oct 30 14:22:57 +0000 2009\",\"favourites_count\":13147,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7768,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:30:00 +0000 2020\",\"id\":1336754992397561856,\"id_str\":\"1336754992397561856\",\"text\":\"RT @mc_hankins: UK: Can we have our cake &amp; eat it\\n\\nEU: No\\n\\nUK: Can we though\\n\\nEU: No\\n\\nUK: Can we have our cake\\n\\nEU: Maybe\\n\\nUK: And eat it\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mc_hankins\",\"name\":\"Matthew Hankins\",\"id\":298729878,\"id_str\":\"298729878\",\"indices\":[3,14]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 11:30:04 +0000 2020\",\"id\":1336271824112541697,\"id_str\":\"1336271824112541697\",\"text\":\"UK: Can we have our cake &amp; eat it\\n\\nEU: No\\n\\nUK: Can we though\\n\\nEU: No\\n\\nUK: Can we have our cake\\n\\nEU: Maybe\\n\\nUK: And\\u2026 https:\\\/\\\/t.co\\\/JE2viqItTO\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/JE2viqItTO\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336271824112541697\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[120,143]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1015,\"favorite_count\":4775,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1015,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1140561307\\\/me_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1140561307\\\/me_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17306697,\"id_str\":\"17306697\",\"name\":\"Michael Law\",\"screen_name\":\"MrNumbers\",\"location\":\"Great Missenden, South East\",\"description\":\"Classic pianist, eclectic complexitist, emergent agilist.  Views are evolving.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":138,\"friends_count\":223,\"listed_count\":5,\"created_at\":\"Tue Nov 11 09:29:23 +0000 2008\",\"favourites_count\":582,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1177,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 23 22:23:07 +0000 2020\",\"id\":1331000353454780418,\"id_str\":\"1331000353454780418\",\"text\":\"RT @kathryniveyy: How it started             How it's going https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"kathryniveyy\",\"name\":\"kathedrals\\ud83c\\uddfa\\ud83c\\uddf8\",\"id\":462499006,\"id_str\":\"462499006\",\"indices\":[3,16]}],\"urls\":[],\"media\":[{\"id\":1330607846434754561,\"id_str\":\"1330607846434754561\",\"indices\":[60,83],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":960,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":544,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1440,\"h\":1800,\"resize\":\"fit\"}},\"source_status_id\":1330607852524867587,\"source_status_id_str\":\"1330607852524867587\",\"source_user_id\":462499006,\"source_user_id_str\":\"462499006\"}]},\"extended_entities\":{\"media\":[{\"id\":1330607846434754561,\"id_str\":\"1330607846434754561\",\"indices\":[60,83],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":960,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":544,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1440,\"h\":1800,\"resize\":\"fit\"}},\"source_status_id\":1330607852524867587,\"source_status_id_str\":\"1330607852524867587\",\"source_user_id\":462499006,\"source_user_id_str\":\"462499006\"},{\"id\":1330607846426365957,\"id_str\":\"1330607846426365957\",\"indices\":[60,83],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVWXUAUX05k.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVWXUAUX05k.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":511,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1538,\"h\":2048,\"resize\":\"fit\"},\"medium\":{\"w\":901,\"h\":1200,\"resize\":\"fit\"}},\"source_status_id\":1330607852524867587,\"source_status_id_str\":\"1330607852524867587\",\"source_user_id\":462499006,\"source_user_id_str\":\"462499006\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Nov 22 20:23:28 +0000 2020\",\"id\":1330607852524867587,\"id_str\":\"1330607852524867587\",\"text\":\"How it started             How it's going https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1330607846434754561,\"id_str\":\"1330607846434754561\",\"indices\":[42,65],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":960,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":544,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1440,\"h\":1800,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1330607846434754561,\"id_str\":\"1330607846434754561\",\"indices\":[42,65],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVYXUAEX89X.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":960,\"h\":1200,\"resize\":\"fit\"},\"small\":{\"w\":544,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1440,\"h\":1800,\"resize\":\"fit\"}}},{\"id\":1330607846426365957,\"id_str\":\"1330607846426365957\",\"indices\":[42,65],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVWXUAUX05k.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EndEyVWXUAUX05k.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/cg32Tu7v0B\",\"display_url\":\"pic.twitter.com\\\/cg32Tu7v0B\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/kathryniveyy\\\/status\\\/1330607852524867587\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":511,\"h\":680,\"resize\":\"fit\"},\"large\":{\"w\":1538,\"h\":2048,\"resize\":\"fit\"},\"medium\":{\"w\":901,\"h\":1200,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":78217,\"favorite_count\":974321,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":78217,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/864361076\\\/IMG_0062_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/864361076\\\/IMG_0062_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17306697\\\/1507387539\",\"profile_link_color\":\"2FC2EF\",\"profile_sidebar_border_color\":\"181A1E\",\"profile_sidebar_fill_color\":\"252429\",\"profile_text_color\":\"666666\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":855403110411509761,\"id_str\":\"855403110411509761\",\"name\":\"Lunatech France\",\"screen_name\":\"LunatechFR\",\"location\":\"Ile-de-France, France\",\"description\":\"D\\u00e9veloppement Scala et Java \\ud83c\\uddf3\\ud83c\\uddf1@LunatechLabs compte anglophone, branche NL\",\"url\":\"https:\\\/\\\/t.co\\\/q9tuSnI4r5\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/q9tuSnI4r5\",\"expanded_url\":\"https:\\\/\\\/www.lunatech.fr\",\"display_url\":\"lunatech.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":389,\"friends_count\":346,\"listed_count\":3,\"created_at\":\"Fri Apr 21 12:49:28 +0000 2017\",\"favourites_count\":959,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":827,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 24 07:39:15 +0000 2020\",\"id\":1331140308843819011,\"id_str\":\"1331140308843819011\",\"text\":\"RT @QuarkusIO: \\u23f0 Starting soon! Join us for Quarkus Insights, Ep. 28! Antonio Goncalves (@agoncal) is here to discuss his two new books; \\\"U\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"QuarkusIO\",\"name\":\"QuarkusIO\",\"id\":1096080721930846208,\"id_str\":\"1096080721930846208\",\"indices\":[3,13]},{\"screen_name\":\"agoncal\",\"name\":\"Antonio Goncalves\",\"id\":46473269,\"id_str\":\"46473269\",\"indices\":[89,97]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Nov 23 13:50:00 +0000 2020\",\"id\":1330871221508997123,\"id_str\":\"1330871221508997123\",\"text\":\"\\u23f0 Starting soon! Join us for Quarkus Insights, Ep. 28! Antonio Goncalves (@agoncal) is here to discuss his two new\\u2026 https:\\\/\\\/t.co\\\/hASSTgcEdK\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"agoncal\",\"name\":\"Antonio Goncalves\",\"id\":46473269,\"id_str\":\"46473269\",\"indices\":[74,82]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hASSTgcEdK\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1330871221508997123\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":11,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1227275111193104384\\\/rxPBwTa9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1227275111193104384\\\/rxPBwTa9_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/855403110411509761\\\/1555505639\",\"profile_link_color\":\"EA212E\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":909831117695520768,\"id_str\":\"909831117695520768\",\"name\":\"E3;D5\",\"screen_name\":\"e3d5_fr\",\"location\":\"Lyon et Paris\",\"description\":\"Je fais passer vos \\u00e9quipes et vos projets au niveau sup\\u00e9rieur.\\nVenez en discuter : https:\\\/\\\/t.co\\\/5KzT40kHmS\",\"url\":\"https:\\\/\\\/t.co\\\/vHEjieIQM0\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vHEjieIQM0\",\"expanded_url\":\"https:\\\/\\\/e3d5.fr\\\/\",\"display_url\":\"e3d5.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/5KzT40kHmS\",\"expanded_url\":\"https:\\\/\\\/e3d5.fr\",\"display_url\":\"e3d5.fr\",\"indices\":[83,106]}]}},\"protected\":false,\"followers_count\":462,\"friends_count\":513,\"listed_count\":10,\"created_at\":\"Mon Sep 18 17:26:57 +0000 2017\",\"favourites_count\":198,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":987,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 14:33:51 +0000 2020\",\"id\":1334506137488658434,\"id_str\":\"1334506137488658434\",\"text\":\"@FredBouchery Quand je regarde, j'ai du mal \\u00e0 reconnaitre mon bon vieux PHP quand m\\u00eame l\\u00e0\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"FredBouchery\",\"name\":\"Fr\\u00e9d\\u00e9ric Bouchery\",\"id\":2188650084,\"id_str\":\"2188650084\",\"indices\":[0,13]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1334505496250884099,\"in_reply_to_status_id_str\":\"1334505496250884099\",\"in_reply_to_user_id\":2188650084,\"in_reply_to_user_id_str\":\"2188650084\",\"in_reply_to_screen_name\":\"FredBouchery\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/911292373031845888\\\/Xah5z9rZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/911292373031845888\\\/Xah5z9rZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/909831117695520768\\\/1506104052\",\"profile_link_color\":\"010B4A\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1049203912937545728,\"id_str\":\"1049203912937545728\",\"name\":\"NeuroClastic #iDISSENT #noncompliant #resist\",\"screen_name\":\"NeuroClastic\",\"location\":\"The Cosmos\",\"description\":\"#iStandWithNonSpeakers #AllAutistics- Bringing you #ActuallyAutistic voices. https:\\\/\\\/t.co\\\/0IKgMV4n7X\",\"url\":\"https:\\\/\\\/t.co\\\/z3782ZrQ83\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/z3782ZrQ83\",\"expanded_url\":\"http:\\\/\\\/www.neuroclastic.org\",\"display_url\":\"neuroclastic.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0IKgMV4n7X\",\"expanded_url\":\"http:\\\/\\\/ko-fi.com\\\/NeuroClastic\",\"display_url\":\"ko-fi.com\\\/NeuroClastic\",\"indices\":[77,100]}]}},\"protected\":false,\"followers_count\":6703,\"friends_count\":2719,\"listed_count\":61,\"created_at\":\"Mon Oct 08 07:44:40 +0000 2018\",\"favourites_count\":24011,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":11113,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:47:17 +0000 2020\",\"id\":1336774442706489345,\"id_str\":\"1336774442706489345\",\"text\":\"@quixotismic hahahaha yes!!! \\n\\nSolidarity\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"quixotismic\",\"name\":\"Quixotismic\",\"id\":1287705205954555904,\"id_str\":\"1287705205954555904\",\"indices\":[0,12]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336676774881726464,\"in_reply_to_status_id_str\":\"1336676774881726464\",\"in_reply_to_user_id\":1287705205954555904,\"in_reply_to_user_id_str\":\"1287705205954555904\",\"in_reply_to_screen_name\":\"quixotismic\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"tl\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320843078794727424\\\/vh1ypfhs_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1320843078794727424\\\/vh1ypfhs_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1049203912937545728\\\/1605919925\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1151358338279493632,\"id_str\":\"1151358338279493632\",\"name\":\"Jala.io\",\"screen_name\":\"jala_impact\",\"location\":\"\",\"description\":\"Creating verifiable social and environmental impact to achieve thriveable development goals\",\"url\":\"https:\\\/\\\/t.co\\\/TpMFlaaDgf\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TpMFlaaDgf\",\"expanded_url\":\"http:\\\/\\\/jala.io\",\"display_url\":\"jala.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":174,\"friends_count\":120,\"listed_count\":3,\"created_at\":\"Wed Jul 17 05:09:53 +0000 2019\",\"favourites_count\":847,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":219,\"lang\":null,\"status\":{\"created_at\":\"Wed Oct 28 10:02:23 +0000 2020\",\"id\":1321391855330750464,\"id_str\":\"1321391855330750464\",\"text\":\"@NurtureGirl Yes. We so much want to have achieved whatever it is we aim at...\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NurtureGirl\",\"name\":\"Jean M Russell\",\"id\":5952302,\"id_str\":\"5952302\",\"indices\":[0,12]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1321087624082345984,\"in_reply_to_status_id_str\":\"1321087624082345984\",\"in_reply_to_user_id\":5952302,\"in_reply_to_user_id_str\":\"5952302\",\"in_reply_to_screen_name\":\"NurtureGirl\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1151358492134952960\\\/FC5M8fgl_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1151358492134952960\\\/FC5M8fgl_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1048123084786610178,\"id_str\":\"1048123084786610178\",\"name\":\"Innovegic Solutions\",\"screen_name\":\"innovegic\",\"location\":\"India, UK, USA, CANADA, AUS\",\"description\":\"We are fastest growing #Web & #MobileAppDevelopment company, serving diversified industries worldwide #AppDevelopment #Website, #Software & #eCommerce.\",\"url\":\"https:\\\/\\\/t.co\\\/GDDtysHArG\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GDDtysHArG\",\"expanded_url\":\"http:\\\/\\\/www.innovegicsolutions.com\",\"display_url\":\"innovegicsolutions.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":983,\"friends_count\":4464,\"listed_count\":5,\"created_at\":\"Fri Oct 05 08:09:51 +0000 2018\",\"favourites_count\":734,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":555,\"lang\":null,\"status\":{\"created_at\":\"Sat Jan 04 11:09:39 +0000 2020\",\"id\":1213417199773179904,\"id_str\":\"1213417199773179904\",\"text\":\"#AngularJS is an open source single #webapplication Development framework, scripted Of JavaScript &amp; creating dynami\\u2026 https:\\\/\\\/t.co\\\/SKRJG2aavd\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"AngularJS\",\"indices\":[0,10]},{\"text\":\"webapplication\",\"indices\":[36,51]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SKRJG2aavd\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1213417199773179904\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[121,144]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":4,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1174292554373664769\\\/ePchNp6M_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1174292554373664769\\\/ePchNp6M_normal.png\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1048123084786610178\\\/1571401756\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":90328698,\"id_str\":\"90328698\",\"name\":\"GreatDragonian\",\"screen_name\":\"GreatDragonian\",\"location\":\"Mexico DF\",\"description\":\"I like gradients: arts to sciences, boxing to dancing, physics to metaphysics... Love the sea and the Earth. Hate categorizing but not so good at avoiding it\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":178,\"friends_count\":678,\"listed_count\":3,\"created_at\":\"Mon Nov 16 05:02:42 +0000 2009\",\"favourites_count\":7463,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":426,\"lang\":null,\"status\":{\"created_at\":\"Sun Oct 11 19:16:37 +0000 2020\",\"id\":1315370738937991169,\"id_str\":\"1315370738937991169\",\"text\":\"US: FDA (Food and Drug Administration of the United States of America): Stop Using Sharks in COVID-19 vaccine - Use\\u2026 https:\\\/\\\/t.co\\\/jnUDNIe2W9\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jnUDNIe2W9\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1315370738937991169\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"CCD8AD\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1026055276103786496\\\/2fqPNuUf_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1026055276103786496\\\/2fqPNuUf_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/90328698\\\/1522975989\",\"profile_link_color\":\"B40404\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1169179324664205313,\"id_str\":\"1169179324664205313\",\"name\":\"Beautiful News Daily\",\"screen_name\":\"beautiful__news\",\"location\":\"\",\"description\":\"unseen trends, uplifting stats, creative solutions - a chart a day from @infobeautiful. Launched Oct 2019. Sign up for weekly emails: https:\\\/\\\/t.co\\\/mM60E0com1\",\"url\":\"https:\\\/\\\/t.co\\\/KB4B6mqO51\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/KB4B6mqO51\",\"expanded_url\":\"http:\\\/\\\/www.informationisbeautiful.net\\\/beautifulnews\",\"display_url\":\"informationisbeautiful.net\\\/beautifulnews\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/mM60E0com1\",\"expanded_url\":\"http:\\\/\\\/eepurl.com\\\/gEYMBL\",\"display_url\":\"eepurl.com\\\/gEYMBL\",\"indices\":[134,157]}]}},\"protected\":false,\"followers_count\":17804,\"friends_count\":6303,\"listed_count\":236,\"created_at\":\"Wed Sep 04 09:24:25 +0000 2019\",\"favourites_count\":500,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":503,\"lang\":null,\"status\":{\"created_at\":\"Wed Oct 21 10:28:42 +0000 2020\",\"id\":1318861765069987840,\"id_str\":\"1318861765069987840\",\"text\":\"@posiarc1 Feel free to drop us a line via our website with some details of what you had in mind &amp; we'll be sure to\\u2026 https:\\\/\\\/t.co\\\/ZE3TL3J6sy\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"posiarc1\",\"name\":\"posiarc\",\"id\":1203888700892925952,\"id_str\":\"1203888700892925952\",\"indices\":[0,9]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZE3TL3J6sy\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1318861765069987840\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[120,143]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1318779370056470528,\"in_reply_to_status_id_str\":\"1318779370056470528\",\"in_reply_to_user_id\":1203888700892925952,\"in_reply_to_user_id_str\":\"1203888700892925952\",\"in_reply_to_screen_name\":\"posiarc1\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1178970547318935553\\\/QloQMegG_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1178970547318935553\\\/QloQMegG_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1169179324664205313\\\/1570624396\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":19535657,\"id_str\":\"19535657\",\"name\":\"Ma\\u00eblle Fouquenet\",\"screen_name\":\"mfouquenet\",\"location\":\"Paris, France\",\"description\":\"Journaliste en formation data analyst, ex. resp. numerique @ESJPRO, ex presse conso, presse locale. Algo, transparence. Artic, Berlin, freediving & lindyhop\",\"url\":\"https:\\\/\\\/t.co\\\/SDnWee48UL\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SDnWee48UL\",\"expanded_url\":\"https:\\\/\\\/mfouquenet.medium.com\\\/\",\"display_url\":\"mfouquenet.medium.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4290,\"friends_count\":3709,\"listed_count\":402,\"created_at\":\"Mon Jan 26 14:15:04 +0000 2009\",\"favourites_count\":1764,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":75123,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:08:50 +0000 2020\",\"id\":1336794965775699973,\"id_str\":\"1336794965775699973\",\"text\":\"RT @NewYorkStateAG: Today\\u2019s suit should send a clear message to Facebook and every other company:\\n \\nEfforts to stifle competition, reduce i\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NewYorkStateAG\",\"name\":\"NY AG James\",\"id\":132496568,\"id_str\":\"132496568\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 19:30:58 +0000 2020\",\"id\":1336755234220077056,\"id_str\":\"1336755234220077056\",\"text\":\"Today\\u2019s suit should send a clear message to Facebook and every other company:\\n \\nEfforts to stifle competition, redu\\u2026 https:\\\/\\\/t.co\\\/ElGhLe2rg2\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ElGhLe2rg2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336755234220077056\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336755233075171330,\"in_reply_to_status_id_str\":\"1336755233075171330\",\"in_reply_to_user_id\":132496568,\"in_reply_to_user_id_str\":\"132496568\",\"in_reply_to_screen_name\":\"NewYorkStateAG\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":683,\"favorite_count\":4479,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":683,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973236090365792257\\\/d8W4tgdt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/973236090365792257\\\/d8W4tgdt_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/19535657\\\/1354128915\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":956984602245156864,\"id_str\":\"956984602245156864\",\"name\":\"Gal Bashan\",\"screen_name\":\"BashanGal\",\"location\":\"Tel Aviv, Israel\",\"description\":\"Software researcher & developer. #Unix professional & #serverless enthusiasts @epsagon. Views are my own.\",\"url\":\"https:\\\/\\\/t.co\\\/T9zRAOBg7W\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/T9zRAOBg7W\",\"expanded_url\":\"https:\\\/\\\/medium.com\\\/@galbashan1\",\"display_url\":\"medium.com\\\/@galbashan1\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":6841,\"friends_count\":5517,\"listed_count\":63,\"created_at\":\"Fri Jan 26 20:18:03 +0000 2018\",\"favourites_count\":2716,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1127,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 20:34:40 +0000 2020\",\"id\":1334234552454307840,\"id_str\":\"1334234552454307840\",\"text\":\"RT @chrismunns: 1ms billing increments for @awscloud #Lambda #serverless #reInvent2020\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Lambda\",\"indices\":[53,60]},{\"text\":\"serverless\",\"indices\":[61,72]},{\"text\":\"reInvent2020\",\"indices\":[73,86]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"chrismunns\",\"name\":\"Chris Munns\",\"id\":16364966,\"id_str\":\"16364966\",\"indices\":[3,14]},{\"screen_name\":\"awscloud\",\"name\":\"Amazon Web Services\",\"id\":66780587,\"id_str\":\"66780587\",\"indices\":[43,52]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 01 16:50:40 +0000 2020\",\"id\":1333815790752108547,\"id_str\":\"1333815790752108547\",\"text\":\"1ms billing increments for @awscloud #Lambda #serverless #reInvent2020\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Lambda\",\"indices\":[37,44]},{\"text\":\"serverless\",\"indices\":[45,56]},{\"text\":\"reInvent2020\",\"indices\":[57,70]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"awscloud\",\"name\":\"Amazon Web Services\",\"id\":66780587,\"id_str\":\"66780587\",\"indices\":[27,36]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":13,\"favorite_count\":40,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":13,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/958471908563083266\\\/06kNA9OU_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/958471908563083266\\\/06kNA9OU_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/956984602245156864\\\/1555496509\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":274381519,\"id_str\":\"274381519\",\"name\":\"Biruk Tadesse\",\"screen_name\":\"biruk_ta\",\"location\":\"Addis Ababa\",\"description\":\"In search for the bigining of time.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1133,\"friends_count\":4998,\"listed_count\":1,\"created_at\":\"Wed Mar 30 06:30:34 +0000 2011\",\"favourites_count\":5018,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":702,\"lang\":null,\"status\":{\"created_at\":\"Sat Nov 14 17:53:10 +0000 2020\",\"id\":1327670926578757632,\"id_str\":\"1327670926578757632\",\"text\":\"@bettydawetty That was effective \\ud83e\\udd23\\ud83d\\ude0e\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"bettydawetty\",\"name\":\"\\u1262\\u1273\\u1295\\u12eb\",\"id\":1214671155216318464,\"id_str\":\"1214671155216318464\",\"indices\":[0,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1327666732304011264,\"in_reply_to_status_id_str\":\"1327666732304011264\",\"in_reply_to_user_id\":1214671155216318464,\"in_reply_to_user_id_str\":\"1214671155216318464\",\"in_reply_to_screen_name\":\"bettydawetty\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325880573123031050\\\/bxxWdhv9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1325880573123031050\\\/bxxWdhv9_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/274381519\\\/1573044290\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1139704461587148801,\"id_str\":\"1139704461587148801\",\"name\":\"Josh Howard\",\"screen_name\":\"LearnJoshLearn\",\"location\":\"Nimbin, Australia \",\"description\":\"Teach Maths and ProBL in NIMBIN. Dad. \\u2018going meta\\u2019. Game B. Opinions my own.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":365,\"friends_count\":679,\"listed_count\":4,\"created_at\":\"Sat Jun 15 01:21:33 +0000 2019\",\"favourites_count\":1680,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":664,\"lang\":null,\"status\":{\"created_at\":\"Mon Aug 24 08:22:37 +0000 2020\",\"id\":1297811536254136321,\"id_str\":\"1297811536254136321\",\"text\":\"RT @Was_geht_man: Scott Morrison REFUSES to explain a $4million 'grace' payment made a day before calling an election\\u00a0#auspol  https:\\\/\\\/t.co\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"auspol\",\"indices\":[118,125]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Was_geht_man\",\"name\":\"\\ud83e\\ude78\\ud83d\\udd25\\ud83d\\udca7\\ud83c\\udfc9 CORRUPTOCRACY\",\"id\":408395872,\"id_str\":\"408395872\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sat Aug 22 04:24:08 +0000 2020\",\"id\":1297026746588463104,\"id_str\":\"1297026746588463104\",\"text\":\"Scott Morrison REFUSES to explain a $4million 'grace' payment made a day before calling an election\\u00a0#auspol  https:\\\/\\\/t.co\\\/2hQLX6AkEl\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"auspol\",\"indices\":[100,107]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/2hQLX6AkEl\",\"expanded_url\":\"https:\\\/\\\/www.dailymail.co.uk\\\/news\\\/article-8098597\\\/Scott-Morrison-REFUSES-explain-4million-grace-payment-day-calling-election.html\",\"display_url\":\"dailymail.co.uk\\\/news\\\/article-8\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":17,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":11,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139704678185201664\\\/nFPI0NV6_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1139704678185201664\\\/nFPI0NV6_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1139704461587148801\\\/1560680868\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":15721984,\"id_str\":\"15721984\",\"name\":\"Lockpath by NAVEX Global\",\"screen_name\":\"Lockpath\",\"location\":\"Overland Park, KS\",\"description\":\"Lockpath connects people, processes and technology. See how @KeylightGRC makes a difference in corporate governance, risk management, compliance and IT security\",\"url\":\"https:\\\/\\\/t.co\\\/La8TV1oE6a\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/La8TV1oE6a\",\"expanded_url\":\"http:\\\/\\\/Lockpath.com\",\"display_url\":\"Lockpath.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":4132,\"friends_count\":4485,\"listed_count\":139,\"created_at\":\"Mon Aug 04 13:30:38 +0000 2008\",\"favourites_count\":4163,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":7440,\"lang\":null,\"status\":{\"created_at\":\"Mon Aug 31 13:36:02 +0000 2020\",\"id\":1300427125368000512,\"id_str\":\"1300427125368000512\",\"text\":\"Don't miss out on our future posts - follow us at @NAVEXGlobal! \\n\\nLockpath is a NAVEX Global product and we're MOVI\\u2026 https:\\\/\\\/t.co\\\/n5LB28lpZg\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"NAVEXGlobal\",\"name\":\"NAVEX Global\",\"id\":17936708,\"id_str\":\"17936708\",\"indices\":[50,62]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/n5LB28lpZg\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1300427125368000512\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/sproutsocial.com\\\" rel=\\\"nofollow\\\">Sprout Social<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/980821574784761858\\\/WcJ6Tp0P_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/980821574784761858\\\/WcJ6Tp0P_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/15721984\\\/1522681085\",\"profile_link_color\":\"87BC00\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":974153612170424320,\"id_str\":\"974153612170424320\",\"name\":\"Alison Oliver\",\"screen_name\":\"alison_iot\",\"location\":\"California, USA\",\"description\":\"#IoT Innovator, #Tech Idea Agent, Life-long Learner. Connecting the World, One Thing at a Time. #Iowa Girl! #IoE #IIoT #BigData #PredictiveAnalytics\",\"url\":\"https:\\\/\\\/t.co\\\/l8qpXn9ZRL\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/l8qpXn9ZRL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/@alison_iot\",\"display_url\":\"twitter.com\\\/@alison_iot\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":19449,\"friends_count\":12947,\"listed_count\":173,\"created_at\":\"Thu Mar 15 05:21:34 +0000 2018\",\"favourites_count\":7449,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":40519,\"lang\":null,\"status\":{\"created_at\":\"Mon Nov 16 20:36:28 +0000 2020\",\"id\":1328436799371235331,\"id_str\":\"1328436799371235331\",\"text\":\"RT @Social_Molly: Ford plans 5 new electric cars for Canadian production, union leader says - Roadshow: #AI #IoT #BigData MT: @mikequindazz\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"AI\",\"indices\":[104,107]},{\"text\":\"IoT\",\"indices\":[108,112]},{\"text\":\"BigData\",\"indices\":[113,121]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Social_Molly\",\"name\":\"Molly King\",\"id\":974144123480494080,\"id_str\":\"974144123480494080\",\"indices\":[3,16]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Nov 16 03:19:20 +0000 2020\",\"id\":1328175793164443650,\"id_str\":\"1328175793164443650\",\"text\":\"Ford plans 5 new electric cars for Canadian production, union leader says - Roadshow: #AI #IoT #BigData MT:\\u2026 https:\\\/\\\/t.co\\\/O9N3NnDKh7\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"AI\",\"indices\":[86,89]},{\"text\":\"IoT\",\"indices\":[90,94]},{\"text\":\"BigData\",\"indices\":[95,103]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/O9N3NnDKh7\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1328175793164443650\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":5,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/985621665118797824\\\/3ATfZ8e1_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/985621665118797824\\\/3ATfZ8e1_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/974153612170424320\\\/1581817693\",\"profile_link_color\":\"F58EA8\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":5614412,\"id_str\":\"5614412\",\"name\":\"myk is more of a question than a comment\",\"screen_name\":\"mykola\",\"location\":\"Brooklyn\",\"description\":\"It\\u2019s a long long way to Ba Sing Se \\ud83c\\udfb6\",\"url\":\"https:\\\/\\\/t.co\\\/N9yLzVeDsp\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/N9yLzVeDsp\",\"expanded_url\":\"https:\\\/\\\/myk.af\",\"display_url\":\"myk.af\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":9632,\"friends_count\":2298,\"listed_count\":203,\"created_at\":\"Sat Apr 28 22:42:47 +0000 2007\",\"favourites_count\":74064,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":91723,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 19:52:20 +0000 2020\",\"id\":1336760611775143936,\"id_str\":\"1336760611775143936\",\"text\":\"@Richard_Autism @ekverstania at your leisure, sir! :)\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Richard_Autism\",\"name\":\"Richard Woods\",\"id\":919240147048321024,\"id_str\":\"919240147048321024\",\"indices\":[0,15]},{\"screen_name\":\"ekverstania\",\"name\":\"Tania \\ud83c\\uddff\\ud83c\\udde6 Autistic Strategies Network\",\"id\":17630756,\"id_str\":\"17630756\",\"indices\":[16,28]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336760492426227723,\"in_reply_to_status_id_str\":\"1336760492426227723\",\"in_reply_to_user_id\":919240147048321024,\"in_reply_to_user_id_str\":\"919240147048321024\",\"in_reply_to_screen_name\":\"Richard_Autism\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1072634761825452032\\\/4-HnkUcn_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1072634761825452032\\\/4-HnkUcn_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/5614412\\\/1573689936\",\"profile_link_color\":\"981CEB\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3406405169,\"id_str\":\"3406405169\",\"name\":\"wayne lewis\",\"screen_name\":\"waynelforBernie\",\"location\":\"\",\"description\":\"researcher, thinker on living systems, anticipation, evolutionary processes, collective intelligence and post capitalist ecconomics. #B  #NewCovenant\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2045,\"friends_count\":2495,\"listed_count\":158,\"created_at\":\"Fri Aug 07 00:36:46 +0000 2015\",\"favourites_count\":33764,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":44786,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:15:58 +0000 2020\",\"id\":1336781659073601538,\"id_str\":\"1336781659073601538\",\"text\":\"RT @vervaeke_john: https:\\\/\\\/t.co\\\/OABleT5eym\\n\\nJordan, Gregg and I discuss the dual nature of coherence:  it alludes to logical coherence and\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"vervaeke_john\",\"name\":\"John Vervaeke\",\"id\":1091451649074388992,\"id_str\":\"1091451649074388992\",\"indices\":[3,17]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OABleT5eym\",\"expanded_url\":\"https:\\\/\\\/www.youtube.com\\\/watch?v=x8NUQOFnNoA&feature=youtu.be\",\"display_url\":\"youtube.com\\\/watch?v=x8NUQO\\u2026\",\"indices\":[19,42]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 21:02:18 +0000 2020\",\"id\":1336778222286082055,\"id_str\":\"1336778222286082055\",\"text\":\"https:\\\/\\\/t.co\\\/OABleT5eym\\n\\nJordan, Gregg and I discuss the dual nature of coherence:  it alludes to logical coherence\\u2026 https:\\\/\\\/t.co\\\/pH2CPM7MmY\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/OABleT5eym\",\"expanded_url\":\"https:\\\/\\\/www.youtube.com\\\/watch?v=x8NUQOFnNoA&feature=youtu.be\",\"display_url\":\"youtube.com\\\/watch?v=x8NUQO\\u2026\",\"indices\":[0,23]},{\"url\":\"https:\\\/\\\/t.co\\\/pH2CPM7MmY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336778222286082055\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite Inc.<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856671972788498433\\\/VmYB44kZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/856671972788498433\\\/VmYB44kZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3406405169\\\/1459112915\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":62271218,\"id_str\":\"62271218\",\"name\":\"Commons Engine\",\"screen_name\":\"CommonsEngine\",\"location\":\"Global\",\"description\":\"For a thriving life economy. Distributed, equitable regenerative and ours #commons  #currency design- A sister project of @holochain\",\"url\":\"https:\\\/\\\/t.co\\\/UoxKymaZ5t\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UoxKymaZ5t\",\"expanded_url\":\"http:\\\/\\\/commonsengine.org\",\"display_url\":\"commonsengine.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2016,\"friends_count\":668,\"listed_count\":143,\"created_at\":\"Sun Aug 02 14:38:05 +0000 2009\",\"favourites_count\":2109,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":944,\"lang\":null,\"status\":{\"created_at\":\"Mon Dec 07 04:10:57 +0000 2020\",\"id\":1335798928776695808,\"id_str\":\"1335798928776695808\",\"text\":\"RT @emalinus4: Epic report on ontology as enabler\\\/inhibitor of commons-oriented practices (with lots of goodies about CE activities in ther\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"emalinus4\",\"name\":\"Emaline Friedman\",\"id\":899100288736296960,\"id_str\":\"899100288736296960\",\"indices\":[3,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 20:35:22 +0000 2020\",\"id\":1334597116623159297,\"id_str\":\"1334597116623159297\",\"text\":\"Epic report on ontology as enabler\\\/inhibitor of commons-oriented practices (with lots of goodies about CE activitie\\u2026 https:\\\/\\\/t.co\\\/vONZ7lLzdl\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vONZ7lLzdl\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334597116623159297\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1333471102845247495,\"quoted_status_id_str\":\"1333471102845247495\",\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":true,\"quoted_status_id\":1333471102845247495,\"quoted_status_id_str\":\"1333471102845247495\",\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1064635942516846593\\\/2XWI6htW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1064635942516846593\\\/2XWI6htW_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/62271218\\\/1482789680\",\"profile_link_color\":\"3D7F8D\",\"profile_sidebar_border_color\":\"118096\",\"profile_sidebar_fill_color\":\"151617\",\"profile_text_color\":\"03546B\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4298899343,\"id_str\":\"4298899343\",\"name\":\"Stepsize\",\"screen_name\":\"StepsizeHQ\",\"location\":\"London, England\",\"description\":\"Stepsize helps Engineering teams measure and prioritise technical debt. Integrates with your existing tools & workflows.\",\"url\":\"https:\\\/\\\/t.co\\\/aXEKWlUlFr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/aXEKWlUlFr\",\"expanded_url\":\"http:\\\/\\\/www.stepsize.com\",\"display_url\":\"stepsize.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":743,\"friends_count\":2028,\"listed_count\":16,\"created_at\":\"Fri Nov 27 18:32:36 +0000 2015\",\"favourites_count\":322,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":281,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 16:05:09 +0000 2020\",\"id\":1336703440190394371,\"id_str\":\"1336703440190394371\",\"text\":\"Who is a #technicaldebt hero in your company? Tag them in the comments \\ud83d\\udc47 https:\\\/\\\/t.co\\\/G0lTZ5IkET\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"technicaldebt\",\"indices\":[9,23]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1336703427968118784,\"id_str\":\"1336703427968118784\",\"indices\":[73,96],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eozsr4IWMAA8-3i.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eozsr4IWMAA8-3i.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/G0lTZ5IkET\",\"display_url\":\"pic.twitter.com\\\/G0lTZ5IkET\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/StepsizeHQ\\\/status\\\/1336703440190394371\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1177,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":391,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":690,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1336703427968118784,\"id_str\":\"1336703427968118784\",\"indices\":[73,96],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/Eozsr4IWMAA8-3i.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/Eozsr4IWMAA8-3i.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/G0lTZ5IkET\",\"display_url\":\"pic.twitter.com\\\/G0lTZ5IkET\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/StepsizeHQ\\\/status\\\/1336703440190394371\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":2048,\"h\":1177,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":391,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":690,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.hubspot.com\\\/\\\" rel=\\\"nofollow\\\">HubSpot<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1156187774023872512\\\/p704G7fH_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1156187774023872512\\\/p704G7fH_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4298899343\\\/1564490824\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":40476223,\"id_str\":\"40476223\",\"name\":\"Dave Wolf \\ud83e\\udde2\",\"screen_name\":\"Dave_Wolf\",\"location\":\"Dayton, Ohio\",\"description\":\"Working to leave the world a better place for having been in it.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":845,\"friends_count\":354,\"listed_count\":175,\"created_at\":\"Sat May 16 14:54:20 +0000 2009\",\"favourites_count\":4451,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":13060,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 14:53:57 +0000 2020\",\"id\":1336685522496991298,\"id_str\":\"1336685522496991298\",\"text\":\"RT @billy74919063: @accessjames @mistermichaelk But there are also existing useful technologies that for-profit factories cannot make feasi\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"billy74919063\",\"name\":\"Billy Smith\",\"id\":770565248411635712,\"id_str\":\"770565248411635712\",\"indices\":[3,17]},{\"screen_name\":\"accessjames\",\"name\":\"James Wallbank\",\"id\":381452460,\"id_str\":\"381452460\",\"indices\":[19,31]},{\"screen_name\":\"mistermichaelk\",\"name\":\"Mike\",\"id\":4885971434,\"id_str\":\"4885971434\",\"indices\":[32,47]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Mar 23 15:27:50 +0000 2020\",\"id\":1242110815827787778,\"id_str\":\"1242110815827787778\",\"text\":\"@accessjames @mistermichaelk But there are also existing useful technologies that for-profit factories cannot make\\u2026 https:\\\/\\\/t.co\\\/aD5GO6NsLF\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"accessjames\",\"name\":\"James Wallbank\",\"id\":381452460,\"id_str\":\"381452460\",\"indices\":[0,12]},{\"screen_name\":\"mistermichaelk\",\"name\":\"Mike\",\"id\":4885971434,\"id_str\":\"4885971434\",\"indices\":[13,28]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/aD5GO6NsLF\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1242110815827787778\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[116,139]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1242110407176851459,\"in_reply_to_status_id_str\":\"1242110407176851459\",\"in_reply_to_user_id\":770565248411635712,\"in_reply_to_user_id_str\":\"770565248411635712\",\"in_reply_to_screen_name\":\"billy74919063\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":1,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"352726\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme5\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/893141332402651137\\\/KKn1-8IV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/893141332402651137\\\/KKn1-8IV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/40476223\\\/1589245442\",\"profile_link_color\":\"312CCF\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":16325805,\"id_str\":\"16325805\",\"name\":\"Julio Holon\",\"screen_name\":\"JulioMonteiro\",\"location\":\"S\\u00e3o Paulo, Brasil\",\"description\":\"Deep mind and cryptocurrency hacker, working towards a more organic, decentralized, commons based, peer to peer society.\",\"url\":\"https:\\\/\\\/t.co\\\/LfQRyaQslF\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/LfQRyaQslF\",\"expanded_url\":\"http:\\\/\\\/holo.casa\",\"display_url\":\"holo.casa\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":594,\"friends_count\":1058,\"listed_count\":28,\"created_at\":\"Wed Sep 17 09:32:37 +0000 2008\",\"favourites_count\":4270,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":775,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 18:54:58 +0000 2020\",\"id\":1335296624269139981,\"id_str\":\"1335296624269139981\",\"text\":\"RT @joinseeds: Some cultures today plant 4\\ud83c\\udf31per hole\\n\\ud83c\\udf0e\\n\\ud83c\\udf31for the life that flies \\ud83d\\udc26\\n\\ud83c\\udf31for the life that crawls \\ud83d\\udc3f\\ufe0f\\n\\ud83c\\udf31for the life that walks (nei\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"joinseeds\",\"name\":\"SEEDS - Growing the #Regenerative #Renaissance\",\"id\":1133340665692037120,\"id_str\":\"1133340665692037120\",\"indices\":[3,13]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 10:37:57 +0000 2020\",\"id\":1334446769900453888,\"id_str\":\"1334446769900453888\",\"text\":\"Some cultures today plant 4\\ud83c\\udf31per hole\\n\\ud83c\\udf0e\\n\\ud83c\\udf31for the life that flies \\ud83d\\udc26\\n\\ud83c\\udf31for the life that crawls \\ud83d\\udc3f\\ufe0f\\n\\ud83c\\udf31for the life that w\\u2026 https:\\\/\\\/t.co\\\/Vpn5azGi0R\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Vpn5azGi0R\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334446769900453888\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"ACDED6\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme18\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/968838548542672896\\\/3gvpscoF_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/968838548542672896\\\/3gvpscoF_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/16325805\\\/1504232066\",\"profile_link_color\":\"038543\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"F6F6F6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":2506632583,\"id_str\":\"2506632583\",\"name\":\"Su-SAN\",\"screen_name\":\"enrichedbycode\",\"location\":\"Blackfoot Territory, Alberta\",\"description\":\"SOCIAL Information Architect @2RowFlow In DSS #LCS @BuckyFullerInst Artist, UX designer, LIVING systems thinker #SOCIALUX\",\"url\":\"https:\\\/\\\/t.co\\\/PelGnrDD0Y\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PelGnrDD0Y\",\"expanded_url\":\"https:\\\/\\\/www.2rowflow.com\",\"display_url\":\"2rowflow.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1138,\"friends_count\":3768,\"listed_count\":131,\"created_at\":\"Mon May 19 06:45:34 +0000 2014\",\"favourites_count\":4557,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":8006,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 03:56:15 +0000 2020\",\"id\":1335070453337976832,\"id_str\":\"1335070453337976832\",\"text\":\"RT @Ruth_HHopkins: \\u201cI am the People.\\u201d -Fred Hampton\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Ruth_HHopkins\",\"name\":\"Ruth H. Hopkins\",\"id\":26044686,\"id_str\":\"26044686\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 16:56:57 +0000 2020\",\"id\":1334904536708886528,\"id_str\":\"1334904536708886528\",\"text\":\"\\u201cI am the People.\\u201d -Fred Hampton\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":95,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276512539845619714\\\/SjplnI5o_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276512539845619714\\\/SjplnI5o_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/2506632583\\\/1606791472\",\"profile_link_color\":\"91D2FA\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1049943996917837826,\"id_str\":\"1049943996917837826\",\"name\":\"\\ud83c\\udf24\\ufe0f n\\u0334\\u034b\\u0344\\u0310\\u031f\\u0322a\\u0334\\u0360\\u0340\\u035d\\u031d\\u0356t\\u0335\\u034c\\u0344\\u0313\\u032a\\u0355\\u0326u\\u0335\\u0346\\u034b\\u035b\\u0326\\u032a\\u0353r\\u0335\\u0360\\u0351\\u035b\\u0359\\u034d\\u034de\\u0338\\u035d\\u0360\\u0355\\u033c\\u035c\",\"screen_name\":\"phoresced\",\"location\":\"Petone, Aotearoa\",\"description\":\"naomi \\ud83c\\udf3f tangata tiriti \\ud83d\\udc63 n\\u014d petone ahau \\ud83e\\udd5d culture evolution, networks, living systems, commons \\u26f5 permaculture design with digital landscapes \\ud83d\\udd78 DM for SSB ID\",\"url\":\"https:\\\/\\\/t.co\\\/qsRlWh3Scr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/qsRlWh3Scr\",\"expanded_url\":\"http:\\\/\\\/link.bar\\\/naomi\",\"display_url\":\"link.bar\\\/naomi\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":360,\"friends_count\":915,\"listed_count\":13,\"created_at\":\"Wed Oct 10 08:45:30 +0000 2018\",\"favourites_count\":2210,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":656,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 08:41:29 +0000 2020\",\"id\":1334779849521557505,\"id_str\":\"1334779849521557505\",\"text\":\"RT @RobbieNicol: Whenever I see new housing that looks good it\\u2019s a retirement home.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"RobbieNicol\",\"name\":\"Robbie\",\"id\":3193952887,\"id_str\":\"3193952887\",\"indices\":[3,15]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 23:35:47 +0000 2020\",\"id\":1334642516574961665,\"id_str\":\"1334642516574961665\",\"text\":\"Whenever I see new housing that looks good it\\u2019s a retirement home.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":238,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":12,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301692132629950464\\\/79so_aFy_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301692132629950464\\\/79so_aFy_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1049943996917837826\\\/1573250794\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1106673886538526720,\"id_str\":\"1106673886538526720\",\"name\":\"2 RowFlow Cultural Commons\",\"screen_name\":\"2RowFlow\",\"location\":\"Blackfoot Territory\",\"description\":\"Co-creating a Cultural Commons for ALL Treaty People in CA & US. An #AntiRACIST space for Indigenous\\\/Non-Indigenous Relations to Grow & Flow. Listen & Learn.\",\"url\":\"https:\\\/\\\/t.co\\\/PelGnrDD0Y\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/PelGnrDD0Y\",\"expanded_url\":\"https:\\\/\\\/www.2rowflow.com\",\"display_url\":\"2rowflow.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1401,\"friends_count\":3758,\"listed_count\":7,\"created_at\":\"Fri Mar 15 21:49:50 +0000 2019\",\"favourites_count\":9234,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":18651,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:11:34 +0000 2020\",\"id\":1336765451917959168,\"id_str\":\"1336765451917959168\",\"text\":\"URGENT. https:\\\/\\\/t.co\\\/ZTh58k0pbY\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ZTh58k0pbY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/1492LBL\\\/status\\\/1336748221029376000\",\"display_url\":\"twitter.com\\\/1492LBL\\\/status\\u2026\",\"indices\":[8,31]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336748221029376000,\"quoted_status_id_str\":\"1336748221029376000\",\"retweet_count\":1,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301005037443801089\\\/rDHU4DdX_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1301005037443801089\\\/rDHU4DdX_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1106673886538526720\\\/1590472819\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":113823447,\"id_str\":\"113823447\",\"name\":\"Siddharth Sthalekar\",\"screen_name\":\"SidSthalekar\",\"location\":\"Singapore\",\"description\":\"Economic infrastructure for a more expressive society. Finally getting active on Twitter. Ask me about the Reputation Economy. And @sacredcapital\",\"url\":\"https:\\\/\\\/t.co\\\/dhlDPcSczS\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/dhlDPcSczS\",\"expanded_url\":\"https:\\\/\\\/www.sacred.capital\",\"display_url\":\"sacred.capital\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":376,\"friends_count\":289,\"listed_count\":30,\"created_at\":\"Sat Feb 13 04:52:44 +0000 2010\",\"favourites_count\":500,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":221,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 08:46:41 +0000 2020\",\"id\":1336593098202259456,\"id_str\":\"1336593098202259456\",\"text\":\"@RichDecibels Lol. I would absolutely say yes to this, but the quality memes seem to be flowing on the right lately\\u2026 https:\\\/\\\/t.co\\\/DQxqEbd5xp\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"RichDecibels\",\"name\":\"Richard D. Bartlett\",\"id\":316970336,\"id_str\":\"316970336\",\"indices\":[0,13]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DQxqEbd5xp\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336593098202259456\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336592108204007425,\"in_reply_to_status_id_str\":\"1336592108204007425\",\"in_reply_to_user_id\":316970336,\"in_reply_to_user_id_str\":\"316970336\",\"in_reply_to_screen_name\":\"RichDecibels\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":2,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1180733974357823488\\\/iF7rYDX-_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1180733974357823488\\\/iF7rYDX-_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/113823447\\\/1495443366\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1162328250447781889,\"id_str\":\"1162328250447781889\",\"name\":\"The Mind Flayers \\ud83d\\udc7e\",\"screen_name\":\"FlayersMind\",\"location\":\"The Up Side Down\",\"description\":\"Not-so latest Cyber Security insights and stories #infosec anymore | Just cruising between cyber security subjects\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1653,\"friends_count\":3900,\"listed_count\":19,\"created_at\":\"Fri Aug 16 11:40:31 +0000 2019\",\"favourites_count\":269,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":827,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 14:02:20 +0000 2020\",\"id\":1334860592868417536,\"id_str\":\"1334860592868417536\",\"text\":\"Jammer dat anonimiteit vaak nooit echt anoniem is. Is dit uit kostenoogpunt of moedwillig? https:\\\/\\\/t.co\\\/GdpdEo9I9L\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GdpdEo9I9L\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/danielverlaan\\\/status\\\/1334563580482625538\",\"display_url\":\"twitter.com\\\/danielverlaan\\\/\\u2026\",\"indices\":[91,114]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334563580482625538,\"quoted_status_id_str\":\"1334563580482625538\",\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"nl\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1197122992612036610\\\/OcsH3Fmb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1197122992612036610\\\/OcsH3Fmb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1162328250447781889\\\/1566558137\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":120344318,\"id_str\":\"120344318\",\"name\":\"Irene Valdes\",\"screen_name\":\"Irenioskamoska\",\"location\":\"Amatlan de Quetzalcoatl\",\"description\":\"JustOne Organics SMM\\nPermi\\nSomatic Experience Practitioner (Trauma Resolution)\\r\\nHakomi\\r\\r\\nWeb and computer adoption\\nNew Economy, Currencies, new systems AND etc.\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":473,\"friends_count\":2627,\"listed_count\":20,\"created_at\":\"Sat Mar 06 04:54:30 +0000 2010\",\"favourites_count\":4111,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":4347,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 19:25:50 +0000 2020\",\"id\":1336391553682706433,\"id_str\":\"1336391553682706433\",\"text\":\"@TELMEXSoluciona Gracias!\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"TELMEXSoluciona\",\"name\":\"Telmex Soluciona\",\"id\":125761307,\"id_str\":\"125761307\",\"indices\":[0,16]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336388189934604288,\"in_reply_to_status_id_str\":\"1336388189934604288\",\"in_reply_to_user_id\":125761307,\"in_reply_to_user_id_str\":\"125761307\",\"in_reply_to_screen_name\":\"TELMEXSoluciona\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"es\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"4A913C\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme10\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme10\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/940427672836026368\\\/stSDSVJZ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/940427672836026368\\\/stSDSVJZ_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/120344318\\\/1513050405\",\"profile_link_color\":\"4A913C\",\"profile_sidebar_border_color\":\"F5D068\",\"profile_sidebar_fill_color\":\"FF9749\",\"profile_text_color\":\"F15F46\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":899100288736296960,\"id_str\":\"899100288736296960\",\"name\":\"Emaline Friedman\",\"screen_name\":\"emalinus4\",\"location\":\"califorest \",\"description\":\"network activist for the commons (@holochain, @CommonsEngine), news writer (@mad_in_america), beleaguered recent PhD grad in psychology\",\"url\":\"https:\\\/\\\/t.co\\\/A7FKJBPWUD\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/A7FKJBPWUD\",\"expanded_url\":\"http:\\\/\\\/herlinus.com\",\"display_url\":\"herlinus.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":575,\"friends_count\":190,\"listed_count\":48,\"created_at\":\"Sun Aug 20 02:46:28 +0000 2017\",\"favourites_count\":162,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":133,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 20:35:22 +0000 2020\",\"id\":1334597116623159297,\"id_str\":\"1334597116623159297\",\"text\":\"Epic report on ontology as enabler\\\/inhibitor of commons-oriented practices (with lots of goodies about CE activitie\\u2026 https:\\\/\\\/t.co\\\/vONZ7lLzdl\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vONZ7lLzdl\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334597116623159297\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1333471102845247495,\"quoted_status_id_str\":\"1333471102845247495\",\"retweet_count\":2,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/910523158909849601\\\/UuPbEAXe_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/910523158909849601\\\/UuPbEAXe_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":88542331,\"id_str\":\"88542331\",\"name\":\"Eril\",\"screen_name\":\"eeril\",\"location\":\"Earth \\\/ Web \\\/ Hyperspace\",\"description\":\"product designer, applied philosopher, psychonaut, trader, entrepreneur. Looking for opportunities in finance.\",\"url\":\"https:\\\/\\\/t.co\\\/ioDmAUvqJo\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ioDmAUvqJo\",\"expanded_url\":\"http:\\\/\\\/ezerel.com\",\"display_url\":\"ezerel.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1364,\"friends_count\":759,\"listed_count\":49,\"created_at\":\"Sun Nov 08 23:49:43 +0000 2009\",\"favourites_count\":1578,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":1833,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 02 21:31:40 +0000 2020\",\"id\":1334248896768471045,\"id_str\":\"1334248896768471045\",\"text\":\"@AmpleforthOrg @Tronfoundation @Polkadot @NEARProtocol AMPL lacked the \\\"network effect\\\".\\n\\nNot anymore \\ud83d\\udc4b\\ud83c\\udffc\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AmpleforthOrg\",\"name\":\"Ampleforth #AMPL\",\"id\":963535553869172736,\"id_str\":\"963535553869172736\",\"indices\":[0,14]},{\"screen_name\":\"Tronfoundation\",\"name\":\"TRON Foundation\",\"id\":894231710065446912,\"id_str\":\"894231710065446912\",\"indices\":[15,30]},{\"screen_name\":\"Polkadot\",\"name\":\"Polkadot\",\"id\":1595615893,\"id_str\":\"1595615893\",\"indices\":[31,40]},{\"screen_name\":\"NEARProtocol\",\"name\":\"NEAR\",\"id\":1031949518609121280,\"id_str\":\"1031949518609121280\",\"indices\":[41,54]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1334218731170443270,\"in_reply_to_status_id_str\":\"1334218731170443270\",\"in_reply_to_user_id\":963535553869172736,\"in_reply_to_user_id_str\":\"963535553869172736\",\"in_reply_to_screen_name\":\"AmpleforthOrg\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":9,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1285907309076582408\\\/nZXGLxmL_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1285907309076582408\\\/nZXGLxmL_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/88542331\\\/1595421397\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"regular\"},{\"id\":14769640,\"id_str\":\"14769640\",\"name\":\"Nathan Waters\",\"screen_name\":\"nathanwaters\",\"location\":\"Sydney, Australia\",\"description\":\"creator \\u00b7 humanitarian \\u00b7 futurist\\n#developer #community #holochain #web3 #gameB #vanlife #mutualcredit #postcapitalism #p2p #commons #complexity #emergence\",\"url\":\"https:\\\/\\\/t.co\\\/UC7Ee7kgl1\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UC7Ee7kgl1\",\"expanded_url\":\"https:\\\/\\\/nathanwaters.com\",\"display_url\":\"nathanwaters.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3790,\"friends_count\":1559,\"listed_count\":166,\"created_at\":\"Wed May 14 05:34:28 +0000 2008\",\"favourites_count\":3053,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":6066,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 23:35:28 +0000 2020\",\"id\":1336454377947590656,\"id_str\":\"1336454377947590656\",\"text\":\"@_devalias \\ud83d\\ude03 I've done a few searches for electric vans. Zero in Aus. There's some available in the UK. Some with t\\u2026 https:\\\/\\\/t.co\\\/4iJn2xc6H8\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"_devalias\",\"name\":\"Glenn 'devalias' Grant \\u2728\",\"id\":1535580554,\"id_str\":\"1535580554\",\"indices\":[0,10]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4iJn2xc6H8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336454377947590656\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336452440749604865,\"in_reply_to_status_id_str\":\"1336452440749604865\",\"in_reply_to_user_id\":1535580554,\"in_reply_to_user_id_str\":\"1535580554\",\"in_reply_to_screen_name\":\"_devalias\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme9\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/894346562893103104\\\/xcBnusEx_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/894346562893103104\\\/xcBnusEx_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14769640\\\/1590734478\",\"profile_link_color\":\"B80653\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"FFA973\",\"profile_text_color\":\"DE5470\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":9209942,\"id_str\":\"9209942\",\"name\":\"Ferananda Ibarra\",\"screen_name\":\"fer_ananda\",\"location\":\"Cosmos\",\"description\":\"#CollectiveIntelligence #Regenerative #Economy #decentralization #currency CoDirector @CommonsEngine CoFounder @holochain Chief Harmony officer @justoneorganics\",\"url\":\"https:\\\/\\\/t.co\\\/VkyOB99mC5\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/VkyOB99mC5\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/ferananda\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/ferananda\\\/\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":7165,\"friends_count\":4324,\"listed_count\":432,\"created_at\":\"Tue Oct 02 17:12:47 +0000 2007\",\"favourites_count\":10053,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":10426,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 03:32:22 +0000 2020\",\"id\":1336513994375368706,\"id_str\":\"1336513994375368706\",\"text\":\"Gorgeous! I love the phrase \\\" #soil is the greatest gut on earth! https:\\\/\\\/t.co\\\/x1cMywc585\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"soil\",\"indices\":[30,35]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/x1cMywc585\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/gideonro\\\/status\\\/1336115281081507840\",\"display_url\":\"twitter.com\\\/gideonro\\\/statu\\u2026\",\"indices\":[66,89]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336115281081507840,\"quoted_status_id_str\":\"1336115281081507840\",\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"081900\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1066734676184715264\\\/uQaVrxNe_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1066734676184715264\\\/uQaVrxNe_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/9209942\\\/1558238624\",\"profile_link_color\":\"3A0908\",\"profile_sidebar_border_color\":\"006879\",\"profile_sidebar_fill_color\":\"7FA66C\",\"profile_text_color\":\"002527\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":929232306946031618,\"id_str\":\"929232306946031618\",\"name\":\"Agent Centric\",\"screen_name\":\"douglasonearth\",\"location\":\"Hawaii, USA\",\"description\":\"agentcentric.crypto\\n\\nSeek ~ Study ~ Learn ~ Grow\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":221,\"friends_count\":438,\"listed_count\":1,\"created_at\":\"Sat Nov 11 06:20:21 +0000 2017\",\"favourites_count\":6775,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1436,\"lang\":null,\"status\":{\"created_at\":\"Sat Dec 05 19:19:58 +0000 2020\",\"id\":1335302915896930306,\"id_str\":\"1335302915896930306\",\"text\":\"RT @MauiNOW: Big Surf is Up: Jaws Draws Big Wave Riders and Spectators to Ooh and Aah https:\\\/\\\/t.co\\\/7AKHGwEEc7 https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"MauiNOW\",\"name\":\"Maui Now\",\"id\":29249391,\"id_str\":\"29249391\",\"indices\":[3,11]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7AKHGwEEc7\",\"expanded_url\":\"https:\\\/\\\/mauinow.com\\\/2020\\\/12\\\/03\\\/big-surf-is-up-jaws-draws-big-wave-riders-and-spectators-to-ooh-and-aah\\\/?t=1607032416\",\"display_url\":\"mauinow.com\\\/2020\\\/12\\\/03\\\/big\\u2026\",\"indices\":[86,109]}],\"media\":[{\"id\":1334616982520381440,\"id_str\":\"1334616982520381440\",\"indices\":[110,133],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"display_url\":\"pic.twitter.com\\\/mzeoHdBLUY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/MauiNOW\\\/status\\\/1334616983644467201\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":420,\"resize\":\"fit\"},\"medium\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"}},\"source_status_id\":1334616983644467201,\"source_status_id_str\":\"1334616983644467201\",\"source_user_id\":29249391,\"source_user_id_str\":\"29249391\"}]},\"extended_entities\":{\"media\":[{\"id\":1334616982520381440,\"id_str\":\"1334616982520381440\",\"indices\":[110,133],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"display_url\":\"pic.twitter.com\\\/mzeoHdBLUY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/MauiNOW\\\/status\\\/1334616983644467201\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":420,\"resize\":\"fit\"},\"medium\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"}},\"source_status_id\":1334616983644467201,\"source_status_id_str\":\"1334616983644467201\",\"source_user_id\":29249391,\"source_user_id_str\":\"29249391\"}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 21:54:19 +0000 2020\",\"id\":1334616983644467201,\"id_str\":\"1334616983644467201\",\"text\":\"Big Surf is Up: Jaws Draws Big Wave Riders and Spectators to Ooh and Aah https:\\\/\\\/t.co\\\/7AKHGwEEc7 https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/7AKHGwEEc7\",\"expanded_url\":\"https:\\\/\\\/mauinow.com\\\/2020\\\/12\\\/03\\\/big-surf-is-up-jaws-draws-big-wave-riders-and-spectators-to-ooh-and-aah\\\/?t=1607032416\",\"display_url\":\"mauinow.com\\\/2020\\\/12\\\/03\\\/big\\u2026\",\"indices\":[73,96]}],\"media\":[{\"id\":1334616982520381440,\"id_str\":\"1334616982520381440\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"display_url\":\"pic.twitter.com\\\/mzeoHdBLUY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/MauiNOW\\\/status\\\/1334616983644467201\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":420,\"resize\":\"fit\"},\"medium\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1334616982520381440,\"id_str\":\"1334616982520381440\",\"indices\":[97,120],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EoWDExJUwAA22ov.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/mzeoHdBLUY\",\"display_url\":\"pic.twitter.com\\\/mzeoHdBLUY\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/MauiNOW\\\/status\\\/1334616983644467201\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":420,\"resize\":\"fit\"},\"medium\":{\"w\":1024,\"h\":633,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"http:\\\/\\\/mauinow.com\\\" rel=\\\"nofollow\\\">Maui Now News Feed<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":61,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":15,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1327869929589116930\\\/NgUzGrLK_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1327869929589116930\\\/NgUzGrLK_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/929232306946031618\\\/1601869104\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":4384658423,\"id_str\":\"4384658423\",\"name\":\"Guy James \\ud83c\\udf0d\",\"screen_name\":\"guyjames23\",\"location\":\"Catalunya\",\"description\":\"Has worked with @FairCoop, @CoopIntegral, @P2PFoundation. Writer, musician. Posts in English and Spanish.\\nPGP: https:\\\/\\\/t.co\\\/ejpOiRyn5L\\n#P2P #PlatformCoops\",\"url\":\"https:\\\/\\\/t.co\\\/BEfVFVzUQY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/BEfVFVzUQY\",\"expanded_url\":\"http:\\\/\\\/www.guyjames.com\",\"display_url\":\"guyjames.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ejpOiRyn5L\",\"expanded_url\":\"http:\\\/\\\/keybase.io\\\/guyjames\",\"display_url\":\"keybase.io\\\/guyjames\",\"indices\":[111,134]}]}},\"protected\":false,\"followers_count\":503,\"friends_count\":1267,\"listed_count\":33,\"created_at\":\"Sat Dec 05 16:16:18 +0000 2015\",\"favourites_count\":5700,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":2206,\"lang\":null,\"status\":{\"created_at\":\"Fri Dec 04 22:38:05 +0000 2020\",\"id\":1334990385261801474,\"id_str\":\"1334990385261801474\",\"text\":\"@DMReporter To be fair it has aged rather better than the Mail's support for one A. Hitler in the 30s.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"DMReporter\",\"name\":\"The DM Reporter\",\"id\":194732581,\"id_str\":\"194732581\",\"indices\":[0,11]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1334979561025646592,\"in_reply_to_status_id_str\":\"1334979561025646592\",\"in_reply_to_user_id\":194732581,\"in_reply_to_user_id_str\":\"194732581\",\"in_reply_to_screen_name\":\"DMReporter\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C6E2EE\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/673175477423599616\\\/NkOzxQN5_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/673175477423599616\\\/NkOzxQN5_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/4384658423\\\/1525339819\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":395420916,\"id_str\":\"395420916\",\"name\":\"Pablo Somonte Ruano\",\"screen_name\":\"psruano\",\"location\":\"bremen \\\/ cdmx \\\/ internet\",\"description\":\"interaction design, ambiguous software, generative systems, transmedia narrative, post-blockchain infrastructure, p2p, mutualism, value, language & odd music.\",\"url\":\"https:\\\/\\\/t.co\\\/M7GsW0dgXD\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/M7GsW0dgXD\",\"expanded_url\":\"https:\\\/\\\/pablo.sx\",\"display_url\":\"pablo.sx\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":592,\"friends_count\":4544,\"listed_count\":13,\"created_at\":\"Fri Oct 21 16:46:45 +0000 2011\",\"favourites_count\":19826,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":452,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 23:26:14 +0000 2020\",\"id\":1336452055892979719,\"id_str\":\"1336452055892979719\",\"text\":\"RT @Rainmaker1973: In computer networking, HTTP 451 Unavailable For Legal Reasons is an error status code of the HTTP protocol (e.g. unavai\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Rainmaker1973\",\"name\":\"Massimo\",\"id\":177101260,\"id_str\":\"177101260\",\"indices\":[3,17]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 09:14:38 +0000 2020\",\"id\":1336237744041971712,\"id_str\":\"1336237744041971712\",\"text\":\"In computer networking, HTTP 451 Unavailable For Legal Reasons is an error status code of the HTTP protocol (e.g. u\\u2026 https:\\\/\\\/t.co\\\/3zNpCKeVb4\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3zNpCKeVb4\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336237744041971712\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite Inc.<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":126,\"favorite_count\":529,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":126,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276136515400318976\\\/bYnZbacN_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276136515400318976\\\/bYnZbacN_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/395420916\\\/1599207432\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":223407318,\"id_str\":\"223407318\",\"name\":\"Viktor Zaunders\",\"screen_name\":\"zaunders\",\"location\":\"Sweden\",\"description\":\"Serving the emergence of new patterns and pathways needed for regenerative living on earth.\",\"url\":\"https:\\\/\\\/t.co\\\/ra8KlwKBIc\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/ra8KlwKBIc\",\"expanded_url\":\"http:\\\/\\\/zaunders.net\",\"display_url\":\"zaunders.net\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":414,\"friends_count\":818,\"listed_count\":33,\"created_at\":\"Mon Dec 06 09:15:27 +0000 2010\",\"favourites_count\":1759,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1634,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 10:37:11 +0000 2020\",\"id\":1336258517079101440,\"id_str\":\"1336258517079101440\",\"text\":\"Join me in supporting this groundmaking project in Colombia! Joe is holding really useful patterns for earth regene\\u2026 https:\\\/\\\/t.co\\\/C5qBXLvpTJ\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/C5qBXLvpTJ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336258517079101440\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1334831650744791041,\"quoted_status_id_str\":\"1334831650744791041\",\"retweet_count\":1,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160895900094480384\\\/EhhVqspW_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1160895900094480384\\\/EhhVqspW_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/223407318\\\/1411463186\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":903327692858281985,\"id_str\":\"903327692858281985\",\"name\":\"MetaHolo \\u2653\",\"screen_name\":\"MetaHolo\",\"location\":\"Holon\",\"description\":\"Catalyst for @Holochain @H_O_L_O_ @CommonsEngine @Metacurrency @current_see holoptinets @deepwealth upward spirals unenclosable carriers SACs\",\"url\":\"https:\\\/\\\/t.co\\\/UoxKymsAu3\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/UoxKymsAu3\",\"expanded_url\":\"http:\\\/\\\/commonsengine.org\",\"display_url\":\"commonsengine.org\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":485,\"friends_count\":1482,\"listed_count\":10,\"created_at\":\"Thu Aug 31 18:44:39 +0000 2017\",\"favourites_count\":10,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":153,\"lang\":null,\"status\":{\"created_at\":\"Sun Dec 06 03:06:20 +0000 2020\",\"id\":1335420282115420160,\"id_str\":\"1335420282115420160\",\"text\":\"RT @zaunders: Here's a little window into why I am so excited about #Holochain coming into the world in a functional form right now!\\n https\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Holochain\",\"indices\":[68,78]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"zaunders\",\"name\":\"Viktor Zaunders\",\"id\":223407318,\"id_str\":\"223407318\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Fri Dec 04 13:31:22 +0000 2020\",\"id\":1334852798220021760,\"id_str\":\"1334852798220021760\",\"text\":\"Here's a little window into why I am so excited about #Holochain coming into the world in a functional form right n\\u2026 https:\\\/\\\/t.co\\\/NnyAhaHvNm\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Holochain\",\"indices\":[54,64]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/NnyAhaHvNm\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334852798220021760\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":29,\"favorite_count\":80,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":29,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/903330030431997956\\\/WbSHY94f_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/903330030431997956\\\/WbSHY94f_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/903327692858281985\\\/1504206524\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":109013810,\"id_str\":\"109013810\",\"name\":\"James \\\/ \\u30b8\\u30a7\\u30fc\\u30e0\\u30ba\",\"screen_name\":\"jgerity\",\"location\":\"Boston, USA\",\"description\":\"Computers + #scicomm, \\u79c1\\u306e\\u65e5\\u672c\\u8a9e\\u306f\\u4e0a\\u624b\\u3067\\u306a\\u3044\\nHe\\\/him\\\/they, please.\\n\\nNow: Python engineer in computer vision\\nThen: PhD-ish @TAMU accelerator physics, BSc @UMBC physics+math\",\"url\":\"https:\\\/\\\/t.co\\\/SoZJ3ihP3N\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SoZJ3ihP3N\",\"expanded_url\":\"http:\\\/\\\/jamesgerity.com\",\"display_url\":\"jamesgerity.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1251,\"friends_count\":4999,\"listed_count\":35,\"created_at\":\"Wed Jan 27 18:09:03 +0000 2010\",\"favourites_count\":18421,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":21947,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:29:04 +0000 2020\",\"id\":1336784957348438017,\"id_str\":\"1336784957348438017\",\"text\":\"@mjg59 hope that guy keeps studying cyber\\n\\nhe'll pick up the basics one day\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"mjg59\",\"name\":\"Matthew Garrett\",\"id\":229502009,\"id_str\":\"229502009\",\"indices\":[0,6]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":1336783608539873280,\"in_reply_to_status_id_str\":\"1336783608539873280\",\"in_reply_to_user_id\":229502009,\"in_reply_to_user_id_str\":\"229502009\",\"in_reply_to_screen_name\":\"mjg59\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276247911765020673\\\/LxcFiaC4_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1276247911765020673\\\/LxcFiaC4_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/109013810\\\/1498513676\",\"profile_link_color\":\"FF691F\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":14157406,\"id_str\":\"14157406\",\"name\":\"Cyrille Frank\",\"screen_name\":\"cyceron\",\"location\":\"Paris - France\",\"description\":\"Directeur @ESJPRO M\\u00e9dias Journaliste I formateur I consultant \\n\\ud83d\\udc49 Blog : https:\\\/\\\/t.co\\\/IloeyVPPfE \\n\\ud83d\\udc49 Newsletter : https:\\\/\\\/t.co\\\/IMdo3Jea2s\\n#medias #journalisme #presse\",\"url\":\"https:\\\/\\\/t.co\\\/IloeyVPPfE\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IloeyVPPfE\",\"expanded_url\":\"http:\\\/\\\/mediaculture.fr\",\"display_url\":\"mediaculture.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/IloeyVPPfE\",\"expanded_url\":\"http:\\\/\\\/mediaculture.fr\",\"display_url\":\"mediaculture.fr\",\"indices\":[72,95]},{\"url\":\"https:\\\/\\\/t.co\\\/IMdo3Jea2s\",\"expanded_url\":\"http:\\\/\\\/esjpro.substack.com\",\"display_url\":\"esjpro.substack.com\",\"indices\":[112,135]}]}},\"protected\":false,\"followers_count\":12983,\"friends_count\":2721,\"listed_count\":1082,\"created_at\":\"Sun Mar 16 13:26:55 +0000 2008\",\"favourites_count\":18021,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":40417,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 22:05:00 +0000 2020\",\"id\":1336794000280461312,\"id_str\":\"1336794000280461312\",\"text\":\"RT @docisa33: Je ne l\\u2019ai pas ramen\\u00e9e souvent concernant le covid. Mais ce soir, j\\u2019avais envie.\\n\\nJe suis m\\u00e9decin g\\u00e9n\\u00e9raliste. Depuis mars, c\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"docisa33\",\"name\":\"docisa \\u2014 no #fakemed\\u2014\",\"id\":978261548,\"id_str\":\"978261548\",\"indices\":[3,12]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 20:07:54 +0000 2020\",\"id\":1336764529485733891,\"id_str\":\"1336764529485733891\",\"text\":\"Je ne l\\u2019ai pas ramen\\u00e9e souvent concernant le covid. Mais ce soir, j\\u2019avais envie.\\n\\nJe suis m\\u00e9decin g\\u00e9n\\u00e9raliste. Depu\\u2026 https:\\\/\\\/t.co\\\/aq2MFdSK5T\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/aq2MFdSK5T\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336764529485733891\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":369,\"favorite_count\":1077,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":369,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme2\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201623346632384517\\\/dFqUMNmt_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1201623346632384517\\\/dFqUMNmt_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/14157406\\\/1564578253\",\"profile_link_color\":\"FF1E00\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"E0F0FF\",\"profile_text_color\":\"040008\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":959035813089697792,\"id_str\":\"959035813089697792\",\"name\":\"Kesi Parker\",\"screen_name\":\"ParkerKesi\",\"location\":\"Philadelphia, PA\",\"description\":\"Freelance Technical Writer, blogger\",\"url\":\"https:\\\/\\\/t.co\\\/bAq0kPDFFo\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bAq0kPDFFo\",\"expanded_url\":\"https:\\\/\\\/about.me\\\/kesiparker\",\"display_url\":\"about.me\\\/kesiparker\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":886,\"friends_count\":447,\"listed_count\":13,\"created_at\":\"Thu Feb 01 12:08:50 +0000 2018\",\"favourites_count\":373,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":495,\"lang\":null,\"status\":{\"created_at\":\"Thu Dec 03 06:56:40 +0000 2020\",\"id\":1334391083862777857,\"id_str\":\"1334391083862777857\",\"text\":\"RT @ClickHelpNews: Tracking Technical Writing Tasks When Working with Other Departments\\nhttps:\\\/\\\/t.co\\\/0VmQgrddvn \\n\\n#tech #writing #technical\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"tech\",\"indices\":[114,119]},{\"text\":\"writing\",\"indices\":[120,128]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ClickHelpNews\",\"name\":\"ClickHelp.com\",\"id\":379688577,\"id_str\":\"379688577\",\"indices\":[3,17]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0VmQgrddvn\",\"expanded_url\":\"https:\\\/\\\/clickhelp.com\\\/clickhelp-technical-writing-blog\\\/tracking-technical-writing-tasks-when-working-with-other-departments\\\/?utm_source=twitter-com&utm_medium=ch-link\",\"display_url\":\"clickhelp.com\\\/clickhelp-tech\\u2026\",\"indices\":[88,111]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Dec 03 06:54:15 +0000 2020\",\"id\":1334390474199748609,\"id_str\":\"1334390474199748609\",\"text\":\"Tracking Technical Writing Tasks When Working with Other Departments\\nhttps:\\\/\\\/t.co\\\/0VmQgrddvn \\n\\n#tech #writing\\u2026 https:\\\/\\\/t.co\\\/f5YW668xp8\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"tech\",\"indices\":[95,100]},{\"text\":\"writing\",\"indices\":[101,109]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/0VmQgrddvn\",\"expanded_url\":\"https:\\\/\\\/clickhelp.com\\\/clickhelp-technical-writing-blog\\\/tracking-technical-writing-tasks-when-working-with-other-departments\\\/?utm_source=twitter-com&utm_medium=ch-link\",\"display_url\":\"clickhelp.com\\\/clickhelp-tech\\u2026\",\"indices\":[69,92]},{\"url\":\"https:\\\/\\\/t.co\\\/f5YW668xp8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1334390474199748609\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[111,134]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":10,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":6,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/959037033263050752\\\/f8k1lZQ3_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/959037033263050752\\\/f8k1lZQ3_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/959035813089697792\\\/1517489660\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":129591712,\"id_str\":\"129591712\",\"name\":\"Luis de Miranda\",\"screen_name\":\"Luis_de_Miranda\",\"location\":\"Stockholm\",\"description\":\"Author. Philosophical Practitioner. Crealectician.\",\"url\":\"https:\\\/\\\/t.co\\\/HQvpBGf0RY\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/HQvpBGf0RY\",\"expanded_url\":\"http:\\\/\\\/luisdemiranda.com\",\"display_url\":\"luisdemiranda.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":490,\"friends_count\":420,\"listed_count\":18,\"created_at\":\"Sun Apr 04 20:29:59 +0000 2010\",\"favourites_count\":287,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":false,\"statuses_count\":2720,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 10:59:21 +0000 2020\",\"id\":1336626482567917568,\"id_str\":\"1336626482567917568\",\"text\":\"Crealectics as Method https:\\\/\\\/t.co\\\/vG89CybmD9\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/vG89CybmD9\",\"expanded_url\":\"http:\\\/\\\/crealectics.com\\\/2020\\\/12\\\/09\\\/crealectics-as-method\\\/\",\"display_url\":\"crealectics.com\\\/2020\\\/12\\\/09\\\/cre\\u2026\",\"indices\":[22,45]}]},\"source\":\"<a href=\\\"http:\\\/\\\/publicize.wp.com\\\/\\\" rel=\\\"nofollow\\\">WordPress.com<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":true,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"EDF2F5\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme19\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme19\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1302883502908735488\\\/MbhYWz27_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1302883502908735488\\\/MbhYWz27_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/129591712\\\/1598943897\",\"profile_link_color\":\"ABB8C2\",\"profile_sidebar_border_color\":\"EEEEEE\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1688523079,\"id_str\":\"1688523079\",\"name\":\"LabSense\",\"screen_name\":\"Lab_Sense\",\"location\":\"Paris\",\"description\":\"Empowering your content with #AI. #Automation #SEO #content #NLP #NLG. Powering more than 200 clients (media, ecommerce, property, ecommerce, travel..).\",\"url\":\"https:\\\/\\\/t.co\\\/65zWtps1Od\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/65zWtps1Od\",\"expanded_url\":\"https:\\\/\\\/www.lab-sense.io\",\"display_url\":\"lab-sense.io\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":794,\"friends_count\":3681,\"listed_count\":27,\"created_at\":\"Wed Aug 21 14:48:12 +0000 2013\",\"favourites_count\":468,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":472,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 08:05:18 +0000 2020\",\"id\":1336220293396881408,\"id_str\":\"1336220293396881408\",\"text\":\"Going global! Lets meet there and see how we can help you automate your content. https:\\\/\\\/t.co\\\/RS49sLfIxV\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/RS49sLfIxV\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BF_TechNA\\\/status\\\/1336037769160896512\",\"display_url\":\"twitter.com\\\/BF_TechNA\\\/stat\\u2026\",\"indices\":[81,104]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336037769160896512,\"quoted_status_id_str\":\"1336037769160896512\",\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"1A1B1F\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1268116613087272960\\\/GVnXSh0f_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1268116613087272960\\\/GVnXSh0f_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1688523079\\\/1591177176\",\"profile_link_color\":\"38BBD2\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"C0DFEC\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":371017223,\"id_str\":\"371017223\",\"name\":\"Frank Pasquale\",\"screen_name\":\"FrankPasquale\",\"location\":\"\",\"description\":\"2015: The Black Box Society https:\\\/\\\/t.co\\\/9thw5iRSqX\\n2020: New Laws of Robotics: https:\\\/\\\/t.co\\\/o8prURgh71\\nSubstance: AI\\\/health\\\/tech\\nMethod: Law & Political Economy\",\"url\":\"https:\\\/\\\/t.co\\\/Z6KPS0kPDB\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Z6KPS0kPDB\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/2ZwAI30\",\"display_url\":\"bit.ly\\\/2ZwAI30\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/9thw5iRSqX\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/2KvYnYJ\",\"display_url\":\"bit.ly\\\/2KvYnYJ\",\"indices\":[28,51]},{\"url\":\"https:\\\/\\\/t.co\\\/o8prURgh71\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/2ZwAI30\",\"display_url\":\"bit.ly\\\/2ZwAI30\",\"indices\":[80,103]}]}},\"protected\":false,\"followers_count\":34001,\"friends_count\":21306,\"listed_count\":1147,\"created_at\":\"Sat Sep 10 01:51:30 +0000 2011\",\"favourites_count\":198331,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":76585,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:20:32 +0000 2020\",\"id\":1336782808413515777,\"id_str\":\"1336782808413515777\",\"text\":\"RT @robhorning: I wrote something about GPT-3 and the difficulty of making something new when you are hemmed in by an archive https:\\\/\\\/t.co\\\/\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"robhorning\",\"name\":\"Rob Horning\",\"id\":16159320,\"id_str\":\"16159320\",\"indices\":[3,14]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Wed Dec 09 21:05:07 +0000 2020\",\"id\":1336778928468463623,\"id_str\":\"1336778928468463623\",\"text\":\"I wrote something about GPT-3 and the difficulty of making something new when you are hemmed in by an archive https:\\\/\\\/t.co\\\/hqSHQGIsO9\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hqSHQGIsO9\",\"expanded_url\":\"https:\\\/\\\/tinyletter.com\\\/robhorning\\\/letters\\\/some-people-never-know\",\"display_url\":\"tinyletter.com\\\/robhorning\\\/let\\u2026\",\"indices\":[110,133]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":7,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1536587347\\\/Dove__2__normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1536587347\\\/Dove__2__normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/371017223\\\/1374200657\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":9701382,\"id_str\":\"9701382\",\"name\":\"Hamish McKenzie\",\"screen_name\":\"hamishmckenzie\",\"location\":\"San Francisco\",\"description\":\"Co-founder of @SubstackInc. Writer.\",\"url\":\"https:\\\/\\\/t.co\\\/uz3lEzYd8h\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/uz3lEzYd8h\",\"expanded_url\":\"http:\\\/\\\/substack.com\\\/jobs\",\"display_url\":\"substack.com\\\/jobs\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":14469,\"friends_count\":2114,\"listed_count\":567,\"created_at\":\"Fri Oct 26 03:43:13 +0000 2007\",\"favourites_count\":8779,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":9840,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 00:29:28 +0000 2020\",\"id\":1336105579056525313,\"id_str\":\"1336105579056525313\",\"text\":\"@imkialikethecar years now\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"imkialikethecar\",\"name\":\"Kia K.\",\"id\":245697392,\"id_str\":\"245697392\",\"indices\":[0,16]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336077594525986816,\"in_reply_to_status_id_str\":\"1336077594525986816\",\"in_reply_to_user_id\":245697392,\"in_reply_to_user_id_str\":\"245697392\",\"in_reply_to_screen_name\":\"imkialikethecar\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme6\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/966759227317411840\\\/vkkANRC-_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/966759227317411840\\\/vkkANRC-_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/9701382\\\/1549554142\",\"profile_link_color\":\"19CF86\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":82521206,\"id_str\":\"82521206\",\"name\":\"Jolly Old Saint Rickolas\",\"screen_name\":\"RickGivens\",\"location\":\"Chicago Burbs\",\"description\":\"The only man in Illinois ever bitten by a zebra. Senior Systems Analyst; prior USMC 0311\\\/8152, former LEO. Research | Tech | Gaming | Cooking.\",\"url\":\"https:\\\/\\\/t.co\\\/Oisehjauny\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Oisehjauny\",\"expanded_url\":\"https:\\\/\\\/www.linkedin.com\\\/in\\\/richard-givens-27601983\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/richard-giv\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2171,\"friends_count\":1301,\"listed_count\":81,\"created_at\":\"Thu Oct 15 02:42:45 +0000 2009\",\"favourites_count\":40302,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":56131,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 21:51:45 +0000 2020\",\"id\":1336790666303713281,\"id_str\":\"1336790666303713281\",\"text\":\"@bumbucha Have to agree, that is a monumental effort to fail that spectacularly.\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"bumbucha\",\"name\":\"goofy\",\"id\":2292158936,\"id_str\":\"2292158936\",\"indices\":[0,9]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336790378981314560,\"in_reply_to_status_id_str\":\"1336790378981314560\",\"in_reply_to_user_id\":2292158936,\"in_reply_to_user_id_str\":\"2292158936\",\"in_reply_to_screen_name\":\"bumbucha\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"131516\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1322766173759512577\\\/FznX2GSh_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1322766173759512577\\\/FznX2GSh_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/82521206\\\/1607358868\",\"profile_link_color\":\"E81C4F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1065143665562198016,\"id_str\":\"1065143665562198016\",\"name\":\"Romain Marquant\",\"screen_name\":\"marquantrom\",\"location\":\"\",\"description\":\"\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":63,\"friends_count\":103,\"listed_count\":2,\"created_at\":\"Wed Nov 21 07:23:34 +0000 2018\",\"favourites_count\":23,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":23,\"lang\":null,\"status\":{\"created_at\":\"Mon Oct 19 08:37:51 +0000 2020\",\"id\":1318109090300743682,\"id_str\":\"1318109090300743682\",\"text\":\"RT @AribartT: Hi @typescript fans,\\n\\nThis summer, I created a lib that dynamically infers valid instances types from #JSON schemas!\\n\\nThe ben\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"JSON\",\"indices\":[116,121]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"AribartT\",\"name\":\"Thomas Aribart\",\"id\":1127940698408353793,\"id_str\":\"1127940698408353793\",\"indices\":[3,12]},{\"screen_name\":\"typescript\",\"name\":\"TypeScript\",\"id\":809233214,\"id_str\":\"809233214\",\"indices\":[17,28]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Oct 19 07:37:25 +0000 2020\",\"id\":1318093881574100993,\"id_str\":\"1318093881574100993\",\"text\":\"Hi @typescript fans,\\n\\nThis summer, I created a lib that dynamically infers valid instances types from #JSON schemas\\u2026 https:\\\/\\\/t.co\\\/kRN9hsIGOx\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"JSON\",\"indices\":[102,107]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"typescript\",\"name\":\"TypeScript\",\"id\":809233214,\"id_str\":\"809233214\",\"indices\":[3,14]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/kRN9hsIGOx\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1318093881574100993\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":17,\"favorite_count\":21,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":17,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1065493932652617728\\\/slAXv9HJ_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1065493932652617728\\\/slAXv9HJ_normal.jpg\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3984438142,\"id_str\":\"3984438142\",\"name\":\"Gilles Dubuc\",\"screen_name\":\"MonsieurPerf\",\"location\":\"Montpellier\",\"description\":\"Engineering Manager @Wikimedia Performance Team \\u26a1\\ufe0f\\n\\nBanner photo by @0gust1\",\"url\":\"https:\\\/\\\/t.co\\\/m83Ltmh0ia\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/m83Ltmh0ia\",\"expanded_url\":\"https:\\\/\\\/github.com\\\/gi11es\",\"display_url\":\"github.com\\\/gi11es\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":477,\"friends_count\":296,\"listed_count\":16,\"created_at\":\"Sun Oct 18 04:08:30 +0000 2015\",\"favourites_count\":405,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":303,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 16:43:45 +0000 2020\",\"id\":1336350764411867136,\"id_str\":\"1336350764411867136\",\"text\":\"@HenriHelvetica Charger included? \\ud83d\\ude2c\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"HenriHelvetica\",\"name\":\"Henri Helvetica, h12a \\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83d\\ude80\",\"id\":350353681,\"id_str\":\"350353681\",\"indices\":[0,15]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":1336335789832036353,\"in_reply_to_status_id_str\":\"1336335789832036353\",\"in_reply_to_user_id\":350353681,\"in_reply_to_user_id_str\":\"350353681\",\"in_reply_to_screen_name\":\"HenriHelvetica\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1252203006088679424\\\/2fhVIb-c_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1252203006088679424\\\/2fhVIb-c_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3984438142\\\/1569745853\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":338917394,\"id_str\":\"338917394\",\"name\":\"Fasterize\",\"screen_name\":\"Fasterize\",\"location\":\"Paris\",\"description\":\"WPO SaaS solution to speed up your website.\\nImprove your UX & SEO, boost your business\\nwith #webperf optimizations applied on the fly.\",\"url\":\"https:\\\/\\\/t.co\\\/w0qz3iA2of\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/w0qz3iA2of\",\"expanded_url\":\"http:\\\/\\\/www.fasterize.com\",\"display_url\":\"fasterize.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":782,\"friends_count\":443,\"listed_count\":139,\"created_at\":\"Wed Jul 20 09:04:20 +0000 2011\",\"favourites_count\":889,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3529,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 15:48:05 +0000 2020\",\"id\":1336699145399246848,\"id_str\":\"1336699145399246848\",\"text\":\"\\ud83d\\udcc6 Rdv pour notre #WebPerf Clinic le 17\\\/12 \\u00e0 11h, nous auditons les Core Web Vitals de 2 sites en live.\\nSi vous voul\\u2026 https:\\\/\\\/t.co\\\/lSmQ67Ql6P\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"WebPerf\",\"indices\":[17,25]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lSmQ67Ql6P\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336699145399246848\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/www.hubspot.com\\\/\\\" rel=\\\"nofollow\\\">HubSpot<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"154364\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/912761931370500096\\\/iSpH2szR_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/912761931370500096\\\/iSpH2szR_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/338917394\\\/1568210491\",\"profile_link_color\":\"154364\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"EFEFEF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":3101497558,\"id_str\":\"3101497558\",\"name\":\"Oph\\u00e9lie Coelho\",\"screen_name\":\"OphelieCoelho\",\"location\":\"Paris, France\",\"description\":\"\",\"url\":\"https:\\\/\\\/t.co\\\/WNzcUpqelW\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/WNzcUpqelW\",\"expanded_url\":\"http:\\\/\\\/www.linkedin.com\\\/in\\\/ophelie-coelho\",\"display_url\":\"linkedin.com\\\/in\\\/ophelie-coe\\u2026\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":380,\"friends_count\":582,\"listed_count\":71,\"created_at\":\"Sat Mar 21 09:55:22 +0000 2015\",\"favourites_count\":394,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":610,\"lang\":null,\"status\":{\"created_at\":\"Wed Nov 18 19:10:14 +0000 2020\",\"id\":1329139872318320640,\"id_str\":\"1329139872318320640\",\"text\":\"RT @InstitRousseau: \\u00ab\\u00a0Stop \\u00e0 la neutralit\\u00e9 carbone en trompe-l'oeil : l\\u2019empreinte carbone au service d\\u2019une nouvelle strat\\u00e9gie industrielle\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"InstitRousseau\",\"name\":\"Institut Rousseau\",\"id\":1230593259401097217,\"id_str\":\"1230593259401097217\",\"indices\":[3,18]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Oct 25 17:40:00 +0000 2020\",\"id\":1320419856311791616,\"id_str\":\"1320419856311791616\",\"text\":\"\\u00ab\\u00a0Stop \\u00e0 la neutralit\\u00e9 carbone en trompe-l'oeil : l\\u2019empreinte carbone au service d\\u2019une nouvelle strat\\u00e9gie industrie\\u2026 https:\\\/\\\/t.co\\\/iBivri7H1g\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iBivri7H1g\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1320419856311791616\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":22,\"favorite_count\":31,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"is_quote_status\":false,\"retweet_count\":22,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/889105311038152705\\\/ryy_t9_F_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/889105311038152705\\\/ryy_t9_F_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/3101497558\\\/1427220925\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1133341821826981888,\"id_str\":\"1133341821826981888\",\"name\":\"Cyril Gaunet\",\"screen_name\":\"CyrilGaunet\",\"location\":\"Paris, France\",\"description\":\"Web App Technical Leader @Theodo\\nVue.js & Symfony lover\\nEnthusiast about producing maintainable code\",\"url\":null,\"entities\":{\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":53,\"friends_count\":52,\"listed_count\":2,\"created_at\":\"Tue May 28 11:58:41 +0000 2019\",\"favourites_count\":166,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":52,\"lang\":null,\"status\":{\"created_at\":\"Thu Oct 29 10:43:57 +0000 2020\",\"id\":1321764705669701632,\"id_str\":\"1321764705669701632\",\"text\":\"RT @ThePracticalDev: One positive side effect of using Tyrion on a project is that devs can grow their quality awareness while coding. Here\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ThePracticalDev\",\"name\":\"DEV Community \\ud83d\\udc69\\u200d\\ud83d\\udcbb\\ud83d\\udc68\\u200d\\ud83d\\udcbb\",\"id\":2735246778,\"id_str\":\"2735246778\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Thu Oct 29 02:10:00 +0000 2020\",\"id\":1321635366860951552,\"id_str\":\"1321635366860951552\",\"text\":\"One positive side effect of using Tyrion on a project is that devs can grow their quality awareness while coding. H\\u2026 https:\\\/\\\/t.co\\\/Yp6MoYNcWM\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Yp6MoYNcWM\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1321635366860951552\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":14,\"favorite_count\":32,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":14,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133341902349193216\\\/pZ5K0mbe_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1133341902349193216\\\/pZ5K0mbe_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1133341821826981888\\\/1567673068\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":true,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1047521,\"id_str\":\"1047521\",\"name\":\"marcell mars\",\"screen_name\":\"marcell\",\"location\":\"zagreb, croatia\",\"description\":\"About myself in fewer than 160 chars.. I like dots..........................\",\"url\":\"http:\\\/\\\/t.co\\\/hhsI022kNr\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/hhsI022kNr\",\"expanded_url\":\"http:\\\/\\\/ki.ber.kom.uni.st\",\"display_url\":\"ki.ber.kom.uni.st\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1835,\"friends_count\":131,\"listed_count\":43,\"created_at\":\"Mon Mar 12 22:11:52 +0000 2007\",\"favourites_count\":1022,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1226,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 13:31:47 +0000 2020\",\"id\":1336302454191874048,\"id_str\":\"1336302454191874048\",\"text\":\"RT @ScientistSwanda: Here I describe a brief overview of how the Pfizer\\\/BioNTech or Moderna mRNA vaccines work. Taking a vaccine is one\\u2019s p\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"ScientistSwanda\",\"name\":\"Rob Swanda\",\"id\":824761019591450625,\"id_str\":\"824761019591450625\",\"indices\":[3,19]}],\"urls\":[]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Mon Dec 07 16:43:33 +0000 2020\",\"id\":1335988328362090500,\"id_str\":\"1335988328362090500\",\"text\":\"Here I describe a brief overview of how the Pfizer\\\/BioNTech or Moderna mRNA vaccines work. Taking a vaccine is one\\u2019\\u2026 https:\\\/\\\/t.co\\\/iCH47jBBGn\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/iCH47jBBGn\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1335988328362090500\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":31469,\"favorite_count\":101730,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":31469,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/471436845864071168\\\/DFEf-VSH_normal.jpeg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/471436845864071168\\\/DFEf-VSH_normal.jpeg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1047521\\\/1401234255\",\"profile_link_color\":\"006878\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"F7FFFE\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":920990355394265089,\"id_str\":\"920990355394265089\",\"name\":\"Boris Schapira\",\"screen_name\":\"boostmarks\",\"location\":\"\",\"description\":\"#WebPerf & #WebQuality aficionado \\u00b7 @Dareboost CSM (part of @Contentsquare) \\u00b7 Teacher \\u00b7 EN\\\/fr \\u00b7 personal account @borisschapira\",\"url\":\"https:\\\/\\\/t.co\\\/hryfoB8LdA\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/hryfoB8LdA\",\"expanded_url\":\"https:\\\/\\\/boris.schapira.dev\\\/en\\\/web\",\"display_url\":\"boris.schapira.dev\\\/en\\\/web\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":736,\"friends_count\":805,\"listed_count\":21,\"created_at\":\"Thu Oct 19 12:29:46 +0000 2017\",\"favourites_count\":952,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1739,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 17:24:23 +0000 2020\",\"id\":1336723381706756097,\"id_str\":\"1336723381706756097\",\"text\":\"L\\u2019\\u00e9dition 2020 du Web Almanac est en ligne, la meilleure ressource pour comprendre comment le Web est fait (et en c\\u2026 https:\\\/\\\/t.co\\\/l7E8BJODAL\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/l7E8BJODAL\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336723381706756097\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":true,\"quoted_status_id\":1336718249388625921,\"quoted_status_id_str\":\"1336718249388625921\",\"retweet_count\":5,\"favorite_count\":5,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333702638953754625\\\/RBEy84Sj_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1333702638953754625\\\/RBEy84Sj_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/920990355394265089\\\/1603788160\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1449319760,\"id_str\":\"1449319760\",\"name\":\"Uncomplicate\",\"screen_name\":\"uncomplicateorg\",\"location\":\"\",\"description\":\"\",\"url\":\"http:\\\/\\\/t.co\\\/xe8Y9SfC4h\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/xe8Y9SfC4h\",\"expanded_url\":\"http:\\\/\\\/www.uncomplicate.org\",\"display_url\":\"uncomplicate.org\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":226,\"friends_count\":95,\"listed_count\":7,\"created_at\":\"Wed May 22 16:05:25 +0000 2013\",\"favourites_count\":334,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":790,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 13:43:21 +0000 2020\",\"id\":1336305367740014592,\"id_str\":\"1336305367740014592\",\"text\":\"RT @draganrocks: Learn how to *program* fast software, from head to toe, and back. \\u2728 https:\\\/\\\/t.co\\\/SXuf3w6lxV \\u2728\\n #Clojure #AI #TensorFlow #r\\u2026\",\"truncated\":false,\"entities\":{\"hashtags\":[{\"text\":\"Clojure\",\"indices\":[112,120]},{\"text\":\"AI\",\"indices\":[121,124]},{\"text\":\"TensorFlow\",\"indices\":[125,136]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"draganrocks\",\"name\":\"Dragan Djuric\",\"id\":788473481033834497,\"id_str\":\"788473481033834497\",\"indices\":[3,15]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SXuf3w6lxV\",\"expanded_url\":\"http:\\\/\\\/aiprobook.com\",\"display_url\":\"aiprobook.com\",\"indices\":[85,108]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Tue Dec 08 13:43:05 +0000 2020\",\"id\":1336305299326701573,\"id_str\":\"1336305299326701573\",\"text\":\"Learn how to *program* fast software, from head to toe, and back. \\u2728 https:\\\/\\\/t.co\\\/SXuf3w6lxV \\u2728\\n #Clojure #AI\\u2026 https:\\\/\\\/t.co\\\/EU9mGNJqP4\",\"truncated\":true,\"entities\":{\"hashtags\":[{\"text\":\"Clojure\",\"indices\":[95,103]},{\"text\":\"AI\",\"indices\":[104,107]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/SXuf3w6lxV\",\"expanded_url\":\"http:\\\/\\\/aiprobook.com\",\"display_url\":\"aiprobook.com\",\"indices\":[68,91]},{\"url\":\"https:\\\/\\\/t.co\\\/EU9mGNJqP4\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336305299326701573\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[109,132]}]},\"source\":\"<a href=\\\"https:\\\/\\\/mobile.twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web App<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":10,\"favorite_count\":11,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":10,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/555293359246286848\\\/KHcfIKYZ_normal.png\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/555293359246286848\\\/KHcfIKYZ_normal.png\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":729212113684729857,\"id_str\":\"729212113684729857\",\"name\":\"CatalyzeX\\ud83d\\udca1\",\"screen_name\":\"CatalyzeX\",\"location\":\"\",\"description\":\"Productivity tools for machine learning R&D. Get the free browser extension to find code for research papers anywhere online! https:\\\/\\\/t.co\\\/pGMEWAKFjf \\ud83d\\ude80\",\"url\":\"https:\\\/\\\/t.co\\\/GN7l53f3Pq\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/GN7l53f3Pq\",\"expanded_url\":\"https:\\\/\\\/www.CatalyzeX.com\",\"display_url\":\"CatalyzeX.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pGMEWAKFjf\",\"expanded_url\":\"http:\\\/\\\/bit.ly\\\/code_finder_chrome\",\"display_url\":\"bit.ly\\\/code_finder_ch\\u2026\",\"indices\":[126,149]}]}},\"protected\":false,\"followers_count\":2291,\"friends_count\":2073,\"listed_count\":57,\"created_at\":\"Sun May 08 07:31:30 +0000 2016\",\"favourites_count\":1377,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":1048,\"lang\":null,\"status\":{\"created_at\":\"Tue Dec 08 09:29:08 +0000 2020\",\"id\":1336241391702142977,\"id_str\":\"1336241391702142977\",\"text\":\"RT @Ritmonegro: Find Code for Research Papers - CatalyzeX \\u2013 Get this Extension for \\ud83e\\udd8a Firefox (en-US) https:\\\/\\\/t.co\\\/6aBI2MJKSR\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Ritmonegro\",\"name\":\"Dr Alan Beckles\",\"id\":22329191,\"id_str\":\"22329191\",\"indices\":[3,14]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6aBI2MJKSR\",\"expanded_url\":\"https:\\\/\\\/addons.mozilla.org\\\/en-US\\\/firefox\\\/addon\\\/code-finder-catalyzex\\\/\",\"display_url\":\"addons.mozilla.org\\\/en-US\\\/firefox\\\/\\u2026\",\"indices\":[101,124]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"retweeted_status\":{\"created_at\":\"Sun Dec 06 18:12:22 +0000 2020\",\"id\":1335648292722577408,\"id_str\":\"1335648292722577408\",\"text\":\"Find Code for Research Papers - CatalyzeX \\u2013 Get this Extension for \\ud83e\\udd8a Firefox (en-US) https:\\\/\\\/t.co\\\/6aBI2MJKSR\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/6aBI2MJKSR\",\"expanded_url\":\"https:\\\/\\\/addons.mozilla.org\\\/en-US\\\/firefox\\\/addon\\\/code-finder-catalyzex\\\/\",\"display_url\":\"addons.mozilla.org\\\/en-US\\\/firefox\\\/\\u2026\",\"indices\":[85,108]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/iphone\\\" rel=\\\"nofollow\\\">Twitter for iPhone<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":4,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"is_quote_status\":false,\"retweet_count\":2,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"000000\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1255730859564384256\\\/dE23PeTb_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1255730859564384256\\\/dE23PeTb_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/729212113684729857\\\/1576047416\",\"profile_link_color\":\"1B95E0\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":37179193,\"id_str\":\"37179193\",\"name\":\"S\\u00e9bastien Fourault\",\"screen_name\":\"SebFourault\",\"location\":\"Paris\",\"description\":\"Web & UX Specialist @Google - Ex @Capgemini Consulting - #Developer #Designer #Maker and strong #Bot enthusiast \\ud83d\\ude03\",\"url\":\"https:\\\/\\\/t.co\\\/DJvhRWjo9Q\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/DJvhRWjo9Q\",\"expanded_url\":\"http:\\\/\\\/sebastien.fourau.lt\",\"display_url\":\"sebastien.fourau.lt\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2031,\"friends_count\":3154,\"listed_count\":300,\"created_at\":\"Sat May 02 11:08:57 +0000 2009\",\"favourites_count\":3546,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":3799,\"lang\":null,\"status\":{\"created_at\":\"Tue Nov 17 12:13:04 +0000 2020\",\"id\":1328672499878465536,\"id_str\":\"1328672499878465536\",\"text\":\"L\\u2019\\u00e9pid\\u00e9mie de Covid-19, r\\u00e9v\\u00e9latrice de la pouss\\u00e9e des th\\u00e9ories complotistes en France \\nhttps:\\\/\\\/t.co\\\/dHrfWI5btk\\nvia Le Monde\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/dHrfWI5btk\",\"expanded_url\":\"https:\\\/\\\/www.lemonde.fr\\\/politique\\\/article\\\/2020\\\/11\\\/17\\\/l-epidemie-de-covid-19-revelatrice-de-la-poussee-des-theories-complotistes-en-france_6060009_823448.html\",\"display_url\":\"lemonde.fr\\\/politique\\\/arti\\u2026\",\"indices\":[87,110]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":1,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"B2DFDA\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme13\\\/bg.gif\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/971858594869186560\\\/D1Lgd4eT_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/971858594869186560\\\/D1Lgd4eT_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/37179193\\\/1520545637\",\"profile_link_color\":\"5899E8\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":1065780043941502976,\"id_str\":\"1065780043941502976\",\"name\":\"Adam Burke\",\"screen_name\":\"AdamBurkeware\",\"location\":\"\",\"description\":\"Software\\nhttps:\\\/\\\/t.co\\\/pTXTA6PWzA\\nhttps:\\\/\\\/t.co\\\/Uj7phwPmZZ\",\"url\":null,\"entities\":{\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/pTXTA6PWzA\",\"expanded_url\":\"http:\\\/\\\/linkedin.com\\\/in\\\/adamburke\\\/\",\"display_url\":\"linkedin.com\\\/in\\\/adamburke\\\/\",\"indices\":[9,32]},{\"url\":\"https:\\\/\\\/t.co\\\/Uj7phwPmZZ\",\"expanded_url\":\"http:\\\/\\\/thenewcentre.academia.edu\\\/AdamBurke\",\"display_url\":\"thenewcentre.academia.edu\\\/AdamBurke\",\"indices\":[33,56]}]}},\"protected\":false,\"followers_count\":141,\"friends_count\":593,\"listed_count\":3,\"created_at\":\"Fri Nov 23 01:32:18 +0000 2018\",\"favourites_count\":2240,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":471,\"lang\":null,\"status\":{\"created_at\":\"Thu Nov 19 03:15:21 +0000 2020\",\"id\":1329261954632859648,\"id_str\":\"1329261954632859648\",\"text\":\"Expanding business plan to include service hosting: stacksofslacksonracks\",\"truncated\":false,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/#!\\\/download\\\/ipad\\\" rel=\\\"nofollow\\\">Twitter for iPad<\\\/a>\",\"in_reply_to_status_id\":1329261953202540546,\"in_reply_to_status_id_str\":\"1329261953202540546\",\"in_reply_to_user_id\":1065780043941502976,\"in_reply_to_user_id_str\":\"1065780043941502976\",\"in_reply_to_screen_name\":\"AdamBurkeware\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"F5F8FA\",\"profile_background_image_url\":null,\"profile_background_image_url_https\":null,\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1065780865114943488\\\/HJN53GwV_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1065780865114943488\\\/HJN53GwV_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/1065780043941502976\\\/1570140701\",\"profile_link_color\":\"1DA1F2\",\"profile_sidebar_border_color\":\"C0DEED\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":true,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"},{\"id\":17514151,\"id_str\":\"17514151\",\"name\":\"Chandra Guntur\",\"screen_name\":\"CGuntur\",\"location\":\"New Jersey, USA\",\"description\":\"Hoopy Frood | @Java_Champions \\\/JCP EC Rep\\\/@NYJavaSIG & @GardenStateJUG Leader | #Saganist | \\u0905\\u0939\\u0902 \\u092c\\u094d\\u0930\\u0939\\u094d\\u092e\\u093e\\u0938\\u094d\\u092e\\u093f |#UsualSuspects \\ud83d\\udd96\\ud83d\\ude0e \\ud83c\\uddfa\\ud83c\\uddf8| \\n\\nMotto: docendo discimus\",\"url\":\"https:\\\/\\\/t.co\\\/cfYWhbC9jO\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/cfYWhbC9jO\",\"expanded_url\":\"http:\\\/\\\/cguntur.me\",\"display_url\":\"cguntur.me\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2921,\"friends_count\":1428,\"listed_count\":39,\"created_at\":\"Thu Nov 20 16:02:28 +0000 2008\",\"favourites_count\":27959,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":false,\"statuses_count\":6710,\"lang\":null,\"status\":{\"created_at\":\"Wed Dec 09 20:00:36 +0000 2020\",\"id\":1336762693986947073,\"id_str\":\"1336762693986947073\",\"text\":\"@Sharat_Chander @fabianenardon @gail_asgteach @Paul_ASGTeach @Oracle @java @Java_Champions @soujava @GardenStateJUG\\u2026 https:\\\/\\\/t.co\\\/rkI0jg6cs8\",\"truncated\":true,\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"Sharat_Chander\",\"name\":\"Sharat\",\"id\":13795732,\"id_str\":\"13795732\",\"indices\":[0,15]},{\"screen_name\":\"fabianenardon\",\"name\":\"Fabiane Bizinella Nardon\",\"id\":15480135,\"id_str\":\"15480135\",\"indices\":[16,30]},{\"screen_name\":\"gail_asgteach\",\"name\":\"Gail Anderson\",\"id\":14848499,\"id_str\":\"14848499\",\"indices\":[31,45]},{\"screen_name\":\"Paul_ASGTeach\",\"name\":\"Paul Anderson\",\"id\":445714475,\"id_str\":\"445714475\",\"indices\":[46,60]},{\"screen_name\":\"Oracle\",\"name\":\"Oracle\",\"id\":809273,\"id_str\":\"809273\",\"indices\":[61,68]},{\"screen_name\":\"java\",\"name\":\"Java\",\"id\":125485258,\"id_str\":\"125485258\",\"indices\":[69,74]},{\"screen_name\":\"Java_Champions\",\"name\":\"Java Champions\",\"id\":1156921489,\"id_str\":\"1156921489\",\"indices\":[75,90]},{\"screen_name\":\"soujava\",\"name\":\"soujava\",\"id\":18505583,\"id_str\":\"18505583\",\"indices\":[91,99]},{\"screen_name\":\"GardenStateJUG\",\"name\":\"Garden State Java User Group\",\"id\":59596637,\"id_str\":\"59596637\",\"indices\":[100,115]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/rkI0jg6cs8\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/i\\\/web\\\/status\\\/1336762693986947073\",\"display_url\":\"twitter.com\\\/i\\\/web\\\/status\\\/1\\u2026\",\"indices\":[117,140]}]},\"source\":\"<a href=\\\"http:\\\/\\\/twitter.com\\\/download\\\/android\\\" rel=\\\"nofollow\\\">Twitter for Android<\\\/a>\",\"in_reply_to_status_id\":1336761257710374913,\"in_reply_to_status_id_str\":\"1336761257710374913\",\"in_reply_to_user_id\":13795732,\"in_reply_to_user_id_str\":\"13795732\",\"in_reply_to_screen_name\":\"Sharat_Chander\",\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":3,\"favorited\":false,\"retweeted\":false,\"lang\":\"en\"},\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"808080\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme14\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1260593032476450818\\\/ojahRhkA_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1260593032476450818\\\/ojahRhkA_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/17514151\\\/1590544501\",\"profile_link_color\":\"2C8A4B\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"000000\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":false,\"has_extended_profile\":true,\"default_profile\":false,\"default_profile_image\":false,\"following\":true,\"live_following\":false,\"follow_request_sent\":false,\"notifications\":false,\"muting\":false,\"blocking\":false,\"blocked_by\":false,\"translator_type\":\"none\"}],\"next_cursor\":1645049967345751374,\"next_cursor_str\":\"1645049967345751374\",\"previous_cursor\":0,\"previous_cursor_str\":\"0\",\"total_count\":null}}","correlation_id":"ab8db871-e9bb-4865-ab54-65524b608f5e","screen_name":"thierrymarianne","cursor":"-1","occurred_at":"2020-12-09T22:35:47+00:00","ended_at":"2020-12-09T22:35:47+00:00","started_at":"2020-12-09T22:35:47+00:00"}