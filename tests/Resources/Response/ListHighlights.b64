{"aggregates":[],"statuses":[{"id":10958629,"publicationDateTime":"2020-12-14 10:04:23","lastUpdate":"2020-12-14 10:04:23","status":{"status_id":"1338424590440288258","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1165822715732930565\/uz3J1eOl_normal.jpg","text":"\ud83d\udd34 ALERTE INFO - OL: G\u00e9rard Houllier est mort \u00e0 l'\u00e2ge de 73 ans https:\/\/t.co\/Qc9FZKxOoq https:\/\/t.co\/PH2QBurly3","url":"https:\/\/twitter.com\/BFMTV\/status\/1338424590440288258","retweet_count":96,"favorite_count":96,"username":"BFMTV","published_at":"Mon Dec 14 10:04:23 +0000 2020","media":[{"sizes":{"large":{"w":1253,"h":708,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":1200,"h":678,"resize":"fit"},"small":{"w":680,"h":384,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMJ8vRXcAAi_xB.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 10:04:23 +0000 2020\",\"id\":1338424590440288258,\"id_str\":\"1338424590440288258\",\"full_text\":\"\\ud83d\\udd34 ALERTE INFO - OL: G\\u00e9rard Houllier est mort \\u00e0 l'\\u00e2ge de 73 ans https:\\\/\\\/t.co\\\/Qc9FZKxOoq https:\\\/\\\/t.co\\\/PH2QBurly3\",\"truncated\":false,\"display_text_range\":[0,86],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Qc9FZKxOoq\",\"expanded_url\":\"https:\\\/\\\/rmcsport.bfmtv.com\\\/football\\\/ol-gerard-houllier-est-mort-a-l-age-de-73-ans-2018462.html\",\"display_url\":\"rmcsport.bfmtv.com\\\/football\\\/ol-ge\\u2026\",\"indices\":[63,86]}],\"media\":[{\"id\":1338424453345275904,\"id_str\":\"1338424453345275904\",\"indices\":[87,110],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMJ8vRXcAAi_xB.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMJ8vRXcAAi_xB.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/PH2QBurly3\",\"display_url\":\"pic.twitter.com\\\/PH2QBurly3\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BFMTV\\\/status\\\/1338424590440288258\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":1253,\"h\":708,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":678,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":384,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338424453345275904,\"id_str\":\"1338424453345275904\",\"indices\":[87,110],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMJ8vRXcAAi_xB.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMJ8vRXcAAi_xB.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/PH2QBurly3\",\"display_url\":\"pic.twitter.com\\\/PH2QBurly3\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BFMTV\\\/status\\\/1338424590440288258\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":1253,\"h\":708,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1200,\"h\":678,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":384,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":133663801,\"id_str\":\"133663801\",\"name\":\"BFMTV\",\"screen_name\":\"BFMTV\",\"location\":\"France\",\"description\":\"Premi\\u00e8re sur l'info. Retrouvez-nous sur Snapchat\\\/Instagram \\u27a1 bfmtv\",\"url\":\"https:\\\/\\\/t.co\\\/Mjm8y6dGAC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Mjm8y6dGAC\",\"expanded_url\":\"http:\\\/\\\/www.bfmtv.com\",\"display_url\":\"bfmtv.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2959351,\"friends_count\":578,\"listed_count\":9316,\"created_at\":\"Fri Apr 16 09:55:26 +0000 2010\",\"favourites_count\":607,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":499253,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"1277C9\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1165822715732930565\\\/uz3J1eOl_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1165822715732930565\\\/uz3J1eOl_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/133663801\\\/1579608118\",\"profile_link_color\":\"1277C9\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"regular\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":124,\"favorite_count\":334,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":96,\"favorites_count\":96}"}},{"id":10959167,"publicationDateTime":"2020-12-14 12:20:02","lastUpdate":"2020-12-14 12:20:02","status":{"status_id":"1338458727133884417","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1165822715732930565\/uz3J1eOl_normal.jpg","text":"\ud83d\udd34 YouTube, Gmail, Drive... Panne majeure et in\u00e9dite des services de Google https:\/\/t.co\/bErnkOnMqa https:\/\/t.co\/WaY1qmYmFM","url":"https:\/\/twitter.com\/BFMTV\/status\/1338458727133884417","retweet_count":83,"favorite_count":83,"username":"BFMTV","published_at":"Mon Dec 14 12:20:02 +0000 2020","media":[{"sizes":{"thumb":{"w":150,"h":150,"resize":"crop"},"small":{"w":680,"h":383,"resize":"fit"},"medium":{"w":800,"h":450,"resize":"fit"},"large":{"w":800,"h":450,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMpGa7XMAE6pau.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 12:20:02 +0000 2020\",\"id\":1338458727133884417,\"id_str\":\"1338458727133884417\",\"full_text\":\"\\ud83d\\udd34 YouTube, Gmail, Drive... Panne majeure et in\\u00e9dite des services de Google https:\\\/\\\/t.co\\\/bErnkOnMqa https:\\\/\\\/t.co\\\/WaY1qmYmFM\",\"truncated\":false,\"display_text_range\":[0,98],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/bErnkOnMqa\",\"expanded_url\":\"https:\\\/\\\/www.bfmtv.com\\\/economie\\\/you-tube-gmail-drive-panne-majeure-et-inedite-des-services-de-google_AN-202012140191.html\",\"display_url\":\"bfmtv.com\\\/economie\\\/you-t\\u2026\",\"indices\":[75,98]}],\"media\":[{\"id\":1338458704543428609,\"id_str\":\"1338458704543428609\",\"indices\":[99,122],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMpGa7XMAE6pau.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMpGa7XMAE6pau.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/WaY1qmYmFM\",\"display_url\":\"pic.twitter.com\\\/WaY1qmYmFM\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BFMTV\\\/status\\\/1338458727133884417\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"medium\":{\"w\":800,\"h\":450,\"resize\":\"fit\"},\"large\":{\"w\":800,\"h\":450,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338458704543428609,\"id_str\":\"1338458704543428609\",\"indices\":[99,122],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMpGa7XMAE6pau.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMpGa7XMAE6pau.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/WaY1qmYmFM\",\"display_url\":\"pic.twitter.com\\\/WaY1qmYmFM\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/BFMTV\\\/status\\\/1338458727133884417\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"small\":{\"w\":680,\"h\":383,\"resize\":\"fit\"},\"medium\":{\"w\":800,\"h\":450,\"resize\":\"fit\"},\"large\":{\"w\":800,\"h\":450,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":133663801,\"id_str\":\"133663801\",\"name\":\"BFMTV\",\"screen_name\":\"BFMTV\",\"location\":\"France\",\"description\":\"Premi\\u00e8re sur l'info. Retrouvez-nous sur Snapchat\\\/Instagram \\u27a1 bfmtv\",\"url\":\"https:\\\/\\\/t.co\\\/Mjm8y6dGAC\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/Mjm8y6dGAC\",\"expanded_url\":\"http:\\\/\\\/www.bfmtv.com\",\"display_url\":\"bfmtv.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2959351,\"friends_count\":578,\"listed_count\":9316,\"created_at\":\"Fri Apr 16 09:55:26 +0000 2010\",\"favourites_count\":607,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":499253,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"1277C9\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1165822715732930565\\\/uz3J1eOl_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1165822715732930565\\\/uz3J1eOl_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/133663801\\\/1579608118\",\"profile_link_color\":\"1277C9\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":false,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"regular\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":100,\"favorite_count\":209,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":83,\"favorites_count\":83}"}},{"id":10957898,"publicationDateTime":"2020-12-14 06:51:01","lastUpdate":"2020-12-14 06:51:01","status":{"status_id":"1338375925109551110","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1064526177560379393\/37lb6PoC_normal.jpg","text":"Le ministre de l\u2019int\u00e9rieur @GDarmanin a annonc\u00e9 samedi l\u2019interpellation de 142 \u00ab individus ultra-violents \u00bb. C\u2019est faux. Les \u00e9l\u00e9ments r\u00e9unis par Mediapart montrent que les policiers ont proc\u00e9d\u00e9 \u00e0 des arrestations arbitraires dans un cort\u00e8ge pacifique. https:\/\/t.co\/AxORp9Ywcq","url":"https:\/\/twitter.com\/Mediapart\/status\/1338375925109551110","retweet_count":53,"favorite_count":53,"username":"Mediapart","published_at":"Mon Dec 14 06:51:01 +0000 2020","media":[],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 06:51:01 +0000 2020\",\"id\":1338375925109551110,\"id_str\":\"1338375925109551110\",\"full_text\":\"Le ministre de l\\u2019int\\u00e9rieur @GDarmanin a annonc\\u00e9 samedi l\\u2019interpellation de 142 \\u00ab individus ultra-violents \\u00bb. C\\u2019est faux. Les \\u00e9l\\u00e9ments r\\u00e9unis par Mediapart montrent que les policiers ont proc\\u00e9d\\u00e9 \\u00e0 des arrestations arbitraires dans un cort\\u00e8ge pacifique. https:\\\/\\\/t.co\\\/AxORp9Ywcq\",\"truncated\":false,\"display_text_range\":[0,275],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"GDarmanin\",\"name\":\"G\\u00e9rald DARMANIN\",\"id\":209825928,\"id_str\":\"209825928\",\"indices\":[27,37]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/AxORp9Ywcq\",\"expanded_url\":\"https:\\\/\\\/mdpt.fr\\\/3niiYRT\",\"display_url\":\"mdpt.fr\\\/3niiYRT\",\"indices\":[252,275]}]},\"source\":\"<a href=\\\"https:\\\/\\\/buffer.com\\\" rel=\\\"nofollow\\\">Buffer<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":19976004,\"id_str\":\"19976004\",\"name\":\"Mediapart\",\"screen_name\":\"Mediapart\",\"location\":\"Paris\",\"description\":\"Journal d'information num\\u00e9rique, ind\\u00e9pendant et participatif. Seuls nos lecteurs peuvent nous acheter ! Suivez aussi @MediapartBlogs et @_alairlibre.\",\"url\":\"https:\\\/\\\/t.co\\\/rEPycUnaz9\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/rEPycUnaz9\",\"expanded_url\":\"https:\\\/\\\/www.mediapart.fr\\\/\",\"display_url\":\"mediapart.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":2686806,\"friends_count\":1859,\"listed_count\":11293,\"created_at\":\"Tue Feb 03 15:07:42 +0000 2009\",\"favourites_count\":3564,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":109572,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"EDEFE8\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1064526177560379393\\\/37lb6PoC_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1064526177560379393\\\/37lb6PoC_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/19976004\\\/1607340923\",\"profile_link_color\":\"AAB617\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"none\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":320,\"favorite_count\":486,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":53,\"favorites_count\":53}"}},{"id":10959268,"publicationDateTime":"2020-12-14 12:41:25","lastUpdate":"2020-12-14 12:41:25","status":{"status_id":"1338464108694429697","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1272769405575925767\/uRtKtfhk_normal.jpg","text":"Les internautes \u00e0 travers le monde peinent \u00e0 se connecter \u00e0 Gmail, Youtube ou encore au moteur de recherches du g\u00e9ant am\u00e9ricain Google, affect\u00e9s par une panne massive \u00e0 en croire les signalements sur les r\u00e9seaux sociaux ou des sites sp\u00e9cialis\u00e9s tels que Downdetector #AFP https:\/\/t.co\/8vHXl7Yksf","url":"https:\/\/twitter.com\/afpfr\/status\/1338464108694429697","retweet_count":48,"favorite_count":48,"username":"afpfr","published_at":"Mon Dec 14 12:41:25 +0000 2020","media":[{"sizes":{"small":{"w":680,"h":428,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":1000,"h":630,"resize":"fit"},"large":{"w":1000,"h":630,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMt5L7XcAEu4BE.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 12:41:25 +0000 2020\",\"id\":1338464108694429697,\"id_str\":\"1338464108694429697\",\"full_text\":\"Les internautes \\u00e0 travers le monde peinent \\u00e0 se connecter \\u00e0 Gmail, Youtube ou encore au moteur de recherches du g\\u00e9ant am\\u00e9ricain Google, affect\\u00e9s par une panne massive \\u00e0 en croire les signalements sur les r\\u00e9seaux sociaux ou des sites sp\\u00e9cialis\\u00e9s tels que Downdetector #AFP https:\\\/\\\/t.co\\\/8vHXl7Yksf\",\"truncated\":false,\"display_text_range\":[0,271],\"entities\":{\"hashtags\":[{\"text\":\"AFP\",\"indices\":[267,271]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[],\"media\":[{\"id\":1338463974736752641,\"id_str\":\"1338463974736752641\",\"indices\":[272,295],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMt5L7XcAEu4BE.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMt5L7XcAEu4BE.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/8vHXl7Yksf\",\"display_url\":\"pic.twitter.com\\\/8vHXl7Yksf\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338464108694429697\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":428,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"},\"large\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338463974736752641,\"id_str\":\"1338463974736752641\",\"indices\":[272,295],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMt5L7XcAEu4BE.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMt5L7XcAEu4BE.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/8vHXl7Yksf\",\"display_url\":\"pic.twitter.com\\\/8vHXl7Yksf\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338464108694429697\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"small\":{\"w\":680,\"h\":428,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"},\"large\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":338985020,\"id_str\":\"338985020\",\"name\":\"Agence France-Presse\",\"screen_name\":\"afpfr\",\"location\":\"Paris\",\"description\":\"Morceaux choisis des fils d'actu, coulisses & RT des 1.700 journalistes de l'AFP \\u00e0 travers le monde. Ailleurs sur Twitter: https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"expanded_url\":\"http:\\\/\\\/www.afp.com\",\"display_url\":\"afp.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"expanded_url\":\"http:\\\/\\\/u.afp.com\\\/AFPTwitter\",\"display_url\":\"u.afp.com\\\/AFPTwitter\",\"indices\":[123,146]}]}},\"protected\":false,\"followers_count\":3581748,\"friends_count\":1337,\"listed_count\":15098,\"created_at\":\"Wed Jul 20 12:07:59 +0000 2011\",\"favourites_count\":1,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":447955,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/338985020\\\/1605517149\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"regular\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":80,\"favorite_count\":168,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":48,\"favorites_count\":48}"}},{"id":10957990,"publicationDateTime":"2020-12-14 07:29:00","lastUpdate":"2020-12-14 07:29:00","status":{"status_id":"1338385484695793664","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1272769405575925767\/uRtKtfhk_normal.jpg","text":"\ud83c\uddf5\ud83c\uddf1 Des milliers de personnes ont manifest\u00e9 hier \u00e0 Varsovie pour protester contre un arr\u00eat du Tribunal constitutionnel imposant une interdiction quasi totale de l'avortement dans ce pays, et r\u00e9clamer aussi le d\u00e9part du gouvernement conservateur https:\/\/t.co\/TkxWphkHFp #AFP https:\/\/t.co\/gk4y3uVN6y","url":"https:\/\/twitter.com\/afpfr\/status\/1338385484695793664","retweet_count":47,"favorite_count":47,"username":"afpfr","published_at":"Mon Dec 14 07:29:00 +0000 2020","media":[{"sizes":{"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":1024,"h":682,"resize":"fit"},"large":{"w":1024,"h":682,"resize":"fit"},"small":{"w":680,"h":453,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpLMuCnWEAA6nrI.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 07:29:00 +0000 2020\",\"id\":1338385484695793664,\"id_str\":\"1338385484695793664\",\"full_text\":\"\\ud83c\\uddf5\\ud83c\\uddf1 Des milliers de personnes ont manifest\\u00e9 hier \\u00e0 Varsovie pour protester contre un arr\\u00eat du Tribunal constitutionnel imposant une interdiction quasi totale de l'avortement dans ce pays, et r\\u00e9clamer aussi le d\\u00e9part du gouvernement conservateur https:\\\/\\\/t.co\\\/TkxWphkHFp #AFP https:\\\/\\\/t.co\\\/gk4y3uVN6y\",\"truncated\":false,\"display_text_range\":[0,272],\"entities\":{\"hashtags\":[{\"text\":\"AFP\",\"indices\":[268,272]}],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/TkxWphkHFp\",\"expanded_url\":\"http:\\\/\\\/u.afp.com\\\/UZJA\",\"display_url\":\"u.afp.com\\\/UZJA\",\"indices\":[244,267]}],\"media\":[{\"id\":1338357130630402048,\"id_str\":\"1338357130630402048\",\"indices\":[273,296],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMuCnWEAA6nrI.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMuCnWEAA6nrI.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/gk4y3uVN6y\",\"display_url\":\"pic.twitter.com\\\/gk4y3uVN6y\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338385484695793664\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"large\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338357130630402048,\"id_str\":\"1338357130630402048\",\"indices\":[273,296],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMuCnWEAA6nrI.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMuCnWEAA6nrI.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/gk4y3uVN6y\",\"display_url\":\"pic.twitter.com\\\/gk4y3uVN6y\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338385484695793664\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"large\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"}}},{\"id\":1338357157650116608,\"id_str\":\"1338357157650116608\",\"indices\":[273,296],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMvnRWMAAU_9u.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMvnRWMAAU_9u.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/gk4y3uVN6y\",\"display_url\":\"pic.twitter.com\\\/gk4y3uVN6y\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338385484695793664\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"},\"large\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"}}},{\"id\":1338357178365841413,\"id_str\":\"1338357178365841413\",\"indices\":[273,296],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMw0cXEAUpTQX.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpLMw0cXEAUpTQX.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/gk4y3uVN6y\",\"display_url\":\"pic.twitter.com\\\/gk4y3uVN6y\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338385484695793664\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"medium\":{\"w\":1024,\"h\":682,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":453,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":338985020,\"id_str\":\"338985020\",\"name\":\"Agence France-Presse\",\"screen_name\":\"afpfr\",\"location\":\"Paris\",\"description\":\"Morceaux choisis des fils d'actu, coulisses & RT des 1.700 journalistes de l'AFP \\u00e0 travers le monde. Ailleurs sur Twitter: https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"expanded_url\":\"http:\\\/\\\/www.afp.com\",\"display_url\":\"afp.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"expanded_url\":\"http:\\\/\\\/u.afp.com\\\/AFPTwitter\",\"display_url\":\"u.afp.com\\\/AFPTwitter\",\"indices\":[123,146]}]}},\"protected\":false,\"followers_count\":3581748,\"friends_count\":1337,\"listed_count\":15098,\"created_at\":\"Wed Jul 20 12:07:59 +0000 2011\",\"favourites_count\":1,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":447955,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/338985020\\\/1605517149\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"regular\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":104,\"favorite_count\":337,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":47,\"favorites_count\":47}"}},{"id":10957918,"publicationDateTime":"2020-12-14 07:08:44","lastUpdate":"2020-12-14 07:08:44","status":{"status_id":"1338380384761942018","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/854315131395878912\/jZceoVi9_normal.jpg","text":"\ud83c\udf96 L'\u00e9crivain italien Corrado Augias rend sa L\u00e9gion d'honneur \u00e0 la France\n\nLe journaliste refuse de \u00abpartager cet honneur\u00bb avec le pr\u00e9sident \u00e9gyptien, Abdel Fattah al-Sissi. \u2935 https:\/\/t.co\/lO4NGpVIbi","url":"https:\/\/twitter.com\/libe\/status\/1338380384761942018","retweet_count":40,"favorite_count":40,"username":"libe","published_at":"Mon Dec 14 07:08:44 +0000 2020","media":[],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 07:08:44 +0000 2020\",\"id\":1338380384761942018,\"id_str\":\"1338380384761942018\",\"full_text\":\"\\ud83c\\udf96 L'\\u00e9crivain italien Corrado Augias rend sa L\\u00e9gion d'honneur \\u00e0 la France\\n\\nLe journaliste refuse de \\u00abpartager cet honneur\\u00bb avec le pr\\u00e9sident \\u00e9gyptien, Abdel Fattah al-Sissi. \\u2935 https:\\\/\\\/t.co\\\/lO4NGpVIbi\",\"truncated\":false,\"display_text_range\":[0,198],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/lO4NGpVIbi\",\"expanded_url\":\"https:\\\/\\\/bit.ly\\\/3qWOg2T\",\"display_url\":\"bit.ly\\\/3qWOg2T\",\"indices\":[175,198]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.echobox.com\\\" rel=\\\"nofollow\\\">Echobox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":68440549,\"id_str\":\"68440549\",\"name\":\"Lib\\u00e9ration\",\"screen_name\":\"libe\",\"location\":\"Paris, France\",\"description\":\"Bienvenue sur le fil Twitter officiel de Lib\\u00e9ration.\",\"url\":\"http:\\\/\\\/t.co\\\/naonbyZ9SL\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"http:\\\/\\\/t.co\\\/naonbyZ9SL\",\"expanded_url\":\"http:\\\/\\\/www.liberation.fr\",\"display_url\":\"liberation.fr\",\"indices\":[0,22]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":3191185,\"friends_count\":228,\"listed_count\":16219,\"created_at\":\"Mon Aug 24 16:09:25 +0000 2009\",\"favourites_count\":1169,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":222298,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"242424\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/854315131395878912\\\/jZceoVi9_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/854315131395878912\\\/jZceoVi9_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/68440549\\\/1604436302\",\"profile_link_color\":\"E3234A\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"FFFFFF\",\"profile_text_color\":\"36322F\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"none\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":103,\"favorite_count\":367,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":40,\"favorites_count\":40}"}},{"id":10958669,"publicationDateTime":"2020-12-14 10:15:00","lastUpdate":"2020-12-14 10:15:00","status":{"status_id":"1338427260387250176","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/1272769405575925767\/uRtKtfhk_normal.jpg","text":"\"On ne peut plus vivre avec ce job\": Wissem avale 700 km par semaine pour livrer \u00e0 scooter des plats cuisin\u00e9s. Si le confinement a accru la demande, les r\u00e9mun\u00e9rations stagnent et les revendications des coursiers restent lettre morte @thomasgropallo\nhttps:\/\/t.co\/nce5ks9nT8 #AFP https:\/\/t.co\/LI9EoC2005","url":"https:\/\/twitter.com\/afpfr\/status\/1338427260387250176","retweet_count":38,"favorite_count":38,"username":"afpfr","published_at":"Mon Dec 14 10:15:00 +0000 2020","media":[{"sizes":{"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":1000,"h":630,"resize":"fit"},"small":{"w":680,"h":428,"resize":"fit"},"large":{"w":1000,"h":630,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMK0nEXIAAgSCx.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 10:15:00 +0000 2020\",\"id\":1338427260387250176,\"id_str\":\"1338427260387250176\",\"full_text\":\"\\\"On ne peut plus vivre avec ce job\\\": Wissem avale 700 km par semaine pour livrer \\u00e0 scooter des plats cuisin\\u00e9s. Si le confinement a accru la demande, les r\\u00e9mun\\u00e9rations stagnent et les revendications des coursiers restent lettre morte @thomasgropallo\\nhttps:\\\/\\\/t.co\\\/nce5ks9nT8 #AFP https:\\\/\\\/t.co\\\/LI9EoC2005\",\"truncated\":false,\"display_text_range\":[0,277],\"entities\":{\"hashtags\":[{\"text\":\"AFP\",\"indices\":[273,277]}],\"symbols\":[],\"user_mentions\":[{\"screen_name\":\"thomasgropallo\",\"name\":\"Thomas Gropallo\",\"id\":379607163,\"id_str\":\"379607163\",\"indices\":[233,248]}],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nce5ks9nT8\",\"expanded_url\":\"http:\\\/\\\/u.afp.com\\\/UZwo\",\"display_url\":\"u.afp.com\\\/UZwo\",\"indices\":[249,272]}],\"media\":[{\"id\":1338425413215920128,\"id_str\":\"1338425413215920128\",\"indices\":[278,301],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMK0nEXIAAgSCx.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMK0nEXIAAgSCx.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/LI9EoC2005\",\"display_url\":\"pic.twitter.com\\\/LI9EoC2005\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338427260387250176\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":428,\"resize\":\"fit\"},\"large\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338425413215920128,\"id_str\":\"1338425413215920128\",\"indices\":[278,301],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMK0nEXIAAgSCx.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMK0nEXIAAgSCx.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/LI9EoC2005\",\"display_url\":\"pic.twitter.com\\\/LI9EoC2005\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/afpfr\\\/status\\\/1338427260387250176\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"medium\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":428,\"resize\":\"fit\"},\"large\":{\"w\":1000,\"h\":630,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/about.twitter.com\\\/products\\\/tweetdeck\\\" rel=\\\"nofollow\\\">TweetDeck<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":338985020,\"id_str\":\"338985020\",\"name\":\"Agence France-Presse\",\"screen_name\":\"afpfr\",\"location\":\"Paris\",\"description\":\"Morceaux choisis des fils d'actu, coulisses & RT des 1.700 journalistes de l'AFP \\u00e0 travers le monde. Ailleurs sur Twitter: https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/nidDu0He8m\",\"expanded_url\":\"http:\\\/\\\/www.afp.com\",\"display_url\":\"afp.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/4pIm8k2HLC\",\"expanded_url\":\"http:\\\/\\\/u.afp.com\\\/AFPTwitter\",\"display_url\":\"u.afp.com\\\/AFPTwitter\",\"indices\":[123,146]}]}},\"protected\":false,\"followers_count\":3581748,\"friends_count\":1337,\"listed_count\":15098,\"created_at\":\"Wed Jul 20 12:07:59 +0000 2011\",\"favourites_count\":1,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":447955,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"C0DEED\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/1272769405575925767\\\/uRtKtfhk_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/338985020\\\/1605517149\",\"profile_link_color\":\"0084B4\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"DDEEF6\",\"profile_text_color\":\"333333\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"regular\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":76,\"favorite_count\":132,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":38,\"favorites_count\":38}"}},{"id":10959188,"publicationDateTime":"2020-12-14 12:17:48","lastUpdate":"2020-12-14 12:17:48","status":{"status_id":"1338458166783315970","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/730414206751772672\/S2qoiYgK_normal.jpg","text":"YouTube, Gmail... les services Google subissent une panne mondiale https:\/\/t.co\/yyJ33hzCrJ https:\/\/t.co\/E3MxFF3SVQ","url":"https:\/\/twitter.com\/lobs\/status\/1338458166783315970","retweet_count":35,"favorite_count":35,"username":"lobs","published_at":"Mon Dec 14 12:17:48 +0000 2020","media":[{"sizes":{"large":{"w":800,"h":600,"resize":"fit"},"small":{"w":680,"h":510,"resize":"fit"},"medium":{"w":800,"h":600,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMom-oXYAAYKTk.png"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 12:17:48 +0000 2020\",\"id\":1338458166783315970,\"id_str\":\"1338458166783315970\",\"full_text\":\"YouTube, Gmail... les services Google subissent une panne mondiale https:\\\/\\\/t.co\\\/yyJ33hzCrJ https:\\\/\\\/t.co\\\/E3MxFF3SVQ\",\"truncated\":false,\"display_text_range\":[0,90],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/yyJ33hzCrJ\",\"expanded_url\":\"https:\\\/\\\/www.nouvelobs.com\\\/monde\\\/20201214.OBS37519\\\/youtube-gmail-les-services-google-subissent-une-panne-mondiale.html?utm_term=Autofeed&utm_medium=Social&utm_source=Twitter#Echobox=1607948204\",\"display_url\":\"nouvelobs.com\\\/monde\\\/20201214\\u2026\",\"indices\":[67,90]}],\"media\":[{\"id\":1338458164371611648,\"id_str\":\"1338458164371611648\",\"indices\":[91,114],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMom-oXYAAYKTk.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMom-oXYAAYKTk.png\",\"url\":\"https:\\\/\\\/t.co\\\/E3MxFF3SVQ\",\"display_url\":\"pic.twitter.com\\\/E3MxFF3SVQ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/lobs\\\/status\\\/1338458166783315970\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":800,\"h\":600,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":510,\"resize\":\"fit\"},\"medium\":{\"w\":800,\"h\":600,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338458164371611648,\"id_str\":\"1338458164371611648\",\"indices\":[91,114],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMom-oXYAAYKTk.png\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMom-oXYAAYKTk.png\",\"url\":\"https:\\\/\\\/t.co\\\/E3MxFF3SVQ\",\"display_url\":\"pic.twitter.com\\\/E3MxFF3SVQ\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/lobs\\\/status\\\/1338458166783315970\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"large\":{\"w\":800,\"h\":600,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":510,\"resize\":\"fit\"},\"medium\":{\"w\":800,\"h\":600,\"resize\":\"fit\"},\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.echobox.com\\\" rel=\\\"nofollow\\\">Echobox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":21313364,\"id_str\":\"21313364\",\"name\":\"L'Obs\",\"screen_name\":\"lobs\",\"location\":\"Paris\",\"description\":\"Compte officiel de L'Obs \\ud83d\\uddde\\ufe0f\\nFacebook \\ud83d\\udc49 \\\/lenouvelobservateur\\nInstagram \\ud83d\\udcf8 \\\/lobs\",\"url\":\"https:\\\/\\\/t.co\\\/CwUKwk2Cnm\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/CwUKwk2Cnm\",\"expanded_url\":\"https:\\\/\\\/www.nouvelobs.com\\\/\",\"display_url\":\"nouvelobs.com\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":1421980,\"friends_count\":401,\"listed_count\":9269,\"created_at\":\"Thu Feb 19 16:31:00 +0000 2009\",\"favourites_count\":272,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":213921,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"FFFFFF\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme15\\\/bg.png\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/730414206751772672\\\/S2qoiYgK_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/730414206751772672\\\/S2qoiYgK_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/21313364\\\/1517406587\",\"profile_link_color\":\"E5333F\",\"profile_sidebar_border_color\":\"000000\",\"profile_sidebar_fill_color\":\"F5F5F5\",\"profile_text_color\":\"000000\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"none\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":41,\"favorite_count\":52,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":35,\"favorites_count\":35}"}},{"id":10959361,"publicationDateTime":"2020-12-14 13:00:55","lastUpdate":"2020-12-14 13:00:55","status":{"status_id":"1338469016021700608","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/757590787030933504\/ZTXsoahT_normal.jpg","text":"La semaine derni\u00e8re, Florence Parly, la ministre de la D\u00e9fense, a annonc\u00e9 que l\u2019arm\u00e9e fran\u00e7aise se pr\u00e9pare \u00e0 d\u00e9ployer des \"soldats augment\u00e9s\", c'est-\u00e0-dire des combattants dont les capacit\u00e9s physiques ou cognitives ont \u00e9t\u00e9 augment\u00e9es gr\u00e2ce aux technologies https:\/\/t.co\/myToCOdx2Z https:\/\/t.co\/NdXL0dT3h2","url":"https:\/\/twitter.com\/franceculture\/status\/1338469016021700608","retweet_count":35,"favorite_count":35,"username":"franceculture","published_at":"Mon Dec 14 13:00:55 +0000 2020","media":[{"sizes":{"thumb":{"w":150,"h":150,"resize":"crop"},"large":{"w":1400,"h":856,"resize":"fit"},"medium":{"w":1200,"h":734,"resize":"fit"},"small":{"w":680,"h":416,"resize":"fit"}},"url":"https:\/\/pbs.twimg.com\/media\/EpMyeeOW4AIUXtQ.jpg"}],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 13:00:55 +0000 2020\",\"id\":1338469016021700608,\"id_str\":\"1338469016021700608\",\"full_text\":\"La semaine derni\\u00e8re, Florence Parly, la ministre de la D\\u00e9fense, a annonc\\u00e9 que l\\u2019arm\\u00e9e fran\\u00e7aise se pr\\u00e9pare \\u00e0 d\\u00e9ployer des \\\"soldats augment\\u00e9s\\\", c'est-\\u00e0-dire des combattants dont les capacit\\u00e9s physiques ou cognitives ont \\u00e9t\\u00e9 augment\\u00e9es gr\\u00e2ce aux technologies https:\\\/\\\/t.co\\\/myToCOdx2Z https:\\\/\\\/t.co\\\/NdXL0dT3h2\",\"truncated\":false,\"display_text_range\":[0,280],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/myToCOdx2Z\",\"expanded_url\":\"https:\\\/\\\/www.franceculture.fr\\\/sciences\\\/soldat-augmente-le-feu-vert-du-ministere-des-armees?utm_medium=Social&utm_source=Twitter#Echobox=1607849534\",\"display_url\":\"franceculture.fr\\\/sciences\\\/solda\\u2026\",\"indices\":[257,280]}],\"media\":[{\"id\":1338469013349916674,\"id_str\":\"1338469013349916674\",\"indices\":[281,304],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMyeeOW4AIUXtQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMyeeOW4AIUXtQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NdXL0dT3h2\",\"display_url\":\"pic.twitter.com\\\/NdXL0dT3h2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/franceculture\\\/status\\\/1338469016021700608\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1400,\"h\":856,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":734,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":416,\"resize\":\"fit\"}}}]},\"extended_entities\":{\"media\":[{\"id\":1338469013349916674,\"id_str\":\"1338469013349916674\",\"indices\":[281,304],\"media_url\":\"http:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMyeeOW4AIUXtQ.jpg\",\"media_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/media\\\/EpMyeeOW4AIUXtQ.jpg\",\"url\":\"https:\\\/\\\/t.co\\\/NdXL0dT3h2\",\"display_url\":\"pic.twitter.com\\\/NdXL0dT3h2\",\"expanded_url\":\"https:\\\/\\\/twitter.com\\\/franceculture\\\/status\\\/1338469016021700608\\\/photo\\\/1\",\"type\":\"photo\",\"sizes\":{\"thumb\":{\"w\":150,\"h\":150,\"resize\":\"crop\"},\"large\":{\"w\":1400,\"h\":856,\"resize\":\"fit\"},\"medium\":{\"w\":1200,\"h\":734,\"resize\":\"fit\"},\"small\":{\"w\":680,\"h\":416,\"resize\":\"fit\"}}}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.echobox.com\\\" rel=\\\"nofollow\\\">Echobox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":36383320,\"id_str\":\"36383320\",\"name\":\"France Culture\",\"screen_name\":\"franceculture\",\"location\":\"93.5 \\u00e0 Parispp\",\"description\":\"Culture, arts, d\\u00e9bats et soci\\u00e9t\\u00e9...  Fil twitter officiel de France Culture, une radio de @radiofrance.\",\"url\":\"https:\\\/\\\/t.co\\\/jCpBLRrvWw\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/jCpBLRrvWw\",\"expanded_url\":\"https:\\\/\\\/www.franceculture.fr\\\/\",\"display_url\":\"franceculture.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":728084,\"friends_count\":1615,\"listed_count\":5737,\"created_at\":\"Wed Apr 29 15:23:52 +0000 2009\",\"favourites_count\":2216,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":true,\"verified\":true,\"statuses_count\":95894,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":false,\"profile_background_color\":\"0A0A0A\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme10\\\/bg.gif\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme10\\\/bg.gif\",\"profile_background_tile\":false,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/757590787030933504\\\/ZTXsoahT_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/757590787030933504\\\/ZTXsoahT_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/36383320\\\/1591858060\",\"profile_link_color\":\"9D5BCF\",\"profile_sidebar_border_color\":\"FFFFFF\",\"profile_sidebar_fill_color\":\"782783\",\"profile_text_color\":\"09010F\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"none\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":61,\"favorite_count\":85,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":35,\"favorites_count\":35}"}},{"id":10959439,"publicationDateTime":"2020-12-14 13:29:25","lastUpdate":"2020-12-14 13:29:25","status":{"status_id":"1338476187719438337","avatar_url":"https:\/\/pbs.twimg.com\/profile_images\/817042499134980096\/LTpqSDMM_normal.jpg","text":"Une panne de Google perturbe ses principaux services (Gmail, Youtube\u2026) dans le monde entier https:\/\/t.co\/3ThiWHL64A","url":"https:\/\/twitter.com\/lemondefr\/status\/1338476187719438337","retweet_count":34,"favorite_count":34,"username":"lemondefr","published_at":"Mon Dec 14 13:29:25 +0000 2020","media":[],"in_conversation":null,"retweet":false,"original_document":"{\"created_at\":\"Mon Dec 14 13:29:25 +0000 2020\",\"id\":1338476187719438337,\"id_str\":\"1338476187719438337\",\"full_text\":\"Une panne de Google perturbe ses principaux services (Gmail, Youtube\\u2026) dans le monde entier https:\\\/\\\/t.co\\\/3ThiWHL64A\",\"truncated\":false,\"display_text_range\":[0,115],\"entities\":{\"hashtags\":[],\"symbols\":[],\"user_mentions\":[],\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/3ThiWHL64A\",\"expanded_url\":\"https:\\\/\\\/www.lemonde.fr\\\/pixels\\\/article\\\/2020\\\/12\\\/14\\\/une-panne-de-google-perturbe-ses-principaux-services-gmail-youtube-dans-le-monde-entier_6063335_4408996.html?utm_medium=Social&utm_source=Twitter#Echobox=1607951776\",\"display_url\":\"lemonde.fr\\\/pixels\\\/article\\u2026\",\"indices\":[92,115]}]},\"source\":\"<a href=\\\"https:\\\/\\\/www.echobox.com\\\" rel=\\\"nofollow\\\">Echobox<\\\/a>\",\"in_reply_to_status_id\":null,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"user\":{\"id\":24744541,\"id_str\":\"24744541\",\"name\":\"Le Monde\",\"screen_name\":\"lemondefr\",\"location\":\"Paris\",\"description\":\"L'actualit\\u00e9 de r\\u00e9f\\u00e9rence par la r\\u00e9daction du Monde | Pilot\\u00e9 par @bricelaemle @charlotteherzog @PommiersElea\",\"url\":\"https:\\\/\\\/t.co\\\/er70UGkbir\",\"entities\":{\"url\":{\"urls\":[{\"url\":\"https:\\\/\\\/t.co\\\/er70UGkbir\",\"expanded_url\":\"https:\\\/\\\/www.lemonde.fr\",\"display_url\":\"lemonde.fr\",\"indices\":[0,23]}]},\"description\":{\"urls\":[]}},\"protected\":false,\"followers_count\":9072118,\"friends_count\":620,\"listed_count\":35989,\"created_at\":\"Mon Mar 16 18:44:51 +0000 2009\",\"favourites_count\":1702,\"utc_offset\":null,\"time_zone\":null,\"geo_enabled\":false,\"verified\":true,\"statuses_count\":352534,\"lang\":null,\"contributors_enabled\":false,\"is_translator\":false,\"is_translation_enabled\":true,\"profile_background_color\":\"DDE1EA\",\"profile_background_image_url\":\"http:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_image_url_https\":\"https:\\\/\\\/abs.twimg.com\\\/images\\\/themes\\\/theme1\\\/bg.png\",\"profile_background_tile\":true,\"profile_image_url\":\"http:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/817042499134980096\\\/LTpqSDMM_normal.jpg\",\"profile_image_url_https\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_images\\\/817042499134980096\\\/LTpqSDMM_normal.jpg\",\"profile_banner_url\":\"https:\\\/\\\/pbs.twimg.com\\\/profile_banners\\\/24744541\\\/1491832878\",\"profile_link_color\":\"50B6CF\",\"profile_sidebar_border_color\":\"131316\",\"profile_sidebar_fill_color\":\"131316\",\"profile_text_color\":\"3292A8\",\"profile_use_background_image\":true,\"has_extended_profile\":false,\"default_profile\":false,\"default_profile_image\":false,\"following\":false,\"follow_request_sent\":false,\"notifications\":false,\"translator_type\":\"none\"},\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":66,\"favorite_count\":145,\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"lang\":\"fr\",\"retweets_count\":34,\"favorites_count\":34}"}}]}